{"version":3,"sources":["components/pages/Game/MoveHistory.js","components/pages/Game/TreeVisualization.js","components/common/Button.js","components/common/SimpleModel.js","components/pages/Game/DataVisualization.js","components/common/Selection.js","components/common/LoginForm.js","components/common/AvatarMenu.js","components/common/NavBar.js","components/Bots/randomBot.js","components/Bots/getBoardEvaluation.js","components/Bots/MiniMax.js","components/common/Notification.js","components/pages/Game/UndoMove.js","components/pages/Game/Game.js","components/pages/PreviousGames/GameRecap.js","components/pages/PreviousGames/PreviousGames.js","App.js","reportWebVitals.js","index.js"],"names":["MoveHistory","props","movesHistory","className","line","map","move","index","arr","TreeVisualization","data","id","depthFactor","initialDepth","rootNodeClassName","branchNodeClassName","leafNodeClassName","pathFunc","Button","onClick","text","SimpleModel","openModal","setOpenModal","title","desc","buttonText","body","Modal","open","onClose","aria-labelledby","aria-describedby","DataVisualization","selectedBot","randomBotAvaliableMoves","allBots","evalCount","treeData","useState","handleClose","handleOpen","console","log","listAvaliableMoves","randomBot","toLocaleString","size","variant","color","useStyles","makeStyles","theme","button","display","marginTop","spacing","formControl","margin","minWidth","select","Selection","selected","setSelected","allOptions","setOpen","classes","FormControl","InputLabel","Select","labelId","onOpen","value","onChange","event","target","option","key","MenuItem","fen","name","LoginSchema","Yup","shape","email","required","password","matches","initialFormValues","LoginForm","isLogin","setIsLoggedIn","alert","backend","axios","create","baseURL","process","postLogin","values","userCredentials","post","then","res","localStorage","setItem","token","resetForm","catch","e","register","Object","keys","forEach","initialValues","validationSchema","onSubmit","errors","touched","type","namemaile","placeholder","AvatarMenu","isLoggedIn","openMenu","setOpenMenu","history","useHistory","handleSeleciton","selection","push","removeItem","window","location","reload","Avatar","aria-controls","aria-haspopup","currentTarget","Menu","anchorEl","keepMounted","Boolean","item","NavBar","setSelectedBot","selectedPos","setSelectedPos","allStartingPositions","depth","setDepth","allDepth","chess","updateHistory","setRandomBotAvaliableMoves","setFen","setTimeout","moves","length","computerMove","Math","floor","random","pieceValues","Map","getBoardEvaluation","count","i","charAt","undefined","miniMaxRecursive","chessCopy","allEval","isMax","bestMove","maxEval","Infinity","score","currentMove","totalMoves","currentEval","undo","minEval","fetchBestMove","a","getRandomMNum","min","max","MiniMax","setEvalCount","setTreeData","attributes","children","Chess","totalEvaluations","evaluation","reduce","b","j","indexTwo","toTreeData","SlideTransition","Slide","direction","Notification","openAlert","setOpenAlert","reason","action","Snackbar","autoHideDuration","TransitionComponent","SnackbarContent","message","UndoMove","startingFen","Game","setMovesHistory","gameOverText","setGameOverText","gameWon","setGameWon","boardSize","setBoardSize","alertText","setAlertText","alertType","setAlertType","ref","useRef","useEffect","handleBoardResize","width","current","offsetWidth","getItem","addEventListener","removeEventListener","resetGame","game_over","handleGameOver","load","turn","in_checkmate","in_draw","in_stalemate","in_threefold_repetition","insufficient_material","postGame","game","result","botType","config","headers","position","onDrop","playerMove","from","sourceSquare","to","targetSquare","promotion","GameRecap","moveHistory","Paper","elevation","Divider","Accordion","AccordionSummary","expandIcon","AccordionDetails","PreviousGames","gameHistory","setGameHistory","promise","get","games","getHistory","CircularProgress","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAiCeA,EA9BK,SAAAC,GAChB,IAAQC,EAA4BD,EAA5BC,aAAcC,EAAcF,EAAdE,UAElBC,EAAO,EAgBX,OACI,sBAAKD,UAAS,eAAd,UACKA,EAAY,GAAK,8CAClB,oBAAIA,UAAS,oBAAeA,GAAuB,IAAnD,SAjBGD,EAAaG,KAAI,SAACC,EAAMC,EAAOC,GAClC,GAAID,EAAQ,IAAM,EAEd,OADAH,IACQ,qBAAgBD,UAAS,OAAzB,UACJ,sBAAKA,UAAU,cAAf,UAA8BC,EAA9B,OACI,sBAAKD,UAAU,OAAf,UACA,qBAAKA,UAAU,aAAf,SAA6BG,IACjC,qBAAKH,UAAU,aAAf,SAA6BK,EAAID,EAAQ,UAJ5BA,Y,2BCQlBE,EAhBW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACI,qBAAKC,GAAG,cAAR,SACI,cAAC,IAAD,CACID,KAAMA,EACNE,YAAa,IACbC,aAAc,EACdC,kBAAkB,aAClBC,oBAAoB,eACpBC,kBAAkB,aAClBC,SAAS,Y,SCAVC,EATA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KACvB,OACI,wBAAQjB,UAAU,WAAWgB,QAASA,EAAtC,SACKC,KC8BEC,EAjCK,SAAdA,EAAepB,GACjB,IAAQqB,EAA8DrB,EAA9DqB,UAAWC,EAAmDtB,EAAnDsB,aAAcC,EAAqCvB,EAArCuB,MAAOC,EAA8BxB,EAA9BwB,KAAMN,EAAwBlB,EAAxBkB,QAASO,EAAezB,EAAfyB,WAMjDC,EACF,sBAAKxB,UAAU,uBAAf,UACI,oBAAIA,UAAU,qBAAd,SAAoCqB,IACpC,qBAAKrB,UAAU,2BAAf,SACKsB,IAEJC,EAAa,cAAC,EAAD,CAAQP,QAASA,EAASC,KAAMM,IAAiB,KAE/D,cAACL,EAAD,OAIR,OACI,qBAAKlB,UAAU,kBAAf,SACI,cAACyB,EAAA,EAAD,CACIC,KAAMP,EACNQ,QApBQ,WAChBP,GAAa,IAoBLQ,kBAAgB,qBAChBC,mBAAiB,2BAJrB,SAMKL,OCsBFM,EAhDW,SAAChC,GACvB,IAAQiC,EAAuEjC,EAAvEiC,YAAaC,EAA0DlC,EAA1DkC,wBAAyBC,EAAiCnC,EAAjCmC,QAASC,EAAwBpC,EAAxBoC,UAAWC,EAAarC,EAAbqC,SAClE,EAAkCC,oBAAS,GAA3C,mBAAOjB,EAAP,KAAkBC,EAAlB,KAEMiB,EAAc,WAChBjB,GAAa,IAGXkB,EAAa,WACfC,QAAQC,IAAI,SACZpB,GAAa,IA6BjB,OACI,sBAAKpB,UAAU,qBAAf,UACI,oDACCiC,EAAQ,KAAOF,EA7BN,WACd,IAAMU,EAAqBT,EAAwB9B,KAAI,SAACC,GACpD,OAAO,6BAAKA,OAEhB,OACI,qCACI,sEACA,oBAAIH,UAAU,kBAAd,SACKyC,GAAsBA,OAqBDC,GAAc,KAC3CT,EAAQ,KAAOF,GAAeE,EAAQ,KAAOF,EAf9C,qCACI,cAAC,EAAD,CAAaZ,UAAWA,EAAWC,aAAcA,EAAcC,MAAO,OAAQC,KAAM,cAAC,EAAD,CAAmBf,KAAM4B,IAAcnB,QAASqB,EAAad,WAAW,gBAC5J,sBAAKvB,UAAU,aAAf,UAA4B,oDAA5B,IAAwD,4BAAIkC,EAAUS,sBACtE,cAAC,IAAD,CAAQC,KAAK,QAAQC,QAAQ,WAAWC,MAAM,YAAY9B,QAASsB,EAAnE,yBAYuE,S,6CCxCjFS,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,OAAQ,CACJC,QAAS,QACTC,UAAWH,EAAMI,QAAQ,GACzBP,MAAO,SAEXQ,YAAa,CACTC,OAAQN,EAAMI,QAAQ,GACtBG,SAAU,KAEdC,OAAQ,CACJX,MAAO,QACPU,SAAU,SAqDHE,EAjDG,SAAC5D,GACf,IAAQ6D,EAA6C7D,EAA7C6D,SAAUC,EAAmC9D,EAAnC8D,YAAaC,EAAsB/D,EAAtB+D,WAAYxC,EAAUvB,EAAVuB,MAC3C,EAAwBe,oBAAS,GAAjC,mBAAOV,EAAP,KAAaoC,EAAb,KACMC,EAAUhB,IAchB,OACI,qBAAK/C,UAAU,uBAAf,SAEI,cAACgE,EAAA,EAAD,CAAahE,UAAW+D,EAAQT,YAAhC,SACI,gCACI,cAACW,EAAA,EAAD,CAAYjE,UAAW+D,EAAQN,OAAQjD,GAAG,eAA1C,SAA0Da,IAC1D,cAAC6C,EAAA,EAAD,CACIC,QAAQ,eACR3D,GAAG,cACHkB,KAAMA,EACNC,QAlBA,WAChBmC,GAAQ,IAkBQM,OAfD,WACfN,GAAQ,IAeQO,MAAOV,EACPW,SAzBC,SAACC,GAClBX,EAAYW,EAAMC,OAAOH,QAyBTrE,UAAW+D,EAAQN,OARvB,SAUKI,GAAcA,EAAW3D,KAAI,SAACuE,EAAQC,GACnC,MAAuB,iBAAXD,GAA0C,iBAAXA,EAChC,cAACE,EAAA,EAAD,CAAoBN,MAAOI,EAA3B,SAAoCA,GAArBC,GAIf,cAACC,EAAA,EAAD,CAAoBN,MAAOI,EAAOG,IAAlC,SAAwCH,EAAOI,MAAhCH,gB,4DCzDhDI,EAAcC,MAAaC,MAAM,CACnCC,MAAOF,MAAaE,MAAM,iBAAiBC,SAAS,YACpDC,SAAUJ,MACLG,SAAS,yBACTE,QAAQ,uEAAwE,qHAGnFC,EAAoB,CACtBJ,MAAO,GACPE,SAAU,IA0FCG,EAvFG,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,QAASnE,EAAyC,EAAzCA,aAAcoE,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,MAGjDC,EAAUC,IAAMC,OAAO,CACzBC,QAASC,+CA6CPC,EAAY,SAACC,GAvBL,IAAAC,EAwBE,UAAZV,GAxBUU,EAwBkBD,EAvBZN,EAAQQ,KAAR,QAEZD,GAICE,MAAK,SAAAC,GACFC,aAAaC,QAAQ,QAASF,EAAI7F,KAAKgG,OACvCF,aAAaC,QAAQ,QAASF,EAAI7F,KAAK0E,OACvC1C,QAAQC,IAAI4D,EAAI7F,MAChBkF,EAAM,iBAAkB,WACxBD,GAAc,GACdgB,EAAUP,GACV7E,GAAa,MAEhBqF,OAAM,SAAAC,GACHjB,EAAM,eAAgB,WACtBlD,QAAQC,IAAIkE,OArCP,SAAAT,GACGP,EAAQQ,KAAR,WAEZD,GAICE,MAAK,SAAAC,GACF7D,QAAQC,IAAI4D,EAAI7F,MAChBkF,EAAM,wBAAyB,WAC/Be,EAAUP,GACV7E,GAAa,MAEhBqF,OAAM,SAAAC,GACHjB,EAAM,sBAAuB,WAC7BlD,QAAQC,IAAIkE,MA4BkBC,CAASX,IAG7CQ,EAAY,SAACR,GACfY,OAAOC,KAAKb,GAAQc,SAAQ,SAAApC,GAAG,OAAKsB,EAAOtB,GAAO,OAGtD,OACI,cAAC,IAAD,CACIqC,cAAe1B,EACf2B,iBAAkBlC,EAClBmC,SAAU,SAAAjB,GACND,EAAUC,IAJlB,SAOK,gBAAGkB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACG,eAAC,IAAD,CAAMnH,UAAU,OAAhB,UACI,sBAAKA,UAAU,aAAf,UACI,cAAC,IAAD,CAAO6E,KAAK,QAAQuC,KAAK,QAAQpH,UAAS,gBAAWkH,EAAOjC,OAASkC,EAAQE,UAAY,cAAgB,IAAMC,YAAY,UAC1HJ,EAAOjC,OAASkC,EAAQlC,MAAQ,qBAAKjF,UAAU,QAAf,SAAwBkH,EAAOjC,QAAe,QAEnF,sBAAKjF,UAAU,aAAf,UACI,cAAC,IAAD,CAAO6E,KAAK,WACRuC,KAAK,WAAWpH,UAAS,gBAAWkH,EAAO/B,UAAYgC,EAAQhC,SAAW,cAAgB,IAAMmC,YAAY,WAAW9G,GAAG,mBAC7H0G,EAAO/B,UAAYgC,EAAQhC,SACxB,qBAAKnF,UAAU,QAAf,SAAwBkH,EAAO/B,WAC/B,QAER,cAAC,IAAD,CAAQiC,KAAK,SAASvE,QAAQ,WAAWC,MAAM,YAA/C,2BC3BLyE,EA7DI,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,WAAYhC,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,MAC7C,EAAgCrD,qBAAhC,mBAAOqF,EAAP,KAAiBC,EAAjB,KACA,EAAkCtF,oBAAS,GAA3C,mBAAOjB,EAAP,KAAkBC,EAAlB,KACA,EAAgCgB,mBAAS,IAAzC,mBAAOuB,EAAP,KAAiBC,EAAjB,KACM+D,EAAUC,cAMVvF,EAAc,WAChBqF,GAAY,IAGVG,EAAkB,SAACC,GACrBlE,EAAYkE,GACM,UAAdA,GAAuC,aAAdA,IACzBzF,IACAjB,GAAa,IAEC,SAAd0G,GACAH,EAAQI,KAAK,KAEC,mBAAdD,GACAH,EAAQI,KAAK,UAEC,aAAdD,IACAzB,aAAa2B,WAAW,SACxB3B,aAAa2B,WAAW,SACxBC,OAAOC,SAASC,WAIlB3G,EACF,cAAC,EAAD,CAAW+D,QAAS5B,EAAUvC,aAAcA,EAAcoE,cAAeA,EAAeC,MAAOA,IAMnG,OACI,gCACI,cAAC,EAAD,CAAatE,UAAWA,EAAWC,aAAcA,EAAcC,MAAOsC,EAAUrC,KAAME,IACtF,cAAC4G,EAAA,EAAD,CAAQC,gBAAc,cAAcC,gBAAc,OAAOtH,QArC7C,SAAC0F,GACjBgB,EAAYhB,EAAE6B,kBAqCV,cAACC,EAAA,EAAD,CACIhI,GAAG,cACHiI,SAAUhB,EACViB,aAAW,EACXhH,KAAMiH,QAAQlB,GACd9F,QAASU,EALb,SAOKmF,EAdQ,CAAC,OAAQ,iBAAkB,YAcTtH,KAAI,SAAA0I,GAC3B,OAAO,cAACjE,EAAA,EAAD,CAAU3D,QAAS,kBAAM6G,EAAgBe,IAAzC,SAAiDA,OAdlD,CAAC,QAAS,YAeD1I,KAAI,SAAA0I,GACnB,OAAO,cAACjE,EAAA,EAAD,CAAU3D,QAAS,kBAAM6G,EAAgBe,IAAzC,SAAiDA,aC5B7DC,EA9BA,SAAC/I,GACZ,IACIiC,EAaAjC,EAbAiC,YACA+G,EAYAhJ,EAZAgJ,eACA7G,EAWAnC,EAXAmC,QACA8G,EAUAjJ,EAVAiJ,YACAC,EASAlJ,EATAkJ,eACAC,EAQAnJ,EARAmJ,qBACAC,EAOApJ,EAPAoJ,MACAC,EAMArJ,EANAqJ,SACAC,EAKAtJ,EALAsJ,SACApJ,EAIAF,EAJAE,UACAwH,EAGA1H,EAHA0H,WACAhC,EAEA1F,EAFA0F,cACAC,EACA3F,EADA2F,MAEJ,OACI,sBAAKzF,UAAS,iBAAYA,GAA1B,UACI,0CACC+B,EAAc,sBAAK/B,UAAU,aAAf,UACX,cAAC,EAAD,CAAW2D,SAAU5B,EAAa6B,YAAakF,EAAgBjF,WAAY5B,EAASZ,MAAO,eAC3F,cAAC,EAAD,CAAWsC,SAAUoF,EAAanF,YAAaoF,EAAgBnF,WAAYoF,EAAsB5H,MAAO,sBACxG,cAAC,EAAD,CAAWsC,SAAUuF,EAAOtF,YAAauF,EAAUtF,WAAYuF,EAAU/H,MAAO,wBAC3E,KAET,cAAC,EAAD,CAAYmG,WAAYA,EAAYhC,cAAeA,EAAeC,MAAOA,QCLtE/C,EAxBG,SAAC2G,EAAOC,EAAeC,EAA4BC,GAEjEC,YAAW,WAGP,IAAMC,EAAQL,EAAMK,QAMpB,GAHAH,EAA2BG,GAGvBA,EAAMC,OAAS,EAAG,CAClB,IAAMC,EAAeF,EAAMG,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,SAC5DN,EAAMlJ,KAAKyJ,GAGXN,EAAcM,GAGdJ,EAAOH,EAAMzE,UAElB,M,2BCXHoF,EAAc,IAAIC,IAEtBD,EAAW,EAAQ,IACnBA,EAAW,EAAQ,IACnBA,EAAW,EAAQ,IACnBA,EAAW,EAAQ,KACnBA,EAAW,EAAQ,KACnBA,EAAW,EAAQ,KAGnBA,EAAW,GAAS,IACpBA,EAAW,GAAS,IACpBA,EAAW,GAAS,IACpBA,EAAW,GAAS,KACpBA,EAAW,GAAS,KACpBA,EAAW,GAAS,KAGpB,IAceE,EAdY,SAACtF,GAExB,IADA,IAAIuF,EAAQ,EACHC,EAAI,EAAGA,EAAIxF,EAAI+E,QAEE,MAAlB/E,EAAIyF,OAAOD,GAFaA,SAKOE,IAA/BN,EAAYpF,EAAIyF,OAAOD,MACvBD,GAASH,EAAYpF,EAAIyF,OAAOD,KAGxC,OAAOD,GCnCLI,EAAmB,SAAnBA,EAAoBC,EAAWtB,EAAOuB,EAASC,GACjD,GAAc,IAAVxB,EACA,MAAO,CAAC,KAAMgB,EAAmBM,EAAU5F,QAG/C,IAAM8E,EAAQc,EAAUd,QACpBiB,EAAWjB,EAAMG,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,SAEtD,GAAIe,EAAO,CAEP,IADA,IAAIE,GAAWC,IACNT,EAAI,EAAGA,EAAIV,EAAMC,OAAQS,IAAK,CAEnCI,EAAUrK,KAAKuJ,EAAMU,IAErBK,EAAQvB,EAAQ,GAAGnB,KAAK,CAAE+C,MAAOZ,EAAmBM,EAAU5F,OAAQzE,KAAMuJ,EAAMU,GAAIW,YAAaX,EAAGY,WAAYtB,EAAMC,OAAS,EAAGe,OAAO,IAE3I,IAAIO,EAAcV,EAAiBC,EAAWtB,EAAQ,EAAGuB,GAAS,GAAO,GAEzED,EAAUU,OAEND,EAAcL,IACdA,EAAUK,EACVN,EAAWjB,EAAMU,IAGzB,MAAO,CAACO,EAAUC,GAIlB,IADA,IAAIO,EAAUN,IACLT,EAAI,EAAGA,EAAIV,EAAMC,OAAQS,IAAK,CAEnCI,EAAUrK,KAAKuJ,EAAMU,IAErBK,EAAQvB,EAAQ,GAAGnB,KAAK,CAAE+C,MAAOZ,EAAmBM,EAAU5F,OAAQzE,KAAMuJ,EAAMU,GAAIW,YAAaX,EAAGY,WAAYtB,EAAMC,OAAS,EAAGe,OAAO,IAE3I,IAAIO,EAAcV,EAAiBC,EAAWtB,EAAQ,EAAGuB,GAAS,GAAM,GAExED,EAAUU,OAEND,EAAcE,IACdA,EAAUF,EACVN,EAAWjB,EAAMU,IAGzB,MAAO,CAACO,EAAUQ,IAIpBC,EAAa,uCAAG,WAAOZ,EAAWtB,EAAOuB,EAASC,GAAlC,iBAAAW,EAAA,sEACGd,EAAiBC,EAAWtB,EAAOuB,EAASC,GAD/C,cAEC,KADfC,EADc,QAEN,KACFjB,EAAQc,EAAUd,QACxBiB,EAAS,GAAKjB,EAAM4B,EAAc,EAAG5B,EAAMC,UAJ7B,kBAMXgB,EAAS,IANE,2CAAH,4DASbW,EAAgB,SAACC,EAAKC,GACxB,OAAO3B,KAAKC,MAAMD,KAAKE,UAAYyB,EAAID,GAAOA,IA2FnCE,EAlCC,SAACpC,EAAOC,EAAeE,EAAQkC,EAAcC,EAAazC,GACtE,IAAMuB,EAAU,CAAC,GAAI,GAAI,IACnBtI,EAAW,CACb0C,KAAM,QACN+G,WAAY,CACRd,MAAOZ,EAAmBb,EAAMzE,QAEpCiH,SAAU,IAERrB,EAAY,IAAIsB,IAAMzC,EAAMzE,OAClCwG,EAAcZ,EAAWtB,EAAOuB,GAAS,GAAMtE,MAAK,SAACwE,GAGjDtB,EAAMlJ,KAAKwK,GACXpI,QAAQC,IAAIiI,GAGZ,IAAMsB,EAAmBtB,EAAQvK,KAAI,SAAC8L,GAClC,OAAOA,EAAWrC,UAEtB+B,EAAaK,EAAiBE,QAAO,SAACZ,EAAGa,GAAJ,OAAUb,EAAIa,IAAG,IAGtDP,EA9EW,SAAClB,EAAStI,EAAU+G,GACnC,IAAIkB,EAAIlB,EAAQ,EAChB,GAAIkB,EAAI,EACJ,OAAOjI,EAEX,IAAK,IAAIgK,EAAI,EAAGA,EAAI1B,EAAQL,GAAGT,OAAQwC,IACnChK,EAAS0J,SAAS9D,KAAK,CACnBlD,KAAM4F,EAAQL,GAAG+B,GAAGhM,KACpByL,WAAY,CACRd,MAAOL,EAAQL,GAAG+B,GAAGrB,OAEzBe,SAAU,KAIlB,IADAzB,GAAK,GACG,EACJ,OAAOjI,EAGX,IADA,IAAI/B,EAAQ,EACH+L,EAAI,EAAGA,EAAI1B,EAAQL,GAAGT,OAAQwC,IACnChK,EAAS0J,SAASzL,GAAOyL,SAAS9D,KAAK,CACnClD,KAAM4F,EAAQL,GAAG+B,GAAGhM,KACpByL,WAAY,CACRd,MAAOL,EAAQL,GAAG+B,GAAGrB,OAEzBe,SAAU,KAEVpB,EAAQL,GAAG+B,GAAGpB,cAAgBN,EAAQL,GAAG+B,GAAGnB,aAC5C5K,GAAS,GAGjBA,EAAQ,EACR,IAAIgM,EAAW,EAEf,IADAhC,GAAK,GACG,EACJ,OAAOjI,EAEX,IAAK,IAAIgK,EAAI,EAAGA,EAAI1B,EAAQL,GAAGT,OAAQwC,IACnChK,EAAS0J,SAASO,GAAUP,SAASzL,GAAOyL,SAAS9D,KAAK,CACtDlD,KAAM4F,EAAQL,GAAG+B,GAAGhM,KACpByL,WAAY,CACRd,MAAOL,EAAQL,GAAG+B,GAAGrB,OAEzBe,SAAU,KAEVpB,EAAQL,GAAG+B,GAAGpB,cAAgBN,EAAQL,GAAG+B,GAAGnB,aAC5C5K,GAAS,IACI+B,EAAS0J,SAASO,GAAUP,SAASlC,SAC9CyC,GAAY,EACZhM,EAAQ,GAIpB,OAAO+B,EAyBSkK,CAAW5B,EAAStI,EAAU+G,IAG1CI,IAGAE,EAAOH,EAAMzE,W,+EC5IrB,SAAS0H,GAAgBxM,GACrB,OAAO,cAACyM,EAAA,EAAD,2BAAWzM,GAAX,IAAkB0M,UAAU,QAIvC,IAmCeC,GAnCM,SAAC,GAA2C,IAA1CxL,EAAyC,EAAzCA,KAAMmG,EAAmC,EAAnCA,KAAMsF,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,aAEpCtK,EAAc,SAACkC,EAAOqI,GACT,cAAXA,GAGJD,GAAa,IAEXE,EACF,cAAC,IAAD,CAAQ/J,MAAM,YAAYF,KAAK,QAAQ5B,QAASqB,EAAhD,eAKJ,OACI,8BACI,cAACyK,EAAA,EAAD,CACApL,KAAMgL,EACNK,iBAAkB,IAClBpL,QAASU,EACT2K,oBAAqBV,GACrBtM,UAAS,gBAAWoH,GALpB,SAOI,cAAC6F,GAAA,EAAD,CAAiBC,QACb,qCACC9F,EAAKuC,OAAS,EAAI,8BAAc,WAARvC,EAAoB,cAAC,KAAD,IAAe,cAAC,KAAD,MAA6B,KACzF,8BAAMnG,OAGN4L,OAAQA,S,qBC/BbM,GATiE,SAAC,GAAc,IAAZjC,EAAW,EAAXA,KAE/E,OACI,qBAAKlL,UAAU,YAAf,SACI,eAAC,IAAD,CAAQ6C,QAAQ,WAAWC,MAAM,YAAY9B,QAASkK,EAAtD,UAA4D,cAAC,KAAD,IAA5D,cCONkC,GAAc,2DACdnL,GAAU,CAAC,SAAU,UAAW,aAChCgH,GAAuB,CACzB,CAAEpE,KAAM,QAASD,IAAKwI,IACtB,CAAEvI,KAAM,oBAAqBD,IAAK,gEAClC,CAAEC,KAAM,eAAgBD,IAAK,gEAC7B,CAAEC,KAAM,mBAAoBD,IAAK,iEACjC,CAAEC,KAAM,iBAAkBD,IAAK,iEAE7BwE,GAAW,CAAC,EAAG,EAAG,GA0NTiE,OAzNf,YAA8C,IAA9B7F,EAA6B,EAA7BA,WAAYhC,EAAiB,EAAjBA,cACxB,EAAgBpD,mBAAS,IAAI0J,IAAMsB,KAA5B/D,EAAP,oBACA,EAAsBjH,mBAASiH,EAAMzE,OAArC,mBAAOA,EAAP,KAAY4E,EAAZ,KACA,EAAwCpH,mBAAS,IAAjD,mBAAOrC,EAAP,KAAqBuN,EAArB,KACA,EAAsClL,mBAASH,GAAQ,IAAvD,mBAAOF,EAAP,KAAoB+G,EAApB,KACA,EAAsC1G,mBAAS6G,GAAqB,GAAGrE,KAAvE,mBAAOmE,EAAP,KAAoBC,EAApB,KACA,EAAkC5G,mBAAS,GAA3C,mBAAOF,EAAP,KAAkBwJ,EAAlB,KACA,EAAwCtJ,mBAAS,IAAjD,mBAAOmL,EAAP,KAAqBC,EAArB,KACA,EAA8BpL,oBAAS,GAAvC,mBAAOqL,EAAP,KAAgBC,EAAhB,KACA,EAA8DtL,mBAAS,IAAvE,mBAAOJ,EAAP,KAAgCuH,EAAhC,KACA,EAAgCnH,mBAAS,IAAzC,mBAAOD,EAAP,KAAiBwJ,EAAjB,KACA,EAAkCvJ,mBAAS,KAA3C,oBAAOuL,GAAP,MAAkBC,GAAlB,MACA,GAAkCxL,oBAAS,GAA3C,qBAAOjB,GAAP,MAAkBC,GAAlB,MACA,GAA0BgB,mBAASgH,GAAS,IAA5C,qBAAOF,GAAP,MAAcC,GAAd,MACA,GAAkC/G,oBAAS,GAA3C,qBAAOsK,GAAP,MAAkBC,GAAlB,MACA,GAAkCvK,mBAAS,IAA3C,qBAAOyL,GAAP,MAAkBC,GAAlB,MACA,GAAkC1L,mBAAS,WAA3C,qBAAO2L,GAAP,MAAkBC,GAAlB,MAEMC,GAAMC,iBAAO,MAGnBC,qBAAU,WACN5L,QAAQC,IAAI,UACZ,IAAM4L,EAAoB,WACtB,IAAMC,EAAQJ,GAAIK,QAAQC,YACtBF,EAAQ,KACRT,GAAaS,EAAQ,KAEhBA,GAAS,KACdT,GAAaS,EAAQ,KAEhBA,GAAS,MACdT,GAAaS,EAAQ,KAGtBhI,aAAamI,QAAQ,UACpBhJ,GAAc,IAKtB,OAFA4I,IACAnG,OAAOwG,iBAAiB,SAAUL,GAC3B,kBAAMnG,OAAOyG,oBAAoB,SAAUN,MACnD,IAGHD,qBAAU,WACNQ,OACD,CAAC5F,IAGJoF,qBAAU,WACF9E,EAAMuF,aACNC,OAGL,CAAC9O,IAGJ,IAAM0F,GAAQ,SAACxE,EAAMmG,GACjB0G,GAAa7M,GACb+M,GAAa5G,GACbuF,IAAa,IAGXrD,GAAgB,WAClB/G,QAAQC,IAAI6G,EAAM1B,WAClB2F,EAAgBjE,EAAM1B,YA6BpBgH,GAAY,WACdnF,EAAOT,GACPM,EAAMyF,KAAK/F,GACXuE,EAAgB,IAChBlM,IAAa,IAIXyN,GAAiB,WAEC,MAAjBxF,EAAM0F,OACLrB,GAAW,GAGXA,GAAW,GAIXrE,EAAM2F,eACNxB,EAAgB,aAEXnE,EAAM4F,UACXzB,EAAgB,QAEXnE,EAAM6F,eACX1B,EAAgB,aAEXnE,EAAM8F,0BACX3B,EAAgB,wBAEXnE,EAAM+F,yBACX5B,EAAgB,yBAIpBpM,IAAa,GAGVoG,EACC6H,KAGA5J,GAAM,4BAA6B,KAKrC4J,GAAW,WACf,IAAM9O,EAAO,CACT+O,KAAO,CACLC,OAAQ9B,EACR+B,QAASzN,EACTmH,MAAOA,GACPQ,MAAO3J,GAETkF,MAAOoB,aAAamI,QAAQ,UAGxBiB,EAAS,CACXC,QAAS,CACL,cAAgB,SAAhB,OAA0BrJ,aAAamI,QAAQ,YAGvC7I,IAAMC,OAAO,CACzBC,QAASC,+CAEWI,KAAR,WAEZ3F,EACAkP,GAGCtJ,MAAK,SAAAC,GACFX,GAAM,aAAc,IACpBlD,QAAQC,IAAI4D,EAAI7F,SAEnBkG,OAAM,SAAAC,GACHnE,QAAQC,IAAIkE,OAIxB,OACI,qCACI,cAAC,EAAD,CACI3E,YAAaA,EACb+G,eAAgBA,EAChB7G,QAASA,GACT8G,YAAaA,EACbC,eAAgBA,EAChBC,qBAAsBA,GACtBC,MAAOA,GACPC,SAAUA,GACVC,SAAUA,GACV5B,WAAYA,EACZhC,cAAeA,EACfC,MAAOA,KAEX,cAAC,GAAD,CAAcxE,KAAM4M,GAAWzG,KAAM2G,GAAWrB,UAAWA,GAAWC,aAAcA,KACpF,sBAAK3M,UAAU,gBAAf,UACI,cAAC,EAAD,CAAamB,UAAWA,GAAWC,aAAcA,GAAcC,MAAK,wBAAmBoM,EAAS,MAAQ,QAAUnM,KAAI,gCAA2BiM,GAAgBvM,QAAS2N,GAAWpN,WAAW,gBAChM,qBAAKvB,UAAU,kBAAkBiO,IAAKA,GAAtC,SACI,cAAC,IAAD,CACII,MAAOV,GACPgC,SAAU/K,EACVgL,OAAQ,SAACzP,GAAD,OAzHF0P,EAyH6B,CAC/BC,KAAM3P,EAAK4P,aACXC,GAAI7P,EAAK8P,aACTC,UAAW,UA1H3B7G,EAAMlJ,KAAK0P,KAEXrG,EAAOH,EAAMzE,OAGT7C,IAAgBE,GAAQ,GACxBS,EAAU2G,EAAOC,GAAeC,EAA4BC,GAEvDzH,IAAgBE,GAAQ,IAC7BwJ,EAAQpC,EAAOC,GAAeE,EAAQkC,EAAcC,EAAazC,MAXpD,IAAC2G,GA8HN7P,UAAW,WAGnB,sBAAKA,UAAU,oBAAf,UACI,cAAC,EAAD,CAAaD,aAAcA,IAC3B,cAAC,GAAD,CAAUmL,KA3Ib,WACT7B,EAAM6B,OACN7B,EAAM6B,OACN1B,EAAOH,EAAMzE,KACb0E,QAwIY,cAAC,EAAD,CAAmBvH,YAAaA,EAAaC,wBAAyBA,EAAyBC,QAASA,GAASC,UAAWA,EAAWC,SAAUA,c,uEChMtJgO,GAhCG,SAAC,GAA6C,IAA3CZ,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,QAAStG,EAAyB,EAAzBA,MAAOkH,EAAkB,EAAlBA,YACzC,OACI,8BACI,eAACC,GAAA,EAAD,CAAOrQ,UAAU,kBAAkBsQ,UAAW,EAA9C,UACI,qBAAKtQ,UAAU,eAAf,SACI,6BAAKuP,MAET,cAACgB,GAAA,EAAD,IACA,sBAAKvQ,UAAU,kBAAf,UACI,sBAAKA,UAAU,aAAf,UAA4B,2CAA5B,IAA+C,+BAAOwP,OACtD,sBAAKxP,UAAU,aAAf,UAA4B,wCAA5B,IAA4C,+BAAOkJ,UAEvD,cAACqH,GAAA,EAAD,IACA,qBAAKvQ,UAAU,aAAf,SACA,eAACwQ,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CACAC,WAAY,cAAC,KAAD,IACZrI,gBAAc,kBACd7H,GAAG,iBAHH,SAKI,gDAEJ,cAACmQ,GAAA,EAAD,UACI,cAAC,EAAD,CAAa5Q,aAAcqQ,EAAapQ,UAAW,uB,UC4B5D4Q,GArDO,SAAC,GAAmC,IAAjCpJ,EAAgC,EAAhCA,WAAYhC,EAAoB,EAApBA,cACjC,EAAsCpD,mBAAS,IAA/C,mBAAOyO,EAAP,KAAoBC,EAApB,KA8BA3C,qBAAU,YA3BS,WACf,IAIM4C,EAJUpL,IAAMC,OAAO,CACzBC,QAASC,+CAGWkL,IAAR,QAEZ,CACItB,QAAS,CACL,cAAgB,SAAhB,OAA0BrJ,aAAamI,QAAQ,aAK3DuC,EACK5K,MAAK,SAAAC,GACF7D,QAAQC,IAAI4D,EAAI7F,MAChBuQ,EAAe1K,EAAI7F,KAAK0Q,OACxB1O,QAAQC,IAAIqO,MAEfpK,OAAM,SAAAC,GACHnE,QAAQC,IAAIkE,MAOpBwK,KACD,IAGH,OACI,qCACI,cAAC,EAAD,CAAQlR,UAAU,WAAWwH,WAAYA,EAAYhC,cAAeA,IAEpEqL,EAAYlH,OAAS,EACnB,sBAAK3J,UAAU,aAAf,UACE,gDACC6Q,EAAY3Q,KAAI,SAACoP,GACd,OAAO,cAAC,GAAD,CAAYC,OAAQD,EAAKC,OAAS,MAAQ,OAAQC,QAASF,EAAKE,QAAStG,MAAOoG,EAAKpG,MAAOkH,YAAad,EAAK5F,cAG3H,qBAAK1J,UAAU,SAAf,SAAwB,cAACmR,GAAA,EAAD,CAAkBrO,MAAM,oBChC/CsO,OAdf,WACE,MAAoChP,oBAAS,GAA7C,mBAAOoF,EAAP,KAAmBhC,EAAnB,KACA,OACE,mCACE,qBAAKxF,UAAU,gBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqR,OAAK,EAACC,KAAK,IAAlB,SAAuB,cAAC,GAAD,CAAM9J,WAAYA,EAAYhC,cAAeA,MACpE,cAAC,IAAD,CAAO8L,KAAK,SAAZ,SAAsB,cAAC,GAAD,CAAe9J,WAAYA,EAAYhC,cAAeA,cCHvE+L,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBtL,MAAK,YAAkD,IAA/CuL,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCAdO,IAASC,OACP,cAAC,KAAD,UACE,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.072c2972.chunk.js","sourcesContent":["import React from 'react';\nimport Divider from '@material-ui/core/Divider';\n\nconst MoveHistory = props => {\n    const { movesHistory, className } = props;\n\n    let line = 0;\n    const listMoveHistory = () => {\n        return movesHistory.map((move, index, arr) => {\n            if (index % 2 === 0) {\n                line++;\n                return (<li key={index} className={`node`}>\n                    <div className=\"line-number\">{line}.</div>\n                        <div className=\"move\">\n                        <div className=\"playerNode\">{move}</div>\n                    <div className=\"playerNode\">{arr[index + 1]}</div>\n                    </div>\n                </li>)\n            }\n        })\n    }\n\n    return (\n        <div className={`move-history`}>\n            {className ? \"\" : <h2>Move History</h2>}\n            <ul className={`move-list ${className ? className: \"\"}`}>\n                {listMoveHistory()}\n            </ul>\n        </div>\n    )\n}\n\n\nexport default MoveHistory;\n","import React from 'react'\nimport Tree from 'react-d3-tree';\n\nconst TreeVisualization = ({ data }) => {\n    return (\n        <div id=\"treeWrapper\" >\n            <Tree\n                data={data}\n                depthFactor={1000}\n                initialDepth={2}\n                rootNodeClassName=\"node__root\"\n                branchNodeClassName=\"node__branch\"\n                leafNodeClassName=\"node__leaf\" \n                pathFunc=\"step\"\n                />\n        </div>\n    )\n}\n\nexport default TreeVisualization\n","import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Button = ({ onClick, text }) => {\n    return (\n        <button className=\"btn dark\" onClick={onClick}>\n            {text}\n        </button>\n\n    )\n}\n\nexport default Button\n","import React from 'react'\nimport Modal from '@material-ui/core/Modal';\nimport Button from './Button'\n\nconst SimpleModel = (props) => {\n    const { openModal, setOpenModal, title, desc, onClick, buttonText } = props;\n\n    const handleClose = () => {\n        setOpenModal(false)\n    }\n\n    const body = (\n        <div className=\"simple-modal-content\">\n            <h2 className=\"simple-modal-title\">{title}</h2>\n            <div className=\"simple-modal-description\">\n                {desc}\n            </div>\n            {buttonText ? <Button onClick={onClick} text={buttonText} /> : null}\n\n            <SimpleModel />\n        </div>\n    )\n\n    return (\n        <div className=\"modal-container\">\n            <Modal\n                open={openModal}\n                onClose={handleClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                {body}\n            </Modal>\n        </div>\n    )\n}\n\nexport default SimpleModel\n","import React, { useState } from 'react'\nimport Button from '@material-ui/core/Button';\nimport TreeVisualization from './TreeVisualization';\nimport SimpleModal from '../../common/SimpleModel'\n\nconst DataVisualization = (props) => {\n    const { selectedBot, randomBotAvaliableMoves, allBots, evalCount, treeData } = props;\n    const [openModal, setOpenModal] = useState(false);\n\n    const handleClose = () => {\n        setOpenModal(false)\n    }\n\n    const handleOpen = () => {\n        console.log(\"opens\")\n        setOpenModal(true)\n    }\n\n    const randomBot = () => {\n        const listAvaliableMoves = randomBotAvaliableMoves.map((move) => {\n            return <li>{move}</li>\n        })\n        return (\n            <>\n                <p>Selecting random from avaliable moves</p>\n                <ul className=\"avaliable-moves\">\n                    {listAvaliableMoves && listAvaliableMoves}\n                </ul>\n            </>\n        )\n    }\n    const miniMaxBot = () => {\n        return (\n            <>\n                <SimpleModal openModal={openModal} setOpenModal={setOpenModal} title={\"Tree\"} desc={<TreeVisualization data={treeData} />} onClick={handleClose} buttonText=\"Close Modal\" />\n                <div className=\"evaluation\"><h3>Postions Evaluated</h3> <p>{evalCount.toLocaleString()}</p></div>\n                <Button size=\"large\" variant=\"outlined\" color=\"secondary\" onClick={handleOpen}>\n                    See Tree\n                </Button>\n            </>\n        )\n\n    }\n    // updates return based on what bot is selected. \n    return (\n        <div className=\"data-visualization\">\n            <h2>Data Visualization</h2>\n            {allBots[0] === selectedBot ? randomBot() : null}\n            {allBots[1] === selectedBot || allBots[2] === selectedBot ? miniMaxBot() : null}\n        </div>\n    )\n}\n\nexport default DataVisualization\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        display: 'block',\n        marginTop: theme.spacing(2),\n        color: 'white',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    select: {\n        color: 'white',\n        minWidth: 120,\n    }\n}));\n\nconst Selection = (props) => {\n    const { selected, setSelected, allOptions, title } = props;\n    const [open, setOpen] = useState(false);\n    const classes = useStyles();\n\n    const handleChange = (event) => {\n        setSelected(event.target.value);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    return (\n        <div className=\"select-bot-container\">\n\n            <FormControl className={classes.formControl}>\n                <div>\n                    <InputLabel className={classes.select} id=\"select-label\">{title}</InputLabel>\n                    <Select\n                        labelId=\"select-label\"\n                        id=\"open-select\"\n                        open={open}\n                        onClose={handleClose}\n                        onOpen={handleOpen}\n                        value={selected}\n                        onChange={handleChange}\n                        className={classes.select}\n                    >\n                        {allOptions && allOptions.map((option, key) => {\n                            if (typeof (option) == \"string\" || typeof (option) == \"number\") {\n                                return <MenuItem key={key} value={option}>{option}</MenuItem>\n\n                            }\n                            else {\n                                return <MenuItem key={key} value={option.fen}>{option.name}</MenuItem>\n                            }\n                        })}\n                    </Select>\n                </div>\n            </FormControl>\n        </div>\n    )\n}\n\nexport default Selection\n","import React, { useState } from 'react'\nimport { Formik, Form, Field } from 'formik';\nimport Button from '@material-ui/core/Button';\nimport * as Yup from 'yup';\nimport axios from 'axios';\n\nconst LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string()\n        .required('No password provided.')\n        .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, 'Password must contain at least one uppercase letter, one lowercase letter, one number and one special character')\n});\n\nconst initialFormValues = {\n    email: \"\",\n    password: \"\",\n}\n\nconst LoginForm = ({ isLogin, setOpenModal, setIsLoggedIn, alert }) => {\n\n    /* API Calls */\n    const backend = axios.create({\n        baseURL: process.env.REACT_APP_BE_URL\n    })\n\n    const register = userCredentials => {\n        const promise = backend.post(\n            `register`,\n            userCredentials,\n        );\n\n        promise\n            .then(res => {\n                console.log(res.data)\n                alert(\"Registration Complete\", \"success\")\n                resetForm(userCredentials)\n                setOpenModal(false)\n            })\n            .catch(e => {\n                alert(\"Registration Failed\", \"failure\")\n                console.log(e)\n            });\n    }\n\n    const login = userCredentials => {\n        const promise = backend.post(\n            `login`,\n            userCredentials,\n        );\n\n        promise\n            .then(res => {\n                localStorage.setItem('token', res.data.token)\n                localStorage.setItem('email', res.data.email)\n                console.log(res.data)\n                alert(\"Login Complete\", \"success\")\n                setIsLoggedIn(true)\n                resetForm(userCredentials)\n                setOpenModal(false)\n            })\n            .catch(e => {\n                alert(\"Login Failed\", \"failure\")\n                console.log(e)\n            });\n    }\n\n    /* Form Logic */\n    const postLogin = (values) => {\n        isLogin === \"Login\" ? login(values) : register(values)\n    }\n\n    const resetForm = (values) => {\n        Object.keys(values).forEach(key => (values[key] = \"\"));  //<- Reseting all fields using blank space\n    }\n\n    return (\n        <Formik\n            initialValues={initialFormValues}\n            validationSchema={LoginSchema}\n            onSubmit={values => {\n                postLogin(values)\n            }}\n        >\n            {({ errors, touched }) => (\n                <Form className=\"form\">\n                    <div className=\"form-group\">\n                        <Field name=\"email\" type=\"email\" className={`input ${errors.email && touched.namemaile ? \"input-error\" : \"\"}`} placeholder=\"Email\" />\n                        {errors.email && touched.email ? <div className=\"error\">{errors.email}</div> : null}\n                    </div>\n                    <div className=\"form-group\">\n                        <Field name=\"password\"\n                            type=\"password\" className={`input ${errors.password && touched.password ? \"input-error\" : \"\"}`} placeholder=\"Password\" id=\"password-input\" />\n                        {errors.password && touched.password ? (\n                            <div className=\"error\">{errors.password}</div>\n                        ) : null}\n                    </div>\n                    <Button type=\"submit\" variant=\"outlined\" color=\"secondary\">\n                        Submit\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nexport default LoginForm\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Avatar from '@material-ui/core/Avatar';\nimport SimpleModal from './SimpleModel';\nimport LoginForm from './LoginForm';\n\nconst AvatarMenu = ({ isLoggedIn, setIsLoggedIn, alert }) => {\n    const [openMenu, setOpenMenu] = useState();\n    const [openModal, setOpenModal] = useState(false);\n    const [selected, setSelected] = useState(\"\")\n    const history = useHistory();\n\n    const handleClick = (e) => {\n        setOpenMenu(e.currentTarget)\n    }\n\n    const handleClose = () => {\n        setOpenMenu(false)\n    }\n\n    const handleSeleciton = (selection) => {\n        setSelected(selection)\n        if (selection === \"Login\" || selection === \"Register\") {\n            handleClose()\n            setOpenModal(true);\n        }\n        if (selection === \"Home\") {\n            history.push(\"/\")\n        }\n        if (selection === \"Previous Games\") {\n            history.push(\"/games\")\n        }\n        if (selection === \"Sign Out\") {\n            localStorage.removeItem(\"email\")\n            localStorage.removeItem(\"token\")\n            window.location.reload()\n        }\n    }\n\n    const body = (\n        <LoginForm isLogin={selected} setOpenModal={setOpenModal} setIsLoggedIn={setIsLoggedIn} alert={alert}/>\n    )\n\n    const loggedInMenu = [\"Home\", \"Previous Games\", \"Sign Out\"]\n    const loggedOutMenu = [\"Login\", \"Register\"]\n\n    return (\n        <div>\n            <SimpleModal openModal={openModal} setOpenModal={setOpenModal} title={selected} desc={body} />\n            <Avatar aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick} />\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={openMenu}\n                keepMounted\n                open={Boolean(openMenu)}\n                onClose={handleClose}\n            >\n                {isLoggedIn ? loggedInMenu.map(item => {\n                    return <MenuItem onClick={() => handleSeleciton(item)}>{item}</MenuItem>\n                }) : loggedOutMenu.map(item => {\n                    return <MenuItem onClick={() => handleSeleciton(item)}>{item}</MenuItem>\n                })}\n            </Menu>\n        </div>\n    )\n}\n\nexport default AvatarMenu\n","import React from 'react'\nimport Selection from './Selection'\nimport AvatarMenu from './AvatarMenu'\n\nconst NavBar = (props) => {\n    const {\n        selectedBot,\n        setSelectedBot,\n        allBots,\n        selectedPos,\n        setSelectedPos,\n        allStartingPositions,\n        depth,\n        setDepth,\n        allDepth,\n        className,\n        isLoggedIn,\n        setIsLoggedIn,\n        alert\n    } = props;\n    return (\n        <div className={`navbar ${className}`}>\n            <h1>Chess AI</h1>\n            {selectedBot ? <div className=\"selections\">\n                <Selection selected={selectedBot} setSelected={setSelectedBot} allOptions={allBots} title={\"Select Bot\"} />\n                <Selection selected={selectedPos} setSelected={setSelectedPos} allOptions={allStartingPositions} title={\"Starting Position\"} />\n                <Selection selected={depth} setSelected={setDepth} allOptions={allDepth} title={\"Algorithim Depth\"} />\n            </div> : null}\n\n            <AvatarMenu isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} alert={alert}/>\n        </div>\n    )\n}\n\nexport default NavBar\n","const randomBot = (chess, updateHistory, setRandomBotAvaliableMoves, setFen) => {\n    // computer response random\n    setTimeout(() => {\n\n        // Get list of valid moves\n        const moves = chess.moves();\n\n        // update state for data vizualization\n        setRandomBotAvaliableMoves(moves);\n\n        // If valid move is avaliable selects random and updates chessboard\n        if (moves.length > 0) {\n            const computerMove = moves[Math.floor(Math.random() * moves.length)];\n            chess.move(computerMove);\n\n            // add move to history\n            updateHistory(computerMove);\n\n            // update chessboard\n            setFen(chess.fen());\n        }\n    }, 300)\n}\n\nexport default randomBot\n","\n/* \nbased on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n*/\n\nlet pieceValues = new Map()\n// Black\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 825;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\n// White\npieceValues['P'] = -128;\npieceValues['N'] = -781;\npieceValues['B'] = -825;\npieceValues['R'] = -1276;\npieceValues['Q'] = -2538;\npieceValues['K'] = -9999;\n\n// returns total piece values\nconst getBoardEvaluation = (fen) => {\n    let count = 0;\n    for (let i = 0; i < fen.length; i++) {\n        // Breaks after pieces string ends. All fens have a space after board declaration\n        if (fen.charAt(i) === \" \")\n            break\n\n        if (pieceValues[fen.charAt(i)] !== undefined)\n            count += pieceValues[fen.charAt(i)]\n    }\n\n    return count\n}\n\nexport default getBoardEvaluation","import Chess from \"chess.js\";\nimport getBoardEvaluation from './getBoardEvaluation'\n\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, isMax) => {\n    if (depth === 0) {\n        return [null, getBoardEvaluation(chessCopy.fen())];\n    }\n\n    const moves = chessCopy.moves();\n    let bestMove = moves[Math.floor(Math.random() * moves.length)];\n\n    if (isMax) {\n        let maxEval = -Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            // Update move\n            chessCopy.move(moves[i])\n            // Push board eval to list\n            allEval[depth - 1].push({ score: getBoardEvaluation(chessCopy.fen()), move: moves[i], currentMove: i, totalMoves: moves.length - 1, isMax: true })\n            // Recursive call minimax with lower depth\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, false)[1];\n            // Undo move\n            chessCopy.undo();\n            // Sets best move according to currentEval max\n            if (currentEval > maxEval) {\n                maxEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return [bestMove, maxEval];\n    }\n    else {\n        let minEval = Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            // Update move\n            chessCopy.move(moves[i])\n            // Push board eval to list\n            allEval[depth - 1].push({ score: getBoardEvaluation(chessCopy.fen()), move: moves[i], currentMove: i, totalMoves: moves.length - 1, isMax: true })\n            // Recursive call minimax with lower depth\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, true)[1];\n            // Undo move\n            chessCopy.undo()\n            // Sets best move according to currentEval min\n            if (currentEval < minEval) {\n                minEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return [bestMove, minEval]\n    }\n}\n\nconst fetchBestMove = async (chessCopy, depth, allEval, isMax) => {\n    let bestMove = await miniMaxRecursive(chessCopy, depth, allEval, isMax)\n    if(bestMove[1] === 0){\n        const moves = chessCopy.moves();\n        bestMove[0] = moves[getRandomMNum(0, moves.length)];\n    }\n    return bestMove[0]\n}\n\nconst getRandomMNum = (min, max) => {\n    return Math.floor(Math.random() * (max-min) + min)\n}\nconst toTreeData = (allEval, treeData, depth) => {\n    let i = depth - 1\n    if (i < 0)\n        return treeData\n\n    for (let j = 0; j < allEval[i].length; j++) {\n        treeData.children.push({\n            name: allEval[i][j].move,\n            attributes: {\n                score: allEval[i][j].score,\n            },\n            children: []\n        })\n    }\n    i -= 1\n    if (i < 0)\n        return treeData\n\n    let index = 0\n    for (let j = 0; j < allEval[i].length; j++) {\n        treeData.children[index].children.push({\n            name: allEval[i][j].move,\n            attributes: {\n                score: allEval[i][j].score,\n            },\n            children: []\n        })\n        if (allEval[i][j].currentMove === allEval[i][j].totalMoves) {\n            index += 1\n        }\n    }\n    index = 0\n    let indexTwo = 0\n    i -= 1\n    if (i < 0)\n        return treeData\n\n    for (let j = 0; j < allEval[i].length; j++) {\n        treeData.children[indexTwo].children[index].children.push({\n            name: allEval[i][j].move,\n            attributes: {\n                score: allEval[i][j].score,\n            },\n            children: []\n        })\n        if (allEval[i][j].currentMove === allEval[i][j].totalMoves) {\n            index += 1\n            if (index >= treeData.children[indexTwo].children.length) {\n                indexTwo += 1\n                index = 0\n            }\n        }\n    }\n    return treeData\n}\nconst MiniMax = (chess, updateHistory, setFen, setEvalCount, setTreeData, depth) => {\n    const allEval = [[], [], []]\n    const treeData = {\n        name: \"Start\",\n        attributes: {\n            score: getBoardEvaluation(chess.fen()),\n        },\n        children: []\n    }\n    const chessCopy = new Chess(chess.fen());\n    fetchBestMove(chessCopy, depth, allEval, true).then((bestMove) => {\n\n        // update position\n        chess.move(bestMove);\n        console.log(allEval);\n\n        // Update eval count\n        const totalEvaluations = allEval.map((evaluation) => {\n            return evaluation.length\n        })\n        setEvalCount(totalEvaluations.reduce((a, b) => a + b, 0))\n\n        // convert to tree data\n        setTreeData(toTreeData(allEval, treeData, depth))\n\n        // add move to history\n        updateHistory();\n\n        // update chessboard\n        setFen(chess.fen());\n    })\n}\n\n\nexport default MiniMax\n","import React from 'react'\nimport Slide from '@material-ui/core/Slide';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport Button from '@material-ui/core/Button';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport CheckIcon from '@material-ui/icons/Check';\n\nfunction SlideTransition(props) {\n    return <Slide {...props} direction=\"up\" />;\n}\n\n\nconst Notification = ({text, type, openAlert, setOpenAlert}) => {\n    \n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n          return;\n        }\n        setOpenAlert(false);\n      };\n    const action = (\n        <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n            X\n        </Button>\n    )\n\n    return (\n        <div >\n            <Snackbar \n            open={openAlert} \n            autoHideDuration={6000} \n            onClose={handleClose} \n            TransitionComponent={SlideTransition} \n            className={`alert ${type}`}\n            >\n                <SnackbarContent message={\n                    <>\n                    {type.length > 0 ? <div>{type == \"success\" ? <CheckIcon/> : <ErrorOutlineIcon/>}</div> : null}\n                    <div>{text}</div>\n                    </>\n                }\n                    action={action} />\n            </Snackbar>\n        </div>\n    )\n}\n\nexport default Notification\n","import React from 'react'\nimport Button from '@material-ui/core/Button';\nimport UndoOutlinedIcon from '@material-ui/icons/UndoOutlined';const UndoMove = ({ undo }) => {\n\n    return (\n        <div className=\"undo-move\">\n            <Button variant=\"outlined\" color=\"secondary\" onClick={undo}><UndoOutlinedIcon /> Undo</Button>\n        </div>\n    )\n}\n\nexport default UndoMove\n","import React, { useState, useEffect, useRef } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport Chess from \"chess.js\";\nimport MoveHistory from './MoveHistory';\nimport DataVisualization from './DataVisualization';\nimport NavBar from '../../common/NavBar';\nimport randomBot from '../../Bots/randomBot';\nimport MiniMax from '../../Bots/MiniMax';\nimport SimpleModal from '../../common/SimpleModel';\nimport Notification from '../../common/Notification';\nimport UndoMove from './UndoMove';\nimport axios from 'axios';\n\nconst startingFen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\nconst allBots = [\"Random\", \"MiniMax\", \"AlphaBeta\"]\nconst allStartingPositions = [\n    { name: \"Start\", fen: startingFen },\n    { name: \"Caro-Kann Defense\", fen: \"rnbqkbnr/pp1ppppp/2p5/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n    { name: \"Pirc Defense\", fen: \"rnbqkbnr/ppp1pppp/3p4/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n    { name: \"Sicilian Defense\", fen: \"rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 1\" },\n    { name: \"French Defense\", fen: \"rnbqkbnr/pppp1ppp/4p3/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n]\nconst allDepth = [1, 2, 3]\nfunction Game({ isLoggedIn, setIsLoggedIn }) {\n    const [chess] = useState(new Chess(startingFen));\n    const [fen, setFen] = useState(chess.fen());\n    const [movesHistory, setMovesHistory] = useState([]);\n    const [selectedBot, setSelectedBot] = useState(allBots[1]);\n    const [selectedPos, setSelectedPos] = useState(allStartingPositions[0].fen)\n    const [evalCount, setEvalCount] = useState(0)\n    const [gameOverText, setGameOverText] = useState('');\n    const [gameWon, setGameWon] = useState(false)\n    const [randomBotAvaliableMoves, setRandomBotAvaliableMoves] = useState([]);\n    const [treeData, setTreeData] = useState({})\n    const [boardSize, setBoardSize] = useState(460);\n    const [openModal, setOpenModal] = useState(false)\n    const [depth, setDepth] = useState(allDepth[1])\n    const [openAlert, setOpenAlert] = useState(false)\n    const [alertText, setAlertText] = useState(\"\")\n    const [alertType, setAlertType] = useState(\"success\")\n\n    const ref = useRef(null);\n\n    // updates board size\n    useEffect(() => {\n        console.log(\"resize\")\n        const handleBoardResize = () => {\n            const width = ref.current.offsetWidth;\n            if (width < 1200) {\n                setBoardSize(width - 100);\n            }\n            else if (width <= 1920) {\n                setBoardSize(width - 700)\n            }\n            else if (width >= 1800) {\n                setBoardSize(width - 1000)\n            }\n            \n            if(localStorage.getItem(\"token\")){\n                setIsLoggedIn(true)\n            }\n        }\n        handleBoardResize()\n        window.addEventListener('resize', handleBoardResize)\n        return () => window.removeEventListener('resize', handleBoardResize);\n    }, [])\n\n    // updates board if new starting position is selected\n    useEffect(() => {\n        resetGame()\n    }, [selectedPos])\n\n    // checks for win\n    useEffect(() => {\n        if (chess.game_over()) {\n            handleGameOver();\n        }\n\n    }, [movesHistory])\n\n    // Pops up an alert\n    const alert = (text, type) => {\n        setAlertText(text)\n        setAlertType(type)\n        setOpenAlert(true)\n    }\n    // updates move history\n    const updateHistory = () => {\n        console.log(chess.history())\n        setMovesHistory(chess.history());\n    }\n\n    // logic to undo a move\n    const undo = () => {\n        chess.undo()\n        chess.undo()\n        setFen(chess.fen);\n        updateHistory();\n    }\n\n    // Handles player move and calls bots move\n    const handlePlayerMove = (playerMove) => {\n        // Checks if playermove is valid\n        if (chess.move(playerMove)) {\n            // update chessboard\n            setFen(chess.fen());\n\n            // computer response random\n            if (selectedBot === allBots[0]) {\n                randomBot(chess, updateHistory, setRandomBotAvaliableMoves, setFen)\n            }\n            else if (selectedBot === allBots[1]) {\n                MiniMax(chess, updateHistory, setFen, setEvalCount, setTreeData, depth)\n            }\n        }\n    }\n\n    // reset board and game\n    const resetGame = () => {\n        setFen(selectedPos);\n        chess.load(selectedPos);\n        setMovesHistory([]);\n        setOpenModal(false)\n    }\n\n    // Handles game over and if user is logged in sends to backend\n    const handleGameOver = () => {\n        // Check who won\n        if(chess.turn() === \"b\"){\n            setGameWon(true)\n        }\n        else{\n            setGameWon(false)\n        }\n\n        // Check how game ended\n        if (chess.in_checkmate()) {\n            setGameOverText(\"Checkmate\")\n        }\n        else if (chess.in_draw()) {\n            setGameOverText(\"Draw\")\n        }\n        else if (chess.in_stalemate()) {\n            setGameOverText(\"Stalemate\")\n        }\n        else if (chess.in_threefold_repetition()) {\n            setGameOverText(\"Threefold Repetition\")\n        }\n        else if (chess.insufficient_material()) {\n            setGameOverText(\"Insufficient Material\")\n        }\n\n        // Open game over modal\n        setOpenModal(true)\n\n        // Send game to user is logged in backend\n        if(isLoggedIn){\n            postGame()\n        }\n        else{\n            alert(\"Please Login to save game\", \"\")\n        }\n    }\n\n    // Sends game data to backend\n    const postGame = () => {\n      const data = {\n          game:  {\n            result: gameWon,\n            botType: selectedBot,\n            depth: depth,\n            moves: movesHistory\n          },\n          email: localStorage.getItem('email')\n    }\n\n        const config = {\n            headers: {\n                'Authorization': `Basic ${localStorage.getItem(\"token\")}`\n            }\n        } \n        const backend = axios.create({\n            baseURL: process.env.REACT_APP_BE_URL\n        })\n        const promise = backend.post(\n            `add-game`,\n            data,\n            config\n        );\n        promise\n            .then(res => {\n                alert(\"Game Saved\", \"\")\n                console.log(res.data)\n            })\n            .catch(e => {\n                console.log(e)\n            });\n    }\n\n    return (\n        <>\n            <NavBar\n                selectedBot={selectedBot}\n                setSelectedBot={setSelectedBot}\n                allBots={allBots}\n                selectedPos={selectedPos}\n                setSelectedPos={setSelectedPos}\n                allStartingPositions={allStartingPositions}\n                depth={depth}\n                setDepth={setDepth}\n                allDepth={allDepth}\n                isLoggedIn={isLoggedIn}\n                setIsLoggedIn={setIsLoggedIn}\n                alert={alert}\n            />\n            <Notification text={alertText} type={alertType} openAlert={openAlert} setOpenAlert={setOpenAlert}/>\n            <div className=\"app-container\">\n                <SimpleModal openModal={openModal} setOpenModal={setOpenModal} title={`Game Over You ${gameWon? \"Won\" : \"Lost\"}`} desc={`The game ended with a ${gameOverText}`} onClick={resetGame} buttonText=\"Play Again?\" />\n                <div className=\"chess-container\" ref={ref}>\n                    <Chessboard\n                        width={boardSize}\n                        position={fen}\n                        onDrop={(move) => handlePlayerMove({\n                            from: move.sourceSquare,\n                            to: move.targetSquare,\n                            promotion: \"q\",\n                        })}\n                        className={\"test\"}\n                    />\n                </div>\n                <div className=\"utility-container\">\n                    <MoveHistory movesHistory={movesHistory} />\n                    <UndoMove undo={undo} />\n                    <DataVisualization selectedBot={selectedBot} randomBotAvaliableMoves={randomBotAvaliableMoves} allBots={allBots} evalCount={evalCount} treeData={treeData} />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Game;\n","import React from 'react'\nimport Paper from '@material-ui/core/Paper';\nimport Divider from '@material-ui/core/Divider';\nimport MoveHistory from '../Game/MoveHistory'\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst GameRecap = ({ result, botType, depth, moveHistory }) => {\n    return (\n        <div>\n            <Paper className=\"recap-container\" elevation={3} >\n                <div className=\"recap-header\">\n                    <h3>{result}</h3>\n                </div>\n                <Divider />\n                <div className=\"recap-subheader\">\n                    <div className=\"recap-info\"><h4>Bot Type:</h4> <span>{botType}</span></div>\n                    <div className=\"recap-info\"><h4>Depth:</h4> <span>{depth}</span></div>\n                </div>\n                <Divider />\n                <div className=\"recap-body\">\n                <Accordion>\n                    <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                    >\n                        <h4>Move History</h4>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <MoveHistory movesHistory={moveHistory} className={\"recap\"}/>\n                    </AccordionDetails>\n                </Accordion>\n                </div>\n            </Paper>\n        </div>\n    )\n}\n\nexport default GameRecap\n","import React, {useEffect, useState} from 'react'\nimport NavBar from '../../common/NavBar'\nimport GameReacap from './GameRecap'\nimport axios from 'axios'\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// get history from backend\nconst PreviousGames = ({ isLoggedIn, setIsLoggedIn }) => {\n    const [gameHistory, setGameHistory] = useState([])\n\n\n    const getHistory = () => {\n        const backend = axios.create({\n            baseURL: process.env.REACT_APP_BE_URL\n        })\n\n        const promise = backend.get(\n            `games`,\n            {\n                headers: {\n                    'Authorization': `token ${localStorage.getItem('token')}`\n                }\n            }\n        );\n\n        promise\n            .then(res => {\n                console.log(res.data)\n                setGameHistory(res.data.games)\n                console.log(gameHistory)\n            })\n            .catch(e => {\n                console.log(e)\n            });\n    \n        return promise\n    }\n\n    useEffect(() => {\n        getHistory()\n    }, [])\n\n    const moveHistory = [\"Nc6\", \"f3\", \"Rb8\", \"e4\",  \"Ra8\", \"Bc4\" , \"Rb8\", \"d4\" ,\"Ne5\", \"d5\", \"Nxc4\", \"Qd4\" ]\n    return (\n        <>\n            <NavBar className=\"nav-full\" isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} />\n            {\n            gameHistory.length > 0 \n            ? <div className=\"prev-games\">\n                <h2>Previous Games</h2>\n                {gameHistory.map((game) => {\n                    return <GameReacap result={game.result ? \"Win\" : \"Loss\"} botType={game.botType} depth={game.depth} moveHistory={game.moves} />\n                })}\n            </div>\n            : <div className=\"loader\"><CircularProgress color=\"secondary\" /></div>\n            }\n        </>\n    )\n}\n\nexport default PreviousGames\n","import React, { useState } from 'react'\nimport { Game } from './components/pages/Game';\nimport PreviousGames from './components/pages/PreviousGames/PreviousGames'\nimport {\n  Route,\n  useHistory,\n  Switch,\n} from 'react-router-dom';\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  return (\n    <>\n      <div className=\"app-container\">\n        <Switch>\n          <Route exact path=\"/\" ><Game isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} /></Route>\n          <Route path=\"/games\" ><PreviousGames isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} /></Route>\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}