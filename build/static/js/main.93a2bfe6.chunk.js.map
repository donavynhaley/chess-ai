{"version":3,"sources":["components/common/Selection.js","components/common/NavBar.js","components/pages/Game/MoveHistory.js","components/pages/Game/TreeVisualization.js","components/common/Button.js","components/common/SimpleModel.js","components/pages/Game/DataVisualization.js","components/bots/randomBot.js","components/bots/getBoardEvaluation.js","components/bots/MiniMax.js","components/pages/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","button","display","marginTop","spacing","color","formControl","margin","minWidth","select","Selection","props","selected","setSelected","allOptions","title","useState","open","setOpen","classes","className","FormControl","InputLabel","id","Select","labelId","onClose","onOpen","value","onChange","event","target","map","option","key","MenuItem","fen","name","NavBar","selectedBot","setSelectedBot","allBots","selectedPos","setSelectedPos","allStartingPositions","depth","setDepth","allDepth","MoveHistory","movesHistory","count","listMoveHistory","move","playerMove","computerMove","TreeVisualization","data","depthFactor","initialDepth","rootNodeClassName","branchNodeClassName","leafNodeClassName","Button","onClick","text","SimpleModel","openModal","setOpenModal","desc","buttonText","body","class","Modal","aria-labelledby","aria-describedby","DataVisualization","randomBotAvaliableMoves","evalCount","treeData","handleClose","handleOpen","console","log","listAvaliableMoves","randomBot","toLocaleString","variant","chess","updateComputerHistory","setRandomBotAvaliableMoves","setFen","setTimeout","moves","length","Math","floor","random","pieceValues","Map","getBoardEvaluation","i","charAt","undefined","miniMaxRecursive","chessCopy","allEval","isMax","bestMove","maxEval","Infinity","push","score","currentMove","totalMoves","currentEval","undo","minEval","fetchBestMove","a","MiniMax","setEvalCount","setTreeData","attributes","children","Chess","then","totalEvaluations","evaluation","reduce","b","j","index","indexTwo","toTreeData","startingFen","Game","setMovesHistory","gameOverText","setGameOverText","boardSize","setBoardSize","ref","useRef","useEffect","current","offsetWidth","resetGame","game_over","handleGameOver","newMove","handlePlayerMove","currentMovesHistory","pieceType","get","to","type","toUpperCase","updatePlayerHistory","load","in_checkmate","in_draw","in_stalemate","in_threefold_repetition","insufficient_material","width","position","onDrop","from","sourceSquare","targetSquare","promotion","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAQMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,OAAQ,CACJC,QAAS,QACTC,UAAWH,EAAMI,QAAQ,GACzBC,MAAO,SAEXC,YAAa,CACTC,OAAQP,EAAMI,QAAQ,GACtBI,SAAU,KAEdC,OAAQ,CACJJ,MAAO,QACPG,SAAU,SAqDHE,EAjDG,SAACC,GACf,IAAQC,EAA6CD,EAA7CC,SAAUC,EAAmCF,EAAnCE,YAAaC,EAAsBH,EAAtBG,WAAYC,EAAUJ,EAAVI,MAC3C,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAUrB,IAchB,OACI,qBAAKsB,UAAU,uBAAf,SAEI,cAACC,EAAA,EAAD,CAAaD,UAAWD,EAAQb,YAAhC,SACI,gCACI,cAACgB,EAAA,EAAD,CAAYF,UAAWD,EAAQV,OAAQc,GAAG,eAA1C,SAA0DR,IAC1D,cAACS,EAAA,EAAD,CACIC,QAAQ,eACRF,GAAG,cACHN,KAAMA,EACNS,QAlBA,WAChBR,GAAQ,IAkBQS,OAfD,WACfT,GAAQ,IAeQU,MAAOhB,EACPiB,SAzBC,SAACC,GAClBjB,EAAYiB,EAAMC,OAAOH,QAyBTR,UAAWD,EAAQV,OARvB,SAUKK,GAAcA,EAAWkB,KAAI,SAACC,EAAQC,GACnC,MAAuB,iBAAXD,GAA0C,iBAAXA,EAChC,cAACE,EAAA,EAAD,CAAoBP,MAAOK,EAA3B,SAAoCA,GAArBC,GAIf,cAACC,EAAA,EAAD,CAAoBP,MAAOK,EAAOG,IAAlC,SAAwCH,EAAOI,MAAhCH,gBCpCvCI,EAzBA,SAAC3B,GACZ,IACI4B,EASA5B,EATA4B,YACAC,EAQA7B,EARA6B,eACAC,EAOA9B,EAPA8B,QACAC,EAMA/B,EANA+B,YACAC,EAKAhC,EALAgC,eACAC,EAIAjC,EAJAiC,qBACAC,EAGAlC,EAHAkC,MACAC,EAEAnC,EAFAmC,SACAC,EACApC,EADAoC,SAEJ,OACI,sBAAK3B,UAAU,SAAf,UACI,0CACA,sBAAKA,UAAU,aAAf,UACI,cAAC,EAAD,CAAWR,SAAU2B,EAAa1B,YAAa2B,EAAgB1B,WAAY2B,EAAS1B,MAAO,eAC3F,cAAC,EAAD,CAAWH,SAAU8B,EAAa7B,YAAa8B,EAAgB7B,WAAY8B,EAAsB7B,MAAO,sBACxG,cAAC,EAAD,CAAWH,SAAUiC,EAAOhC,YAAaiC,EAAUhC,WAAYiC,EAAUhC,MAAO,4B,0CCEjFiC,EApBK,SAAArC,GAChB,IAAQsC,EAAiBtC,EAAjBsC,aAEJC,EAAQ,EACNC,EAAkBF,EAAajB,KAAI,SAACoB,GAEtC,OADAF,IACO,qBAAI9B,UAAS,OAAb,UAAwB8B,EAAxB,KAAiCE,EAAKC,WAAtC,IAAmDD,EAAKE,mBAGnE,OACI,sBAAKlC,UAAU,eAAf,UACI,8CACA,oBAAIA,UAAU,YAAd,SACK+B,Q,0BCEFI,EAdW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACI,qBAAKjC,GAAG,cAAR,SACI,cAAC,IAAD,CACIiC,KAAMA,EACNC,YAAa,IACbC,aAAc,EACdC,kBAAkB,aAClBC,oBAAoB,eACpBC,kBAAkB,kB,SCCnBC,EATA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KACvB,OACI,wBAAQ5C,UAAU,WAAW2C,QAASA,EAAtC,SACKC,KCgCEC,EAhCK,SAAdA,EAAetD,GACjB,IAAQuD,EAA8DvD,EAA9DuD,UAAWC,EAAmDxD,EAAnDwD,aAAcpD,EAAqCJ,EAArCI,MAAOqD,EAA8BzD,EAA9ByD,KAAML,EAAwBpD,EAAxBoD,QAASM,EAAe1D,EAAf0D,WAMjDC,EACF,sBAAKlD,UAAU,uBAAf,UACI,oBAAIA,UAAU,qBAAd,SAAoCL,IACpC,qBAAKK,UAAU,2BAAf,SACKgD,IAEL,cAAC,EAAD,CAAQL,QAASA,EAASC,KAAMK,IAChC,cAACJ,EAAD,OAIR,OACI,qBAAKM,MAAM,kBAAX,SACI,cAACC,EAAA,EAAD,CACIvD,KAAMiD,EACNxC,QAnBQ,WAChByC,GAAa,IAmBLM,kBAAgB,qBAChBC,mBAAiB,2BAJrB,SAMKJ,OCqBFK,EAjDW,SAAChE,GACvB,IAAQ4B,EAAuE5B,EAAvE4B,YAAaqC,EAA0DjE,EAA1DiE,wBAAyBnC,EAAiC9B,EAAjC8B,QAASoC,EAAwBlE,EAAxBkE,UAAWC,EAAanE,EAAbmE,SAClE,EAAkC9D,oBAAS,GAA3C,mBAAOkD,EAAP,KAAkBC,EAAlB,KAEMY,EAAc,WAChBZ,GAAa,IAGXa,EAAa,WACfC,QAAQC,IAAI,SACZf,GAAa,IA8BjB,OACI,sBAAK/C,UAAU,qBAAf,UACI,oDACCqB,EAAQ,KAAOF,EA9BN,WACd,IAAM4C,EAAqBP,EAAwB5C,KAAI,SAACoB,GACpD,OAAO,6BAAKA,OAEhB,OACI,qCACI,sEACA,oBAAIhC,UAAU,kBAAd,SACK+D,GAAsBA,OAsBDC,GAAc,KAC3C3C,EAAQ,KAAOF,GAAeE,EAAQ,KAAOF,EAhB9C,qCAEI,cAAC,EAAD,CAAa2B,UAAWA,EAAWC,aAAcA,EAAcpD,MAAO,OAAQqD,KAAM,cAAC,EAAD,CAAmBZ,KAAMsB,IAAcf,QAASgB,EAAaV,WAAW,gBAC5J,0DAA2BQ,EAAUQ,oBACrC,cAAC,IAAD,CAAQC,QAAQ,WAAWjF,MAAM,YAAY0D,QAASiB,EAAtD,yBAYuE,SCzBxEI,EAxBG,SAACG,EAAOC,EAAuBC,EAA4BC,GAEzEC,YAAW,WAGP,IAAMC,EAAQL,EAAMK,QAMpB,GAHAH,EAA2BG,GAGvBA,EAAMC,OAAS,EAAG,CAClB,IAAMvC,EAAesC,EAAME,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMC,SAC5DN,EAAMnC,KAAKE,GAGXkC,EAAsBlC,GAGtBoC,EAAOH,EAAMnD,UAElB,M,yBCXH6D,EAAc,IAAIC,IAEtBD,EAAW,EAAQ,IACnBA,EAAW,EAAQ,IACnBA,EAAW,EAAQ,IACnBA,EAAW,EAAQ,KACnBA,EAAW,EAAQ,KACnBA,EAAW,EAAQ,KAGnBA,EAAW,GAAS,IACpBA,EAAW,GAAS,IACpBA,EAAW,GAAS,IACpBA,EAAW,GAAS,KACpBA,EAAW,GAAS,KACpBA,EAAW,GAAS,KAGpB,IAceE,EAdY,SAAC/D,GAExB,IADA,IAAIc,EAAQ,EACHkD,EAAI,EAAGA,EAAIhE,EAAIyD,QAEE,MAAlBzD,EAAIiE,OAAOD,GAFaA,SAKOE,IAA/BL,EAAY7D,EAAIiE,OAAOD,MACvBlD,GAAS+C,EAAY7D,EAAIiE,OAAOD,KAGxC,OAAOlD,GCnCLqD,EAAmB,SAAnBA,EAAoBC,EAAW3D,EAAO4D,EAASC,GACjD,GAAc,IAAV7D,EACA,MAAO,CAAC,KAAMsD,EAAmBK,EAAUpE,QAG/C,IAAMwD,EAAQY,EAAUZ,QACpBe,EAAWf,EAAME,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMC,SAEtD,GAAIa,EAAO,CAEP,IADA,IAAIE,GAAWC,IACNT,EAAI,EAAGA,EAAIR,EAAMC,OAAQO,IAAK,CAEnCI,EAAUpD,KAAKwC,EAAMQ,IAErBK,EAAQ5D,EAAQ,GAAGiE,KAAK,CAAEC,MAAOZ,EAAmBK,EAAUpE,OAAQgB,KAAMwC,EAAMQ,GAAIY,YAAaZ,EAAGa,WAAYrB,EAAMC,OAAS,EAAGa,OAAO,IAE3I,IAAIQ,EAAcX,EAAiBC,EAAW3D,EAAQ,EAAG4D,GAAS,GAAO,GAEzED,EAAUW,OAEND,EAAcN,IACdA,EAAUM,EACVP,EAAWf,EAAMQ,IAGzB,MAAO,CAACO,EAAUC,GAIlB,IADA,IAAIQ,EAAUP,IACLT,EAAI,EAAGA,EAAIR,EAAMC,OAAQO,IAAK,CAEnCI,EAAUpD,KAAKwC,EAAMQ,IAErBK,EAAQ5D,EAAQ,GAAGiE,KAAK,CAAEC,MAAOZ,EAAmBK,EAAUpE,OAAQgB,KAAMwC,EAAMQ,GAAIY,YAAaZ,EAAGa,WAAYrB,EAAMC,OAAS,EAAGa,OAAO,IAE3I,IAAIQ,EAAcX,EAAiBC,EAAW3D,EAAQ,EAAG4D,GAAS,GAAM,GAExED,EAAUW,OAEND,EAAcE,IACdA,EAAUF,EACVP,EAAWf,EAAMQ,IAGzB,MAAO,CAACO,EAAUS,IAIpBC,EAAa,uCAAG,WAAOb,EAAW3D,EAAO4D,EAASC,GAAlC,eAAAY,EAAA,sEACKf,EAAiBC,EAAW3D,EAAO4D,EAASC,GADjD,cACZC,EADY,yBAEXA,EAAS,IAFE,2CAAH,4DA6FJY,EAjCC,SAAChC,EAAOC,EAAuBE,EAAQ8B,EAAcC,EAAa5E,GAC9E,IAAM4D,EAAU,CAAC,GAAI,GAAI,IACnB3B,EAAW,CACbzC,KAAM,QACNqF,WAAY,CACRX,MAAOZ,EAAmBZ,EAAMnD,QAEpCuF,SAAU,IAERnB,EAAY,IAAIoB,IAAMrC,EAAMnD,OAClCiF,EAAcb,EAAW3D,EAAO4D,GAAS,GAAMoB,MAAK,SAAClB,GAGjDpB,EAAMnC,KAAKuD,GACX1B,QAAQC,IAAIuB,GAGZ,IAAMqB,EAAmBrB,EAAQzE,KAAI,SAAC+F,GAClC,OAAOA,EAAWlC,UAEtB2B,EAAaM,EAAiBE,QAAO,SAACV,EAAGW,GAAJ,OAAUX,EAAIW,IAAG,IAGtDR,EA9EW,SAAChB,EAAS3B,EAAUjC,GACnC,IAAIuD,EAAIvD,EAAQ,EAChB,GAAIuD,EAAI,EACJ,OAAOtB,EAEX,IAAK,IAAIoD,EAAI,EAAGA,EAAIzB,EAAQL,GAAGP,OAAQqC,IACnCpD,EAAS6C,SAASb,KAAK,CACnBzE,KAAMoE,EAAQL,GAAG8B,GAAG9E,KACpBsE,WAAY,CACRX,MAAON,EAAQL,GAAG8B,GAAGnB,OAEzBY,SAAU,KAIlB,IADAvB,GAAK,GACG,EACJ,OAAOtB,EAGX,IADA,IAAIqD,EAAQ,EACHD,EAAI,EAAGA,EAAIzB,EAAQL,GAAGP,OAAQqC,IACnCpD,EAAS6C,SAASQ,GAAOR,SAASb,KAAK,CACnCzE,KAAMoE,EAAQL,GAAG8B,GAAG9E,KACpBsE,WAAY,CACRX,MAAON,EAAQL,GAAG8B,GAAGnB,OAEzBY,SAAU,KAEVlB,EAAQL,GAAG8B,GAAGlB,cAAgBP,EAAQL,GAAG8B,GAAGjB,aAC5CkB,GAAS,GAGjBA,EAAQ,EACR,IAAIC,EAAW,EAEf,IADAhC,GAAK,GACG,EACJ,OAAOtB,EAEX,IAAK,IAAIoD,EAAI,EAAGA,EAAIzB,EAAQL,GAAGP,OAAQqC,IACnCpD,EAAS6C,SAASS,GAAUT,SAASQ,GAAOR,SAASb,KAAK,CACtDzE,KAAMoE,EAAQL,GAAG8B,GAAG9E,KACpBsE,WAAY,CACRX,MAAON,EAAQL,GAAG8B,GAAGnB,OAEzBY,SAAU,KAEVlB,EAAQL,GAAG8B,GAAGlB,cAAgBP,EAAQL,GAAG8B,GAAGjB,aAC5CkB,GAAS,IACIrD,EAAS6C,SAASS,GAAUT,SAAS9B,SAC9CuC,GAAY,EACZD,EAAQ,GAIpB,OAAOrD,EAyBSuD,CAAW5B,EAAS3B,EAAUjC,IAE1C2C,EAAsBmB,GAGtBjB,EAAOH,EAAMnD,WClIfkG,EAAc,2DACd7F,EAAU,CAAC,SAAU,UAAW,YAAa,aAC7CG,EAAuB,CACzB,CAAEP,KAAM,QAASD,IAAKkG,GACtB,CAAEjG,KAAM,oBAAqBD,IAAK,gEAClC,CAAEC,KAAM,eAAgBD,IAAK,gEAC7B,CAAEC,KAAM,mBAAoBD,IAAK,iEACjC,CAAEC,KAAM,iBAAkBD,IAAK,iEAE7BW,EAAW,CAAC,EAAG,EAAG,GAoJTwF,MAnJf,WACI,MAAgBvH,mBAAS,IAAI4G,IAAMU,IAA5B/C,EAAP,oBACA,EAAsBvE,mBAASuE,EAAMnD,OAArC,mBAAOA,EAAP,KAAYsD,EAAZ,KACA,EAAwC1E,mBAAS,IAAjD,mBAAOiC,EAAP,KAAqBuF,EAArB,KACA,EAAsCxH,mBAASyB,EAAQ,IAAvD,mBAAOF,EAAP,KAAoBC,EAApB,KACA,EAAsCxB,mBAAS4B,EAAqB,GAAGR,KAAvE,mBAAOM,EAAP,KAAoBC,EAApB,KACA,EAAkC3B,mBAAS,GAA3C,mBAAO6D,EAAP,KAAkB2C,EAAlB,KACA,EAAwCxG,mBAAS,IAAjD,mBAAOyH,EAAP,KAAqBC,EAArB,KACA,EAA8D1H,mBAAS,IAAvE,mBAAO4D,EAAP,KAAgCa,EAAhC,KACA,EAAgCzE,mBAAS,IAAzC,mBAAO8D,EAAP,KAAiB2C,EAAjB,KACA,EAAkCzG,mBAAS,KAA3C,mBAAO2H,EAAP,KAAkBC,EAAlB,KACA,GAAkC5H,oBAAS,GAA3C,qBAAOkD,GAAP,MAAkBC,GAAlB,MACA,GAA0BnD,mBAAS+B,EAAS,IAA5C,qBAAOF,GAAP,MAAcC,GAAd,MACM+F,GAAMC,iBAAO,MAEnBC,qBAAU,WACN9D,QAAQC,IAAI2D,GAAIG,QAAQC,aACxBL,EAAaC,GAAIG,QAAQC,eAE1B,IAEHF,qBAAU,WACNG,OAED,CAACxG,IAEJqG,qBAAU,WAEFxD,EAAM4D,aACNC,QAKR,IAkBM5D,GAAwB,SAAClC,GAC3B,IAAM0D,EAAc/D,EAAaA,EAAa4C,OAAS,GACjDwD,EAAO,2BAAQrC,GAAR,IAAqB1D,aAAcA,IAChDL,EAAaA,EAAa4C,OAAS,GAAKwD,GAItCC,GAAmB,SAACjG,GAElBkC,EAAMnC,KAAKC,MA3BS,SAACgG,GACzB,IAEIjG,EAFEmG,EAAsBtG,EACtBuG,EAAYjE,EAAMkE,IAAIJ,EAAQK,IAAIC,KAAKC,cAKzCxG,EADc,MAAdoG,EACO,CAAEnG,WAAW,GAAD,OAAKgG,EAAQK,KAGzB,CAAErG,WAAW,GAAD,OAAKmG,GAAL,OAAiBH,EAAQK,KAGhDH,EAAoBzC,KAAK1D,GACzBoF,EAAgBe,GAeZM,CAAoBxG,GAGpBqC,EAAOH,EAAMnD,OAGTG,IAAgBE,EAAQ,GACxB2C,EAAUG,EAAOC,GAAuBC,EAA4BC,GAE/DnD,IAAgBE,EAAQ,IAC7B8E,EAAQhC,EAAOC,GAAuBE,EAAQ8B,EAAcC,EAAa5E,MAK/EqG,GAAY,WAEdxD,EAAOhD,GACP6C,EAAMuE,KAAKpH,GACX8F,EAAgB,IAChBrE,IAAa,IAGXiF,GAAiB,WAEf7D,EAAMwE,gBACNrB,EAAgB,aAEhBnD,EAAMyE,WACNtB,EAAgB,QAEhBnD,EAAM0E,gBACNvB,EAAgB,aAEhBnD,EAAM2E,2BACNxB,EAAgB,wBAEhBnD,EAAM4E,yBACNzB,EAAgB,yBAIpBvE,IAAa,IAKjB,OACI,qCACI,cAAC,EAAD,CACI5B,YAAaA,EACbC,eAAgBA,EAChBC,QAASA,EACTC,YAAaA,EACbC,eAAgBA,EAChBC,qBAAsBA,EACtBC,MAAOA,GACPC,SAAUA,GACVC,SAAUA,IAEd,sBAAK3B,UAAU,gBAAf,UACI,cAAC,EAAD,CAAa8C,UAAWA,GAAWC,aAAcA,GAAcpD,MAAO,YAAaqD,KAAI,gCAA2BqE,GAAgB1E,QAASmF,GAAW7E,WAAW,gBACjK,qBAAKjD,UAAU,kBAAf,SACI,qBAAKyH,IAAKA,GAAKzH,UAAU,uBAAzB,SACI,cAAC,IAAD,CACIgJ,MAAOzB,EACP0B,SAAUjI,EACVkI,OAAQ,SAAClH,GAAD,OAAUkG,GAAiB,CAC/BiB,KAAMnH,EAAKoH,aACXd,GAAItG,EAAKqH,aACTC,UAAW,aAK3B,sBAAKtJ,UAAU,oBAAf,UACI,cAAC,EAAD,CAAa6B,aAAcA,IAC3B,cAAC,EAAD,CAAmBV,YAAaA,EAAaqC,wBAAyBA,EAAyBnC,QAASA,EAASoC,UAAWA,EAAWC,SAAUA,c,QCxItJ6F,MAhBf,WAME,OALC,IACE,IAKD,qCACE,cAAC,EAAD,IACA,qBAAKvJ,UAAU,gBAAf,SACE,cAAC,EAAD,UCNOwJ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjD,MAAK,YAAkD,IAA/CkD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCAdO,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.93a2bfe6.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        display: 'block',\n        marginTop: theme.spacing(2),\n        color: 'white',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    select: {\n        color: 'white',\n        minWidth: 120,\n    }\n}));\n\nconst Selection = (props) => {\n    const { selected, setSelected, allOptions, title } = props;\n    const [open, setOpen] = useState(false);\n    const classes = useStyles();\n\n    const handleChange = (event) => {\n        setSelected(event.target.value);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    return (\n        <div className=\"select-bot-container\">\n\n            <FormControl className={classes.formControl}>\n                <div>\n                    <InputLabel className={classes.select} id=\"select-label\">{title}</InputLabel>\n                    <Select\n                        labelId=\"select-label\"\n                        id=\"open-select\"\n                        open={open}\n                        onClose={handleClose}\n                        onOpen={handleOpen}\n                        value={selected}\n                        onChange={handleChange}\n                        className={classes.select}\n                    >\n                        {allOptions && allOptions.map((option, key) => {\n                            if (typeof (option) == \"string\" || typeof (option) == \"number\") {\n                                return <MenuItem key={key} value={option}>{option}</MenuItem>\n\n                            }\n                            else {\n                                return <MenuItem key={key} value={option.fen}>{option.name}</MenuItem>\n                            }\n                        })}\n                    </Select>\n                </div>\n            </FormControl>\n        </div>\n    )\n}\n\nexport default Selection\n","import React from 'react'\nimport Selection from './Selection'\nconst NavBar = (props) => {\n    const {\n        selectedBot,\n        setSelectedBot,\n        allBots,\n        selectedPos,\n        setSelectedPos,\n        allStartingPositions,\n        depth,\n        setDepth,\n        allDepth\n    } = props;\n    return (\n        <div className=\"navbar\">\n            <h1>Chess AI</h1>\n            <div className=\"selections\">\n                <Selection selected={selectedBot} setSelected={setSelectedBot} allOptions={allBots} title={\"Select Bot\"} />\n                <Selection selected={selectedPos} setSelected={setSelectedPos} allOptions={allStartingPositions} title={\"Starting Position\"} />\n                <Selection selected={depth} setSelected={setDepth} allOptions={allDepth} title={\"Algorithim Depth\"} />\n            </div>\n\n        </div>\n    )\n}\n\nexport default NavBar\n","import React from 'react';\n\nconst MoveHistory = props => {\n    const { movesHistory } = props;\n\n    let count = 0;\n    const listMoveHistory = movesHistory.map((move) => {\n        count++;\n        return <li className={`node`}>{count}. {move.playerMove} {move.computerMove}</li>\n    })\n\n    return (\n        <div className=\"move-history\">\n            <h2>Move History</h2>\n            <ul className=\"move-list\">\n                {listMoveHistory}\n            </ul>\n        </div>\n    )\n}\n\n\nexport default MoveHistory;\n","import React from 'react'\nimport Tree from 'react-d3-tree';\n\nconst TreeVisualization = ({ data }) => {\n    return (\n        <div id=\"treeWrapper\" >\n            <Tree\n                data={data}\n                depthFactor={1000}\n                initialDepth={2}\n                rootNodeClassName=\"node__root\"\n                branchNodeClassName=\"node__branch\"\n                leafNodeClassName=\"node__leaf\" />\n        </div>\n    )\n}\n\nexport default TreeVisualization\n","import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Button = ({ onClick, text }) => {\n    return (\n        <button className=\"btn dark\" onClick={onClick}>\n            {text}\n        </button>\n\n    )\n}\n\nexport default Button\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Button from './Button'\n\n\n\nconst SimpleModel = (props) => {\n    const { openModal, setOpenModal, title, desc, onClick, buttonText } = props;\n\n    const handleClose = () => {\n        setOpenModal(false)\n    }\n\n    const body = (\n        <div className=\"simple-modal-content\">\n            <h2 className=\"simple-modal-title\">{title}</h2>\n            <div className=\"simple-modal-description\">\n                {desc}\n            </div>\n            <Button onClick={onClick} text={buttonText} />\n            <SimpleModel />\n        </div>\n    )\n\n    return (\n        <div class=\"modal-container\">\n            <Modal\n                open={openModal}\n                onClose={handleClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                {body}\n            </Modal>\n        </div>\n    )\n}\n\nexport default SimpleModel\n","import React, { useState } from 'react'\nimport Button from '@material-ui/core/Button';\nimport TreeVisualization from './TreeVisualization';\nimport SimpleModal from '../../common/SimpleModel'\n\nconst DataVisualization = (props) => {\n    const { selectedBot, randomBotAvaliableMoves, allBots, evalCount, treeData } = props;\n    const [openModal, setOpenModal] = useState(false);\n\n    const handleClose = () => {\n        setOpenModal(false)\n    }\n\n    const handleOpen = () => {\n        console.log(\"opens\")\n        setOpenModal(true)\n    }\n\n    const randomBot = () => {\n        const listAvaliableMoves = randomBotAvaliableMoves.map((move) => {\n            return <li>{move}</li>\n        })\n        return (\n            <>\n                <p>Selecting random from avaliable moves</p>\n                <ul className=\"avaliable-moves\">\n                    {listAvaliableMoves && listAvaliableMoves}\n                </ul>\n            </>\n        )\n    }\n    const miniMaxBot = () => {\n        return (\n            <>\n\n                <SimpleModal openModal={openModal} setOpenModal={setOpenModal} title={\"Tree\"} desc={<TreeVisualization data={treeData} />} onClick={handleClose} buttonText=\"Close Modal\" />\n                <p>{`Postions Evaluated: ${evalCount.toLocaleString()}`}</p>\n                <Button variant=\"outlined\" color=\"secondary\" onClick={handleOpen}>\n                    See Tree\n                </Button>\n            </>\n        )\n\n    }\n    // updates return based on what bot is selected. \n    return (\n        <div className=\"data-visualization\">\n            <h2>Data Visualization</h2>\n            {allBots[0] === selectedBot ? randomBot() : null}\n            {allBots[1] === selectedBot || allBots[2] === selectedBot ? miniMaxBot() : null}\n        </div>\n    )\n}\n\nexport default DataVisualization\n","const randomBot = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n    // computer response random\n    setTimeout(() => {\n\n        // Get list of valid moves\n        const moves = chess.moves();\n\n        // update state for data vizualization\n        setRandomBotAvaliableMoves(moves);\n\n        // If valid move is avaliable selects random and updates chessboard\n        if (moves.length > 0) {\n            const computerMove = moves[Math.floor(Math.random() * moves.length)];\n            chess.move(computerMove);\n\n            // add move to history\n            updateComputerHistory(computerMove);\n\n            // update chessboard\n            setFen(chess.fen());\n        }\n    }, 300)\n}\n\nexport default randomBot\n","\n/* \nbased on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n*/\n\nlet pieceValues = new Map()\n// Black\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 825;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\n// White\npieceValues['P'] = -128;\npieceValues['N'] = -781;\npieceValues['B'] = -825;\npieceValues['R'] = -1276;\npieceValues['Q'] = -2538;\npieceValues['K'] = -9999;\n\n// returns total piece values\nconst getBoardEvaluation = (fen) => {\n    let count = 0;\n    for (let i = 0; i < fen.length; i++) {\n        // Breaks after pieces string ends. All fens have a space after board declaration\n        if (fen.charAt(i) === \" \")\n            break\n\n        if (pieceValues[fen.charAt(i)] !== undefined)\n            count += pieceValues[fen.charAt(i)]\n    }\n\n    return count\n}\n\nexport default getBoardEvaluation","import Chess from \"chess.js\";\nimport getBoardEvaluation from './getBoardEvaluation'\n\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, isMax) => {\n    if (depth === 0) {\n        return [null, getBoardEvaluation(chessCopy.fen())];\n    }\n\n    const moves = chessCopy.moves();\n    let bestMove = moves[Math.floor(Math.random() * moves.length)];\n\n    if (isMax) {\n        let maxEval = -Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            // Update move\n            chessCopy.move(moves[i])\n            // Push board eval to list\n            allEval[depth - 1].push({ score: getBoardEvaluation(chessCopy.fen()), move: moves[i], currentMove: i, totalMoves: moves.length - 1, isMax: true })\n            // Recursive call minimax with lower depth\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, false)[1];\n            // Undo move\n            chessCopy.undo();\n            // Sets best move according to currentEval max\n            if (currentEval > maxEval) {\n                maxEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return [bestMove, maxEval];\n    }\n    else {\n        let minEval = Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            // Update move\n            chessCopy.move(moves[i])\n            // Push board eval to list\n            allEval[depth - 1].push({ score: getBoardEvaluation(chessCopy.fen()), move: moves[i], currentMove: i, totalMoves: moves.length - 1, isMax: true })\n            // Recursive call minimax with lower depth\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, true)[1];\n            // Undo move\n            chessCopy.undo()\n            // Sets best move according to currentEval min\n            if (currentEval < minEval) {\n                minEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return [bestMove, minEval]\n    }\n}\n\nconst fetchBestMove = async (chessCopy, depth, allEval, isMax) => {\n    const bestMove = await miniMaxRecursive(chessCopy, depth, allEval, isMax)\n    return bestMove[0]\n}\n\nconst toTreeData = (allEval, treeData, depth) => {\n    let i = depth - 1\n    if (i < 0)\n        return treeData\n\n    for (let j = 0; j < allEval[i].length; j++) {\n        treeData.children.push({\n            name: allEval[i][j].move,\n            attributes: {\n                score: allEval[i][j].score,\n            },\n            children: []\n        })\n    }\n    i -= 1\n    if (i < 0)\n        return treeData\n\n    let index = 0\n    for (let j = 0; j < allEval[i].length; j++) {\n        treeData.children[index].children.push({\n            name: allEval[i][j].move,\n            attributes: {\n                score: allEval[i][j].score,\n            },\n            children: []\n        })\n        if (allEval[i][j].currentMove === allEval[i][j].totalMoves) {\n            index += 1\n        }\n    }\n    index = 0\n    let indexTwo = 0\n    i -= 1\n    if (i < 0)\n        return treeData\n\n    for (let j = 0; j < allEval[i].length; j++) {\n        treeData.children[indexTwo].children[index].children.push({\n            name: allEval[i][j].move,\n            attributes: {\n                score: allEval[i][j].score,\n            },\n            children: []\n        })\n        if (allEval[i][j].currentMove === allEval[i][j].totalMoves) {\n            index += 1\n            if (index >= treeData.children[indexTwo].children.length) {\n                indexTwo += 1\n                index = 0\n            }\n        }\n    }\n    return treeData\n}\nconst MiniMax = (chess, updateComputerHistory, setFen, setEvalCount, setTreeData, depth) => {\n    const allEval = [[], [], []]\n    const treeData = {\n        name: \"Start\",\n        attributes: {\n            score: getBoardEvaluation(chess.fen()),\n        },\n        children: []\n    }\n    const chessCopy = new Chess(chess.fen());\n    fetchBestMove(chessCopy, depth, allEval, true).then((bestMove) => {\n\n        // update position\n        chess.move(bestMove);\n        console.log(allEval);\n\n        // Update eval count\n        const totalEvaluations = allEval.map((evaluation) => {\n            return evaluation.length\n        })\n        setEvalCount(totalEvaluations.reduce((a, b) => a + b, 0))\n\n        // convert to tree data\n        setTreeData(toTreeData(allEval, treeData, depth))\n        // add move to history\n        updateComputerHistory(bestMove);\n\n        // update chessboard\n        setFen(chess.fen());\n    })\n}\n\n\nexport default MiniMax\n","import React, { useState, useEffect, useRef } from 'react'\nimport Chessboard from 'chessboardjsx';\nimport Chess from \"chess.js\";\nimport MoveHistory from './MoveHistory';\nimport DataVisualization from './DataVisualization';\nimport NavBar from '../../common/NavBar';\nimport randomBot from '../../bots/randomBot';\nimport MiniMax from '../../bots/MiniMax'\nimport SimpleModal from '../../common/SimpleModel';\n\nconst startingFen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\nconst allBots = [\"Random\", \"MiniMax\", \"AlphaBeta\", \"Stockfish\"]\nconst allStartingPositions = [\n    { name: \"Start\", fen: startingFen },\n    { name: \"Caro-Kann Defense\", fen: \"rnbqkbnr/pp1ppppp/2p5/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n    { name: \"Pirc Defense\", fen: \"rnbqkbnr/ppp1pppp/3p4/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n    { name: \"Sicilian Defense\", fen: \"rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 1\" },\n    { name: \"French Defense\", fen: \"rnbqkbnr/pppp1ppp/4p3/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n]\nconst allDepth = [1, 2, 3]\nfunction Game() {\n    const [chess] = useState(new Chess(startingFen));\n    const [fen, setFen] = useState(chess.fen());\n    const [movesHistory, setMovesHistory] = useState([]);\n    const [selectedBot, setSelectedBot] = useState(allBots[1]);\n    const [selectedPos, setSelectedPos] = useState(allStartingPositions[0].fen)\n    const [evalCount, setEvalCount] = useState(0)\n    const [gameOverText, setGameOverText] = useState('');\n    const [randomBotAvaliableMoves, setRandomBotAvaliableMoves] = useState([]);\n    const [treeData, setTreeData] = useState({})\n    const [boardSize, setBoardSize] = useState(460);\n    const [openModal, setOpenModal] = useState(false)\n    const [depth, setDepth] = useState(allDepth[1])\n    const ref = useRef(null);\n\n    useEffect(() => {\n        console.log(ref.current.offsetWidth)\n        setBoardSize(ref.current.offsetWidth);\n\n    }, [])\n\n    useEffect(() => {\n        resetGame()\n\n    }, [selectedPos])\n\n    useEffect(() => {\n        // Check for win\n        if (chess.game_over()) {\n            handleGameOver();\n        }\n    })\n\n    // Add playermove to history\n    const updatePlayerHistory = (newMove) => {\n        const currentMovesHistory = movesHistory;\n        const pieceType = chess.get(newMove.to).type.toUpperCase();\n        let move;\n\n        // do not display pawn\n        if (pieceType === \"P\") {\n            move = { playerMove: `${newMove.to}` }\n        }\n        else {\n            move = { playerMove: `${pieceType}${newMove.to}` }\n        }\n\n        currentMovesHistory.push(move);\n        setMovesHistory(currentMovesHistory);\n    }\n\n    // Add computer move to history\n    const updateComputerHistory = (computerMove) => {\n        const currentMove = movesHistory[movesHistory.length - 1];\n        const newMove = { ...currentMove, computerMove: computerMove }\n        movesHistory[movesHistory.length - 1] = newMove;\n    }\n\n    // Handles player move and calls bots move\n    const handlePlayerMove = (playerMove) => {\n        // Checks if playermove is valid\n        if (chess.move(playerMove)) {\n            // add move to history\n            updatePlayerHistory(playerMove);\n\n            // update chessboard\n            setFen(chess.fen());\n\n            // computer response random\n            if (selectedBot === allBots[0]) {\n                randomBot(chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen)\n            }\n            else if (selectedBot === allBots[1]) {\n                MiniMax(chess, updateComputerHistory, setFen, setEvalCount, setTreeData, depth)\n            }\n        }\n    }\n\n    const resetGame = () => {\n        // reset board and game\n        setFen(selectedPos);\n        chess.load(selectedPos);\n        setMovesHistory([]);\n        setOpenModal(false)\n    }\n\n    const handleGameOver = () => {\n        // Check how game ended\n        if (chess.in_checkmate()) {\n            setGameOverText(\"Checkmate\")\n        }\n        if (chess.in_draw()) {\n            setGameOverText(\"Draw\")\n        }\n        if (chess.in_stalemate()) {\n            setGameOverText(\"Stalemate\")\n        }\n        if (chess.in_threefold_repetition()) {\n            setGameOverText(\"Threefold Repetition\")\n        }\n        if (chess.insufficient_material()) {\n            setGameOverText(\"Insufficient Material\")\n        }\n\n        // Open game over modal\n        setOpenModal(true)\n\n    }\n\n\n    return (\n        <>\n            <NavBar\n                selectedBot={selectedBot}\n                setSelectedBot={setSelectedBot}\n                allBots={allBots}\n                selectedPos={selectedPos}\n                setSelectedPos={setSelectedPos}\n                allStartingPositions={allStartingPositions}\n                depth={depth}\n                setDepth={setDepth}\n                allDepth={allDepth}\n            />\n            <div className=\"app-container\">\n                <SimpleModal openModal={openModal} setOpenModal={setOpenModal} title={\"Game Over\"} desc={`The game ended with a ${gameOverText}`} onClick={resetGame} buttonText=\"Play Again?\" />\n                <div className=\"chess-container\">\n                    <div ref={ref} className=\"chessboard-container\">\n                        <Chessboard\n                            width={boardSize}\n                            position={fen}\n                            onDrop={(move) => handlePlayerMove({\n                                from: move.sourceSquare,\n                                to: move.targetSquare,\n                                promotion: \"q\",\n                            })}\n                        />\n                    </div>\n                </div>\n                <div className=\"utility-container\">\n                    <MoveHistory movesHistory={movesHistory} />\n                    <DataVisualization selectedBot={selectedBot} randomBotAvaliableMoves={randomBotAvaliableMoves} allBots={allBots} evalCount={evalCount} treeData={treeData} />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Game;\n","import React from 'react'\nimport NavBar from './components/common/NavBar'\nimport { Game } from './components/pages/Game';\nimport {\n  Route,\n  useHistory,\n  Switch,\n} from 'react-router-dom';\nfunction App() {\n  <Switch>\n    <Route path=\"/play\" component={App} />\n  </Switch>\n\n\n  return (\n    <>\n      <NavBar />\n      <div className=\"app-container\">\n        <Game />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/index.scss'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router, } from 'react-router-dom'\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}