{"ast":null,"code":"import Chess from \"chess.js\";\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\n\nlet pieceValues = new Map();\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n  const originalFen = chess.fen();\n  const allEval = [];\n  const chessCopy = new Chess(chess.fen());\n  allEval.push({\n    score: getBoardEvaluation(chess.board),\n    move: 'origninall',\n    depth: 0\n  }); // computer response random\n\n  setTimeout(() => {\n    // Get list of valid moves and adds evaluation for each possible move to list\n    const moves = chessCopy.moves();\n\n    for (let i = 0; i < moves.length; i++) {\n      chessCopy.move(moves[i]);\n      allEval.push({\n        score: getBoardEvaluation(chessCopy.board()),\n        move: moves[i],\n        depth: 1\n      });\n      chessCopy.load(originalFen);\n    }\n\n    console.log(allEval); // update state for data vizualization\n    // setRandomBotAvaliableMoves(moves);\n    // If valid move is avaliable selects random and updates chessboard\n\n    if (moves.length > 0) {\n      const computerMove = moves[Math.floor(Math.random() * moves.length)];\n      chess.move(computerMove); // add move to history\n\n      updateComputerHistory(computerMove); // update chessboard\n\n      setFen(chess.fen());\n    }\n  }, 300);\n};\n\n_c = MiniMax;\n\nconst getBoardEvaluation = board => {\n  let count = 0;\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] === null) continue;\n      let piece = board[i][j].type;\n      let color = board[i][j].color;\n\n      if (color === 'b') {\n        count += pieceValues[piece];\n      } else {\n        count -= pieceValues[piece];\n      }\n    }\n  }\n\n  return count;\n};\n\nexport default MiniMax;\n\nvar _c;\n\n$RefreshReg$(_c, \"MiniMax\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/bots/MiniMax.js"],"names":["Chess","pieceValues","Map","MiniMax","chess","updateComputerHistory","setRandomBotAvaliableMoves","setFen","originalFen","fen","allEval","chessCopy","push","score","getBoardEvaluation","board","move","depth","setTimeout","moves","i","length","load","console","log","computerMove","Math","floor","random","count","j","piece","type","color"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAG,IAAIC,GAAJ,EAAlB;AACAD,WAAW,CAAC,GAAD,CAAX,GAAmB,GAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,GAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,GAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,IAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,IAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,IAAnB;;AAEA,MAAME,OAAO,GAAG,CAACC,KAAD,EAAQC,qBAAR,EAA+BC,0BAA/B,EAA2DC,MAA3D,KAAsE;AAClF,QAAMC,WAAW,GAAGJ,KAAK,CAACK,GAAN,EAApB;AACA,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,SAAS,GAAG,IAAIX,KAAJ,CAAUI,KAAK,CAACK,GAAN,EAAV,CAAlB;AACAC,EAAAA,OAAO,CAACE,IAAR,CAAa;AAAEC,IAAAA,KAAK,EAAEC,kBAAkB,CAACV,KAAK,CAACW,KAAP,CAA3B;AAA0CC,IAAAA,IAAI,EAAE,YAAhD;AAA8DC,IAAAA,KAAK,EAAE;AAArE,GAAb,EAJkF,CAKlF;;AACAC,EAAAA,UAAU,CAAC,MAAM;AACb;AACA,UAAMC,KAAK,GAAGR,SAAS,CAACQ,KAAV,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCT,MAAAA,SAAS,CAACK,IAAV,CAAeG,KAAK,CAACC,CAAD,CAApB;AACAV,MAAAA,OAAO,CAACE,IAAR,CAAa;AAAEC,QAAAA,KAAK,EAAEC,kBAAkB,CAACH,SAAS,CAACI,KAAV,EAAD,CAA3B;AAAgDC,QAAAA,IAAI,EAAEG,KAAK,CAACC,CAAD,CAA3D;AAAgEH,QAAAA,KAAK,EAAE;AAAvE,OAAb;AACAN,MAAAA,SAAS,CAACW,IAAV,CAAed,WAAf;AACH;;AACDe,IAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ,EARa,CASb;AACA;AAEA;;AACA,QAAIS,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;AAClB,YAAMI,YAAY,GAAGN,KAAK,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,KAAK,CAACE,MAAjC,CAAD,CAA1B;AACAjB,MAAAA,KAAK,CAACY,IAAN,CAAWS,YAAX,EAFkB,CAIlB;;AACApB,MAAAA,qBAAqB,CAACoB,YAAD,CAArB,CALkB,CAOlB;;AACAlB,MAAAA,MAAM,CAACH,KAAK,CAACK,GAAN,EAAD,CAAN;AACH;AACJ,GAvBS,EAuBP,GAvBO,CAAV;AAwBH,CA9BD;;KAAMN,O;;AA+BN,MAAMW,kBAAkB,GAAIC,KAAD,IAAW;AAClC,MAAIc,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,KAAK,CAACK,CAAD,CAAL,CAASC,MAA7B,EAAqCS,CAAC,EAAtC,EAA0C;AACtC,UAAIf,KAAK,CAACK,CAAD,CAAL,CAASU,CAAT,MAAgB,IAApB,EACI;AACJ,UAAIC,KAAK,GAAGhB,KAAK,CAACK,CAAD,CAAL,CAASU,CAAT,EAAYE,IAAxB;AACA,UAAIC,KAAK,GAAGlB,KAAK,CAACK,CAAD,CAAL,CAASU,CAAT,EAAYG,KAAxB;;AACA,UAAIA,KAAK,KAAK,GAAd,EAAmB;AACfJ,QAAAA,KAAK,IAAI5B,WAAW,CAAC8B,KAAD,CAApB;AACH,OAFD,MAGK;AACDF,QAAAA,KAAK,IAAI5B,WAAW,CAAC8B,KAAD,CAApB;AACH;AACJ;AACJ;;AACD,SAAOF,KAAP;AACH,CAjBD;;AAmBA,eAAe1B,OAAf","sourcesContent":["import Chess from \"chess.js\";\n\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\nlet pieceValues = new Map()\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n    const originalFen = chess.fen();\n    const allEval = []\n    const chessCopy = new Chess(chess.fen());\n    allEval.push({ score: getBoardEvaluation(chess.board), move: 'origninall', depth: 0 })\n    // computer response random\n    setTimeout(() => {\n        // Get list of valid moves and adds evaluation for each possible move to list\n        const moves = chessCopy.moves();\n        for (let i = 0; i < moves.length; i++) {\n            chessCopy.move(moves[i]);\n            allEval.push({ score: getBoardEvaluation(chessCopy.board()), move: moves[i], depth: 1 });\n            chessCopy.load(originalFen)\n        }\n        console.log(allEval)\n        // update state for data vizualization\n        // setRandomBotAvaliableMoves(moves);\n\n        // If valid move is avaliable selects random and updates chessboard\n        if (moves.length > 0) {\n            const computerMove = moves[Math.floor(Math.random() * moves.length)];\n            chess.move(computerMove);\n\n            // add move to history\n            updateComputerHistory(computerMove);\n\n            // update chessboard\n            setFen(chess.fen());\n        }\n    }, 300)\n}\nconst getBoardEvaluation = (board) => {\n    let count = 0;\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (board[i][j] === null)\n                continue\n            let piece = board[i][j].type\n            let color = board[i][j].color\n            if (color === 'b') {\n                count += pieceValues[piece]\n            }\n            else {\n                count -= pieceValues[piece]\n            }\n        }\n    }\n    return count\n}\n\nexport default MiniMax\n"]},"metadata":{},"sourceType":"module"}