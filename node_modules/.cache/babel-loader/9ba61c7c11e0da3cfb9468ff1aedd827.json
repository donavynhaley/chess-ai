{"ast":null,"code":"import Chess from \"chess.js\";\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\n\nlet pieceValues = new Map();\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst buildTree = (chessCopy, moves, depth) => {\n  for (let d = 0; d < depth; d++) {\n    for (let i = 0; i < moves.length; i++) {\n      chessCopy.move(moves[i]);\n      allEval.push({\n        score: getBoardEvaluation(chessCopy.board()),\n        move: moves[i],\n        depth: 1\n      });\n      chessCopy.load(originalFen);\n    }\n  }\n};\n\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n  const originalFen = chess.fen();\n  const allEval = [];\n  const chessCopy = new Chess(chess.fen());\n  allEval.push({\n    score: getBoardEvaluation(chess.board),\n    move: 'origninall',\n    depth: 0\n  }); // computer response random\n\n  setTimeout(() => {\n    // Get list of valid moves and adds evaluation for each possible move to list\n    const moves = chessCopy.moves();\n    runMiniMax(chessCopy, moves, 3);\n    console.log(allEval); // update state for data vizualization\n    // setRandomBotAvaliableMoves(moves);\n    // If valid move is avaliable selects random and updates chessboard\n\n    if (moves.length > 0) {\n      const computerMove = moves[Math.floor(Math.random() * moves.length)];\n      chess.move(computerMove); // add move to history\n\n      updateComputerHistory(computerMove); // update chessboard\n\n      setFen(chess.fen());\n    }\n  }, 300);\n};\n\n_c = MiniMax;\n\nconst getBoardEvaluation = board => {\n  let count = 0;\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] === null) continue;\n      let piece = board[i][j].type;\n      let color = board[i][j].color;\n\n      if (color === 'b') {\n        count += pieceValues[piece];\n      } else {\n        count -= pieceValues[piece];\n      }\n    }\n  }\n\n  return count;\n};\n\nexport default MiniMax;\n\nvar _c;\n\n$RefreshReg$(_c, \"MiniMax\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/bots/MiniMax.js"],"names":["Chess","pieceValues","Map","buildTree","chessCopy","moves","depth","d","i","length","move","allEval","push","score","getBoardEvaluation","board","load","originalFen","MiniMax","chess","updateComputerHistory","setRandomBotAvaliableMoves","setFen","fen","setTimeout","runMiniMax","console","log","computerMove","Math","floor","random","count","j","piece","type","color"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAG,IAAIC,GAAJ,EAAlB;AACAD,WAAW,CAAC,GAAD,CAAX,GAAmB,GAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,GAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,GAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,IAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,IAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,IAAnB;;AAEA,MAAME,SAAS,GAAG,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,KAAnB,KAA6B;AAC3C,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAApB,EAA2BC,CAAC,EAA5B,EAAgC;AAC5B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCJ,MAAAA,SAAS,CAACM,IAAV,CAAeL,KAAK,CAACG,CAAD,CAApB;AACAG,MAAAA,OAAO,CAACC,IAAR,CAAa;AAAEC,QAAAA,KAAK,EAAEC,kBAAkB,CAACV,SAAS,CAACW,KAAV,EAAD,CAA3B;AAAgDL,QAAAA,IAAI,EAAEL,KAAK,CAACG,CAAD,CAA3D;AAAgEF,QAAAA,KAAK,EAAE;AAAvE,OAAb;AACAF,MAAAA,SAAS,CAACY,IAAV,CAAeC,WAAf;AACH;AACJ;AACJ,CARD;;AASA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,qBAAR,EAA+BC,0BAA/B,EAA2DC,MAA3D,KAAsE;AAClF,QAAML,WAAW,GAAGE,KAAK,CAACI,GAAN,EAApB;AACA,QAAMZ,OAAO,GAAG,EAAhB;AACA,QAAMP,SAAS,GAAG,IAAIJ,KAAJ,CAAUmB,KAAK,CAACI,GAAN,EAAV,CAAlB;AACAZ,EAAAA,OAAO,CAACC,IAAR,CAAa;AAAEC,IAAAA,KAAK,EAAEC,kBAAkB,CAACK,KAAK,CAACJ,KAAP,CAA3B;AAA0CL,IAAAA,IAAI,EAAE,YAAhD;AAA8DJ,IAAAA,KAAK,EAAE;AAArE,GAAb,EAJkF,CAKlF;;AACAkB,EAAAA,UAAU,CAAC,MAAM;AACb;AACA,UAAMnB,KAAK,GAAGD,SAAS,CAACC,KAAV,EAAd;AACAoB,IAAAA,UAAU,CAACrB,SAAD,EAAYC,KAAZ,EAAmB,CAAnB,CAAV;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAYhB,OAAZ,EAJa,CAKb;AACA;AAEA;;AACA,QAAIN,KAAK,CAACI,MAAN,GAAe,CAAnB,EAAsB;AAClB,YAAMmB,YAAY,GAAGvB,KAAK,CAACwB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB1B,KAAK,CAACI,MAAjC,CAAD,CAA1B;AACAU,MAAAA,KAAK,CAACT,IAAN,CAAWkB,YAAX,EAFkB,CAIlB;;AACAR,MAAAA,qBAAqB,CAACQ,YAAD,CAArB,CALkB,CAOlB;;AACAN,MAAAA,MAAM,CAACH,KAAK,CAACI,GAAN,EAAD,CAAN;AACH;AACJ,GAnBS,EAmBP,GAnBO,CAAV;AAoBH,CA1BD;;KAAML,O;;AA2BN,MAAMJ,kBAAkB,GAAIC,KAAD,IAAW;AAClC,MAAIiB,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,KAAK,CAACN,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,SAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,KAAK,CAACP,CAAD,CAAL,CAASC,MAA7B,EAAqCwB,CAAC,EAAtC,EAA0C;AACtC,UAAIlB,KAAK,CAACP,CAAD,CAAL,CAASyB,CAAT,MAAgB,IAApB,EACI;AACJ,UAAIC,KAAK,GAAGnB,KAAK,CAACP,CAAD,CAAL,CAASyB,CAAT,EAAYE,IAAxB;AACA,UAAIC,KAAK,GAAGrB,KAAK,CAACP,CAAD,CAAL,CAASyB,CAAT,EAAYG,KAAxB;;AACA,UAAIA,KAAK,KAAK,GAAd,EAAmB;AACfJ,QAAAA,KAAK,IAAI/B,WAAW,CAACiC,KAAD,CAApB;AACH,OAFD,MAGK;AACDF,QAAAA,KAAK,IAAI/B,WAAW,CAACiC,KAAD,CAApB;AACH;AACJ;AACJ;;AACD,SAAOF,KAAP;AACH,CAjBD;;AAmBA,eAAed,OAAf","sourcesContent":["import Chess from \"chess.js\";\n\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\nlet pieceValues = new Map()\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst buildTree = (chessCopy, moves, depth) => {\n    for (let d = 0; d < depth; d++) {\n        for (let i = 0; i < moves.length; i++) {\n            chessCopy.move(moves[i]);\n            allEval.push({ score: getBoardEvaluation(chessCopy.board()), move: moves[i], depth: 1 });\n            chessCopy.load(originalFen)\n        }\n    }\n}\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n    const originalFen = chess.fen();\n    const allEval = []\n    const chessCopy = new Chess(chess.fen());\n    allEval.push({ score: getBoardEvaluation(chess.board), move: 'origninall', depth: 0 })\n    // computer response random\n    setTimeout(() => {\n        // Get list of valid moves and adds evaluation for each possible move to list\n        const moves = chessCopy.moves();\n        runMiniMax(chessCopy, moves, 3)\n        console.log(allEval)\n        // update state for data vizualization\n        // setRandomBotAvaliableMoves(moves);\n\n        // If valid move is avaliable selects random and updates chessboard\n        if (moves.length > 0) {\n            const computerMove = moves[Math.floor(Math.random() * moves.length)];\n            chess.move(computerMove);\n\n            // add move to history\n            updateComputerHistory(computerMove);\n\n            // update chessboard\n            setFen(chess.fen());\n        }\n    }, 300)\n}\nconst getBoardEvaluation = (board) => {\n    let count = 0;\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (board[i][j] === null)\n                continue\n            let piece = board[i][j].type\n            let color = board[i][j].color\n            if (color === 'b') {\n                count += pieceValues[piece]\n            }\n            else {\n                count -= pieceValues[piece]\n            }\n        }\n    }\n    return count\n}\n\nexport default MiniMax\n"]},"metadata":{},"sourceType":"module"}