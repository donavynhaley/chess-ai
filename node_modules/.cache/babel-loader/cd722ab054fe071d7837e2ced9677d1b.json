{"ast":null,"code":"var _jsxFileName = \"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Chessboard from 'chessboardjsx';\nimport Chess, { ChessInstance } from \"chess.js\";\nimport MoveHistory from './components/MoveHistory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [chess] = useState(new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"));\n  const [fen, setFen] = useState(chess.fen());\n  const [movesHistory, setMovesHistory] = useState([]);\n  const [selectedBot, setSelectedBot] = useState();\n\n  const handlePlayerMove = playerMove => {\n    // Checks if playermove is valid\n    if (chess.move(playerMove)) {\n      // add move to history\n      const newMovesList = movesHistory;\n      const pieceInfo = chess.get(playerMove.to);\n      const playerMovePiece = { ...playerMove,\n        piece: pieceInfo\n      };\n      newMovesList.push(playerMovePiece);\n      setMovesHistory(newMovesList); // computer response random\n\n      setTimeout(() => {\n        // Get list of valid moves\n        const moves = chess.moves(); // If valid move is avliable selects random and updates chessboard\n\n        if (moves.length > 0) {\n          const computerMove = moves[Math.floor(Math.random() * moves.length)];\n          chess.move(computerMove);\n          setFen(chess.fen());\n        }\n      }, 300); // update chessboard\n\n      setFen(chess.fen());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chess-container\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        width: 400,\n        position: fen,\n        onDrop: move => handlePlayerMove({\n          from: move.sourceSquare,\n          to: move.targetSquare,\n          promotion: \"q\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"utility-container\",\n      children: [/*#__PURE__*/_jsxDEV(MoveHistory, {\n        movesHistory: movesHistory,\n        chess: chess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"cNRQUWqn6PnfYaZUChOt7GhxezE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/App.js"],"names":["React","useState","Chessboard","Chess","ChessInstance","MoveHistory","App","chess","fen","setFen","movesHistory","setMovesHistory","selectedBot","setSelectedBot","handlePlayerMove","playerMove","move","newMovesList","pieceInfo","get","to","playerMovePiece","piece","push","setTimeout","moves","length","computerMove","Math","floor","random","from","sourceSquare","targetSquare","promotion"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,UAArC;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,IAAUN,QAAQ,CAAC,IAAIE,KAAJ,CAAU,0DAAV,CAAD,CAAxB;AACA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBR,QAAQ,CAACM,KAAK,CAACC,GAAN,EAAD,CAA9B;AACA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,EAA9C;;AAEA,QAAMa,gBAAgB,GAAIC,UAAD,IAAgB;AACvC;AACA,QAAIR,KAAK,CAACS,IAAN,CAAWD,UAAX,CAAJ,EAA4B;AAC1B;AACA,YAAME,YAAY,GAAGP,YAArB;AACA,YAAMQ,SAAS,GAAGX,KAAK,CAACY,GAAN,CAAUJ,UAAU,CAACK,EAArB,CAAlB;AACA,YAAMC,eAAe,GAAG,EAAE,GAAGN,UAAL;AAAiBO,QAAAA,KAAK,EAAEJ;AAAxB,OAAxB;AACAD,MAAAA,YAAY,CAACM,IAAb,CAAkBF,eAAlB;AACAV,MAAAA,eAAe,CAACM,YAAD,CAAf,CAN0B,CAQ1B;;AACAO,MAAAA,UAAU,CAAC,MAAM;AACf;AACA,cAAMC,KAAK,GAAGlB,KAAK,CAACkB,KAAN,EAAd,CAFe,CAIf;;AACA,YAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB;AACpB,gBAAMC,YAAY,GAAGF,KAAK,CAACG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,KAAK,CAACC,MAAjC,CAAD,CAA1B;AACAnB,UAAAA,KAAK,CAACS,IAAN,CAAWW,YAAX;AACAlB,UAAAA,MAAM,CAACF,KAAK,CAACC,GAAN,EAAD,CAAN;AACD;AACF,OAVS,EAUP,GAVO,CAAV,CAT0B,CAqB1B;;AACAC,MAAAA,MAAM,CAACF,KAAK,CAACC,GAAN,EAAD,CAAN;AACD;AACF,GA1BD;;AA2BA,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACE,QAAC,UAAD;AACE,QAAA,KAAK,EAAE,GADT;AAEE,QAAA,QAAQ,EAAEA,GAFZ;AAGE,QAAA,MAAM,EAAGQ,IAAD,IAAUF,gBAAgB,CAAC;AACjCiB,UAAAA,IAAI,EAAEf,IAAI,CAACgB,YADsB;AAEjCZ,UAAAA,EAAE,EAAEJ,IAAI,CAACiB,YAFwB;AAGjCC,UAAAA,SAAS,EAAE;AAHsB,SAAD;AAHpC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAcE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BACE,QAAC,WAAD;AAAa,QAAA,YAAY,EAAExB,YAA3B;AAAyC,QAAA,KAAK,EAAEH;AAAhD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GAxDQD,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport Chessboard from 'chessboardjsx';\nimport Chess, { ChessInstance } from \"chess.js\";\nimport MoveHistory from './components/MoveHistory';\n\nfunction App() {\n  const [chess] = useState(new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"));\n  const [fen, setFen] = useState(chess.fen());\n  const [movesHistory, setMovesHistory] = useState([]);\n  const [selectedBot, setSelectedBot] = useState();\n\n  const handlePlayerMove = (playerMove) => {\n    // Checks if playermove is valid\n    if (chess.move(playerMove)) {\n      // add move to history\n      const newMovesList = movesHistory;\n      const pieceInfo = chess.get(playerMove.to);\n      const playerMovePiece = { ...playerMove, piece: pieceInfo }\n      newMovesList.push(playerMovePiece);\n      setMovesHistory(newMovesList);\n\n      // computer response random\n      setTimeout(() => {\n        // Get list of valid moves\n        const moves = chess.moves();\n\n        // If valid move is avliable selects random and updates chessboard\n        if (moves.length > 0) {\n          const computerMove = moves[Math.floor(Math.random() * moves.length)];\n          chess.move(computerMove);\n          setFen(chess.fen());\n        }\n      }, 300)\n\n      // update chessboard\n      setFen(chess.fen());\n    }\n  }\n  return (\n    <div className=\"app-container\">\n      <h1>Chess AI</h1>\n      <div className=\"chess-container\">\n        <Chessboard\n          width={400}\n          position={fen}\n          onDrop={(move) => handlePlayerMove({\n            from: move.sourceSquare,\n            to: move.targetSquare,\n            promotion: \"q\",\n          })}\n\n        />\n      </div>\n      <div className=\"utility-container\">\n        <MoveHistory movesHistory={movesHistory} chess={chess} />\n        <div className=\"data-visualization\">\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}