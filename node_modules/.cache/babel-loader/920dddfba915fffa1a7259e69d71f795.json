{"ast":null,"code":"var _jsxFileName = \"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/common/Selection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  button: {\n    display: 'block',\n    marginTop: theme.spacing(2),\n    color: 'white'\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  select: {\n    color: 'white',\n    minWidth: 120\n  }\n}));\n\nconst Selection = props => {\n  _s();\n\n  const {\n    selected,\n    setSelected,\n    allOptions,\n    title\n  } = props;\n  const [open, setOpen] = useState(false);\n  const classes = useStyles();\n\n  const handleChange = event => {\n    setSelected(event.target.value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-bot-container\",\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      className: classes.formControl,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          className: classes.select,\n          id: \"select-label\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"select-label\",\n          id: \"open-select\",\n          open: open,\n          onClose: handleClose,\n          onOpen: handleOpen,\n          value: selected,\n          onChange: handleChange,\n          className: classes.select,\n          children: allOptions && allOptions.map((option, key) => {\n            if (typeof option == \"string\") {\n              return /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: option,\n                children: option\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 40\n              }, this);\n            } else {\n              return /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: option.fen,\n                children: option.name\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 40\n              }, this);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Selection, \"sAdzNhf/eEVWcoR6sLHcRgUAoMI=\", false, function () {\n  return [useStyles];\n});\n\n_c = Selection;\nexport default Selection;\n\nvar _c;\n\n$RefreshReg$(_c, \"Selection\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/common/Selection.js"],"names":["React","useState","makeStyles","InputLabel","MenuItem","FormControl","Select","useStyles","theme","button","display","marginTop","spacing","color","formControl","margin","minWidth","select","Selection","props","selected","setSelected","allOptions","title","open","setOpen","classes","handleChange","event","target","value","handleClose","handleOpen","map","option","key","fen","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        display: 'block',\n        marginTop: theme.spacing(2),\n        color: 'white',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    select: {\n        color: 'white',\n        minWidth: 120,\n    }\n}));\n\nconst Selection = (props) => {\n    const { selected, setSelected, allOptions, title } = props;\n    const [open, setOpen] = useState(false);\n    const classes = useStyles();\n\n    const handleChange = (event) => {\n        setSelected(event.target.value);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    return (\n        <div className=\"select-bot-container\">\n\n            <FormControl className={classes.formControl}>\n                <div>\n                    <InputLabel className={classes.select} id=\"select-label\">{title}</InputLabel>\n                    <Select\n                        labelId=\"select-label\"\n                        id=\"open-select\"\n                        open={open}\n                        onClose={handleClose}\n                        onOpen={handleOpen}\n                        value={selected}\n                        onChange={handleChange}\n                        className={classes.select}\n                    >\n                        {allOptions && allOptions.map((option, key) => {\n                            if (typeof (option) == \"string\") {\n                                return <MenuItem key={key} value={option}>{option}</MenuItem>\n\n                            }\n                            else {\n                                return <MenuItem key={key} value={option.fen}>{option.name}</MenuItem>\n                            }\n                        })}\n                    </Select>\n                </div>\n            </FormControl>\n        </div>\n    )\n}\n\nexport default Selection\n"]},"metadata":{},"sourceType":"module"}