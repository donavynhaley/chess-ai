{"ast":null,"code":"var _jsxFileName = \"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/pages/Game/DataVisualization.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TreeVisualization from './TreeVisualization';\nimport SimpleModal from '../../common/SimpleModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DataVisualization = props => {\n  _s();\n\n  const {\n    selectedBot,\n    randomBotAvaliableMoves,\n    allBots,\n    evalCount\n  } = props;\n  const [openModal, setOpenModal] = useState(false);\n\n  const handleClose = () => {\n    setOpenModal(false);\n  };\n\n  const randomBot = () => {\n    const listAvaliableMoves = randomBotAvaliableMoves.map(move => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: move\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SimpleModal, {\n        openModal: openModal,\n        setOpenModal: setOpenModal,\n        title: \"Tree\",\n        desc: /*#__PURE__*/_jsxDEV(TreeVisualization, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 101\n        }, this),\n        onClick: handleClose,\n        buttonText: \"Close Modal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Selecting random from avaliable moves\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"avaliable-moves\",\n        children: listAvaliableMoves && listAvaliableMoves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  };\n\n  const miniMaxBot = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: `Postions Evaluated: ${evalCount.toLocaleString()}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        color: \"secondary\",\n        children: \"See Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }; // updates return based on what bot is selected. \n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-visualization\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), allBots[0] === selectedBot ? randomBot() : null, allBots[1] === selectedBot || allBots[2] === selectedBot ? miniMaxBot() : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DataVisualization, \"uYk1wngonhmNAAo8U/frFfYvuzQ=\");\n\n_c = DataVisualization;\nexport default DataVisualization;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/pages/Game/DataVisualization.js"],"names":["React","useState","Button","TreeVisualization","SimpleModal","DataVisualization","props","selectedBot","randomBotAvaliableMoves","allBots","evalCount","openModal","setOpenModal","handleClose","randomBot","listAvaliableMoves","map","move","miniMaxBot","toLocaleString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;;;AACA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,uBAAf;AAAwCC,IAAAA,OAAxC;AAAiDC,IAAAA;AAAjD,MAA+DJ,KAArE;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMY,WAAW,GAAG,MAAM;AACtBD,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAFD;;AAGA,QAAME,SAAS,GAAG,MAAM;AACpB,UAAMC,kBAAkB,GAAGP,uBAAuB,CAACQ,GAAxB,CAA6BC,IAAD,IAAU;AAC7D,0BAAO;AAAA,kBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAF0B,CAA3B;AAGA,wBACI;AAAA,8BACI,QAAC,WAAD;AAAa,QAAA,SAAS,EAAEN,SAAxB;AAAmC,QAAA,YAAY,EAAEC,YAAjD;AAA+D,QAAA,KAAK,EAAE,MAAtE;AAA8E,QAAA,IAAI,eAAE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,gBAApF;AAA2G,QAAA,OAAO,EAAEC,WAApH;AAAiI,QAAA,UAAU,EAAC;AAA5I;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA,kBACKE,kBAAkB,IAAIA;AAD3B;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA,oBADJ;AASH,GAbD;;AAcA,QAAMG,UAAU,GAAG,MAAM;AACrB,wBACI;AAAA,8BACI;AAAA,kBAAK,uBAAsBR,SAAS,CAACS,cAAV,EAA2B;AAAtD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,UAAhB;AAA2B,QAAA,KAAK,EAAC,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,oBADJ;AASH,GAVD,CArBiC,CAgCjC;;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKV,OAAO,CAAC,CAAD,CAAP,KAAeF,WAAf,GAA6BO,SAAS,EAAtC,GAA2C,IAFhD,EAGKL,OAAO,CAAC,CAAD,CAAP,KAAeF,WAAf,IAA8BE,OAAO,CAAC,CAAD,CAAP,KAAeF,WAA7C,GAA2DW,UAAU,EAArE,GAA0E,IAH/E;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAxCD;;GAAMb,iB;;KAAAA,iB;AA0CN,eAAeA,iBAAf","sourcesContent":["import React, { useState } from 'react'\nimport Button from '@material-ui/core/Button';\nimport TreeVisualization from './TreeVisualization';\nimport SimpleModal from '../../common/SimpleModel'\nconst DataVisualization = (props) => {\n    const { selectedBot, randomBotAvaliableMoves, allBots, evalCount } = props;\n    const [openModal, setOpenModal] = useState(false);\n\n    const handleClose = () => {\n        setOpenModal(false)\n    }\n    const randomBot = () => {\n        const listAvaliableMoves = randomBotAvaliableMoves.map((move) => {\n            return <li>{move}</li>\n        })\n        return (\n            <>\n                <SimpleModal openModal={openModal} setOpenModal={setOpenModal} title={\"Tree\"} desc={<TreeVisualization />} onClick={handleClose} buttonText=\"Close Modal\" />\n                <p>Selecting random from avaliable moves</p>\n                <ul className=\"avaliable-moves\">\n                    {listAvaliableMoves && listAvaliableMoves}\n                </ul>\n            </>\n        )\n    }\n    const miniMaxBot = () => {\n        return (\n            <>\n                <p>{`Postions Evaluated: ${evalCount.toLocaleString()}`}</p>\n                <Button variant=\"outlined\" color=\"secondary\">\n                    See Tree\n                </Button>\n            </>\n        )\n\n    }\n    // updates return based on what bot is selected. \n    return (\n        <div className=\"data-visualization\">\n            <h2>Data Visualization</h2>\n            {allBots[0] === selectedBot ? randomBot() : null}\n            {allBots[1] === selectedBot || allBots[2] === selectedBot ? miniMaxBot() : null}\n        </div>\n    )\n}\n\nexport default DataVisualization\n"]},"metadata":{},"sourceType":"module"}