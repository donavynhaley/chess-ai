{"ast":null,"code":"import Chess from \"chess.js\";\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\n\nlet pieceValues = new Map();\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\n\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n  const chessCopy = new Chess(chess.fen()); // computer response random\n\n  setTimeout(() => {\n    // Get list of valid moves\n    const moves = chessCopy.moves();\n    getBoardEvaluation(chessCopy.board()); // update state for data vizualization\n    // setRandomBotAvaliableMoves(moves);\n    // // If valid move is avaliable selects random and updates chessboard\n    // if (moves.length > 0) {\n    //     const computerMove = moves[Math.floor(Math.random() * moves.length)];\n    //     chess.move(computerMove);\n    //     // add move to history\n    //     updateComputerHistory(computerMove);\n    //     // update chessboard\n    //     setFen(chess.fen());\n    // }\n  }, 300);\n};\n\n_c = MiniMax;\n\nconst getBoardEvaluation = board => {\n  console.log(board);\n  let count = 0;\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      let piece = board[i][j].type;\n      let color = board[i][j].color;\n      if (piece === null) return;\n\n      if (color === 'b') {\n        count += pieceValues[piece];\n      } else {\n        count -= pieceValues[piece];\n      }\n    }\n  }\n\n  console.log(count);\n};\n\nexport default MiniMax;\n\nvar _c;\n\n$RefreshReg$(_c, \"MiniMax\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/bots/MiniMax.js"],"names":["Chess","pieceValues","Map","MiniMax","chess","updateComputerHistory","setRandomBotAvaliableMoves","setFen","chessCopy","fen","setTimeout","moves","getBoardEvaluation","board","console","log","count","i","length","j","piece","type","color"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAG,IAAIC,GAAJ,EAAlB;AACAD,WAAW,CAAC,GAAD,CAAX,GAAmB,GAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,GAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,GAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,IAAnB;AACAA,WAAW,CAAC,GAAD,CAAX,GAAmB,IAAnB;;AAEA,MAAME,OAAO,GAAG,CAACC,KAAD,EAAQC,qBAAR,EAA+BC,0BAA/B,EAA2DC,MAA3D,KAAsE;AAClF,QAAMC,SAAS,GAAG,IAAIR,KAAJ,CAAUI,KAAK,CAACK,GAAN,EAAV,CAAlB,CADkF,CAGlF;;AACAC,EAAAA,UAAU,CAAC,MAAM;AAEb;AACA,UAAMC,KAAK,GAAGH,SAAS,CAACG,KAAV,EAAd;AACAC,IAAAA,kBAAkB,CAACJ,SAAS,CAACK,KAAV,EAAD,CAAlB,CAJa,CAKb;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACH,GAnBS,EAmBP,GAnBO,CAAV;AAoBH,CAxBD;;KAAMV,O;;AAyBN,MAAMS,kBAAkB,GAAIC,KAAD,IAAW;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,MAAIG,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACI,CAAD,CAAL,CAASC,MAA7B,EAAqCC,CAAC,EAAtC,EAA0C;AACtC,UAAIC,KAAK,GAAGP,KAAK,CAACI,CAAD,CAAL,CAASE,CAAT,EAAYE,IAAxB;AACA,UAAIC,KAAK,GAAGT,KAAK,CAACI,CAAD,CAAL,CAASE,CAAT,EAAYG,KAAxB;AACA,UAAIF,KAAK,KAAK,IAAd,EACI;;AACJ,UAAIE,KAAK,KAAK,GAAd,EAAmB;AACfN,QAAAA,KAAK,IAAIf,WAAW,CAACmB,KAAD,CAApB;AACH,OAFD,MAGK;AACDJ,QAAAA,KAAK,IAAIf,WAAW,CAACmB,KAAD,CAApB;AACH;AACJ;AACJ;;AACDN,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH,CAlBD;;AAoBA,eAAeb,OAAf","sourcesContent":["import Chess from \"chess.js\";\n\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\nlet pieceValues = new Map()\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\n\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n    const chessCopy = new Chess(chess.fen());\n\n    // computer response random\n    setTimeout(() => {\n\n        // Get list of valid moves\n        const moves = chessCopy.moves();\n        getBoardEvaluation(chessCopy.board())\n        // update state for data vizualization\n        // setRandomBotAvaliableMoves(moves);\n\n        // // If valid move is avaliable selects random and updates chessboard\n        // if (moves.length > 0) {\n        //     const computerMove = moves[Math.floor(Math.random() * moves.length)];\n        //     chess.move(computerMove);\n\n        //     // add move to history\n        //     updateComputerHistory(computerMove);\n\n        //     // update chessboard\n        //     setFen(chess.fen());\n        // }\n    }, 300)\n}\nconst getBoardEvaluation = (board) => {\n    console.log(board)\n    let count = 0;\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            let piece = board[i][j].type\n            let color = board[i][j].color\n            if (piece === null)\n                return\n            if (color === 'b') {\n                count += pieceValues[piece]\n            }\n            else {\n                count -= pieceValues[piece]\n            }\n        }\n    }\n    console.log(count)\n}\n\nexport default MiniMax\n"]},"metadata":{},"sourceType":"module"}