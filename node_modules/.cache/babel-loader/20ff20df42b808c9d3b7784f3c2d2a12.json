{"ast":null,"code":"var _jsxFileName = \"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Chessboard from 'chessboardjsx';\nimport Chess from \"chess.js\";\nimport MoveHistory from './components/MoveHistory';\nimport DataVisualization from './components/DataVisualization';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [chess] = useState(new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"));\n  const [fen, setFen] = useState(chess.fen());\n  const [movesHistory, setMovesHistory] = useState([]);\n  const [selectedBot, setSelectedBot] = useState();\n  const [gameOverText, setGameOverText] = useState('');\n  const [randomBotAvaliableMoves, setRandomBotAvaliableMoves] = useState([]);\n  const [boardSize, setBoardSize] = useState(460);\n  const ref = useRef(null);\n  useEffect(() => {\n    console.log(ref.current);\n    setBoardSize(ref.current.offsetWidth);\n  }, []); // Add playermove to history\n\n  const updatePlayerHistory = newMove => {\n    const currentMovesHistory = movesHistory;\n    const pieceType = chess.get(newMove.to).type.toUpperCase();\n    let move; // do not display pawn\n\n    if (pieceType === \"P\") {\n      move = {\n        playerMove: `${newMove.to}`\n      };\n    } else {\n      move = {\n        playerMove: `${pieceType}${newMove.to}`\n      };\n    }\n\n    currentMovesHistory.push(move);\n    setMovesHistory(currentMovesHistory);\n  }; // Add computer move to history\n\n\n  const updateComputerHistory = computerMove => {\n    const currentMove = movesHistory[movesHistory.length - 1];\n    const newMove = { ...currentMove,\n      computerMove: computerMove\n    };\n    movesHistory[movesHistory.length - 1] = newMove;\n  };\n\n  const handlePlayerMove = playerMove => {\n    // Checks if playermove is valid\n    if (chess.move(playerMove)) {\n      // add move to history\n      updatePlayerHistory(playerMove); // computer response random\n\n      setTimeout(() => {\n        // Get list of valid moves\n        const moves = chess.moves(); // update state for data vizualization\n\n        setRandomBotAvaliableMoves(moves); // If valid move is avaliable selects random and updates chessboard\n\n        if (moves.length > 0) {\n          const computerMove = moves[Math.floor(Math.random() * moves.length)];\n          chess.move(computerMove); // add move to history\n\n          updateComputerHistory(computerMove); // update chessboard\n\n          setFen(chess.fen());\n        }\n      }, 300); // update chessboard\n\n      setFen(chess.fen());\n    }\n  };\n\n  const resetGame = () => {};\n\n  const handleGameOver = () => {\n    // Check how game ended\n    if (chess.in_checkmate()) {\n      setGameOverText(\"Checkmate\");\n    }\n\n    if (chess.in_draw()) {\n      setGameOverText(\"Draw\");\n    }\n\n    if (chess.in_stalemate()) {\n      setGameOverText(\"Stalemate\");\n    }\n\n    if (chess.in_threefold_repetition()) {\n      setGameOverText(\"Threefold Repetition\");\n    }\n\n    if (chess.insufficient_material()) {\n      setGameOverText(\"Insufficient Material\");\n    } // Modal Logic\n\n\n    const modal = document.querySelector(\".modal\");\n    const closeBtn = document.querySelector(\".close\");\n    modal.style.display = \"block\";\n    closeBtn.addEventListener(\"click\", () => {\n      modal.style.display = \"none\";\n    });\n  }; // Check for win\n\n\n  if (chess.game_over()) {\n    handleGameOver();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"close\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-text\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Game Over\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: gameOverText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => {\n              resetGame();\n            },\n            children: \"Play Again?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chess-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Chess AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ref,\n        className: \"chessboard-container\",\n        children: /*#__PURE__*/_jsxDEV(Chessboard, {\n          width: boardSize,\n          position: fen,\n          onDrop: move => handlePlayerMove({\n            from: move.sourceSquare,\n            to: move.targetSquare,\n            promotion: \"q\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"utility-container\",\n      children: [/*#__PURE__*/_jsxDEV(MoveHistory, {\n        movesHistory: movesHistory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DataVisualization, {\n        selectedBot: selectedBot,\n        randomBotAvaliableMoves: randomBotAvaliableMoves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"7y6meKkxfP32BCKzoyYcfqdHJdk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/App.js"],"names":["React","useState","useEffect","useRef","Chessboard","Chess","MoveHistory","DataVisualization","App","chess","fen","setFen","movesHistory","setMovesHistory","selectedBot","setSelectedBot","gameOverText","setGameOverText","randomBotAvaliableMoves","setRandomBotAvaliableMoves","boardSize","setBoardSize","ref","console","log","current","offsetWidth","updatePlayerHistory","newMove","currentMovesHistory","pieceType","get","to","type","toUpperCase","move","playerMove","push","updateComputerHistory","computerMove","currentMove","length","handlePlayerMove","setTimeout","moves","Math","floor","random","resetGame","handleGameOver","in_checkmate","in_draw","in_stalemate","in_threefold_repetition","insufficient_material","modal","document","querySelector","closeBtn","style","display","addEventListener","game_over","e","from","sourceSquare","targetSquare","promotion"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;AAEA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,IAAUR,QAAQ,CAAC,IAAII,KAAJ,CAAU,0DAAV,CAAD,CAAxB;AACA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,CAACQ,KAAK,CAACC,GAAN,EAAD,CAA9B;AACA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,EAA9C;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACiB,uBAAD,EAA0BC,0BAA1B,IAAwDlB,QAAQ,CAAC,EAAD,CAAtE;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC,GAAD,CAA1C;AACA,QAAMqB,GAAG,GAAGnB,MAAM,CAAC,IAAD,CAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACAJ,IAAAA,YAAY,CAACC,GAAG,CAACG,OAAJ,CAAYC,WAAb,CAAZ;AACD,GAHQ,EAGN,EAHM,CAAT,CAVa,CAgBb;;AACA,QAAMC,mBAAmB,GAAIC,OAAD,IAAa;AACvC,UAAMC,mBAAmB,GAAGjB,YAA5B;AACA,UAAMkB,SAAS,GAAGrB,KAAK,CAACsB,GAAN,CAAUH,OAAO,CAACI,EAAlB,EAAsBC,IAAtB,CAA2BC,WAA3B,EAAlB;AACA,QAAIC,IAAJ,CAHuC,CAKvC;;AACA,QAAIL,SAAS,KAAK,GAAlB,EAAuB;AACrBK,MAAAA,IAAI,GAAG;AAAEC,QAAAA,UAAU,EAAG,GAAER,OAAO,CAACI,EAAG;AAA5B,OAAP;AACD,KAFD,MAGK;AACHG,MAAAA,IAAI,GAAG;AAAEC,QAAAA,UAAU,EAAG,GAAEN,SAAU,GAAEF,OAAO,CAACI,EAAG;AAAxC,OAAP;AACD;;AAEDH,IAAAA,mBAAmB,CAACQ,IAApB,CAAyBF,IAAzB;AACAtB,IAAAA,eAAe,CAACgB,mBAAD,CAAf;AACD,GAfD,CAjBa,CAkCb;;;AACA,QAAMS,qBAAqB,GAAIC,YAAD,IAAkB;AAC9C,UAAMC,WAAW,GAAG5B,YAAY,CAACA,YAAY,CAAC6B,MAAb,GAAsB,CAAvB,CAAhC;AACA,UAAMb,OAAO,GAAG,EAAE,GAAGY,WAAL;AAAkBD,MAAAA,YAAY,EAAEA;AAAhC,KAAhB;AACA3B,IAAAA,YAAY,CAACA,YAAY,CAAC6B,MAAb,GAAsB,CAAvB,CAAZ,GAAwCb,OAAxC;AACD,GAJD;;AAMA,QAAMc,gBAAgB,GAAIN,UAAD,IAAgB;AACvC;AACA,QAAI3B,KAAK,CAAC0B,IAAN,CAAWC,UAAX,CAAJ,EAA4B;AAE1B;AACAT,MAAAA,mBAAmB,CAACS,UAAD,CAAnB,CAH0B,CAK1B;;AACAO,MAAAA,UAAU,CAAC,MAAM;AAEf;AACA,cAAMC,KAAK,GAAGnC,KAAK,CAACmC,KAAN,EAAd,CAHe,CAKf;;AACAzB,QAAAA,0BAA0B,CAACyB,KAAD,CAA1B,CANe,CAQf;;AACA,YAAIA,KAAK,CAACH,MAAN,GAAe,CAAnB,EAAsB;AACpB,gBAAMF,YAAY,GAAGK,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,KAAK,CAACH,MAAjC,CAAD,CAA1B;AACAhC,UAAAA,KAAK,CAAC0B,IAAN,CAAWI,YAAX,EAFoB,CAIpB;;AACAD,UAAAA,qBAAqB,CAACC,YAAD,CAArB,CALoB,CAOpB;;AACA5B,UAAAA,MAAM,CAACF,KAAK,CAACC,GAAN,EAAD,CAAN;AACD;AACF,OAnBS,EAmBP,GAnBO,CAAV,CAN0B,CA2B1B;;AACAC,MAAAA,MAAM,CAACF,KAAK,CAACC,GAAN,EAAD,CAAN;AACD;AACF,GAhCD;;AAiCA,QAAMsC,SAAS,GAAG,MAAM,CAEvB,CAFD;;AAGA,QAAMC,cAAc,GAAG,MAAM;AAC3B;AACA,QAAIxC,KAAK,CAACyC,YAAN,EAAJ,EAA0B;AACxBjC,MAAAA,eAAe,CAAC,WAAD,CAAf;AACD;;AACD,QAAIR,KAAK,CAAC0C,OAAN,EAAJ,EAAqB;AACnBlC,MAAAA,eAAe,CAAC,MAAD,CAAf;AACD;;AACD,QAAIR,KAAK,CAAC2C,YAAN,EAAJ,EAA0B;AACxBnC,MAAAA,eAAe,CAAC,WAAD,CAAf;AACD;;AACD,QAAIR,KAAK,CAAC4C,uBAAN,EAAJ,EAAqC;AACnCpC,MAAAA,eAAe,CAAC,sBAAD,CAAf;AACD;;AACD,QAAIR,KAAK,CAAC6C,qBAAN,EAAJ,EAAmC;AACjCrC,MAAAA,eAAe,CAAC,uBAAD,CAAf;AACD,KAhB0B,CAkB3B;;;AACA,UAAMsC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACA,UAAMC,QAAQ,GAAGF,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAjB;AACAF,IAAAA,KAAK,CAACI,KAAN,CAAYC,OAAZ,GAAsB,OAAtB;AACAF,IAAAA,QAAQ,CAACG,gBAAT,CAA0B,OAA1B,EAAmC,MAAM;AACvCN,MAAAA,KAAK,CAACI,KAAN,CAAYC,OAAZ,GAAsB,MAAtB;AACD,KAFD;AAID,GA1BD,CA7Ea,CAyGb;;;AACA,MAAInD,KAAK,CAACqD,SAAN,EAAJ,EAAuB;AACrBb,IAAAA,cAAc;AACf;;AACD,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACE;AAAK,MAAA,KAAK,EAAC,OAAX;AAAA,6BACE;AAAK,QAAA,KAAK,EAAC,eAAX;AAAA,gCACE;AAAM,UAAA,KAAK,EAAC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAIjC;AAAJ;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAQ,YAAA,OAAO,EAAG+C,CAAD,IAAO;AAAEf,cAAAA,SAAS;AAAI,aAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,GAAG,EAAE1B,GAAV;AAAe,QAAA,SAAS,EAAC,sBAAzB;AAAA,+BACE,QAAC,UAAD;AACE,UAAA,KAAK,EAAEF,SADT;AAEE,UAAA,QAAQ,EAAEV,GAFZ;AAGE,UAAA,MAAM,EAAGyB,IAAD,IAAUO,gBAAgB,CAAC;AACjCsB,YAAAA,IAAI,EAAE7B,IAAI,CAAC8B,YADsB;AAEjCjC,YAAAA,EAAE,EAAEG,IAAI,CAAC+B,YAFwB;AAGjCC,YAAAA,SAAS,EAAE;AAHsB,WAAD;AAHpC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eA0BE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BACE,QAAC,WAAD;AAAa,QAAA,YAAY,EAAEvD;AAA3B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,iBAAD;AAAmB,QAAA,WAAW,EAAEE,WAAhC;AAA6C,QAAA,uBAAuB,EAAEI;AAAtE;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD;;GA9IQV,G;;KAAAA,G;AAgJT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport Chessboard from 'chessboardjsx';\nimport Chess from \"chess.js\";\nimport MoveHistory from './components/MoveHistory';\nimport DataVisualization from './components/DataVisualization';\n\nfunction App() {\n  const [chess] = useState(new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"));\n  const [fen, setFen] = useState(chess.fen());\n  const [movesHistory, setMovesHistory] = useState([]);\n  const [selectedBot, setSelectedBot] = useState();\n  const [gameOverText, setGameOverText] = useState('');\n  const [randomBotAvaliableMoves, setRandomBotAvaliableMoves] = useState([]);\n  const [boardSize, setBoardSize] = useState(460);\n  const ref = useRef(null);\n\n  useEffect(() => {\n    console.log(ref.current);\n    setBoardSize(ref.current.offsetWidth);\n  }, [])\n\n\n  // Add playermove to history\n  const updatePlayerHistory = (newMove) => {\n    const currentMovesHistory = movesHistory;\n    const pieceType = chess.get(newMove.to).type.toUpperCase();\n    let move;\n\n    // do not display pawn\n    if (pieceType === \"P\") {\n      move = { playerMove: `${newMove.to}` }\n    }\n    else {\n      move = { playerMove: `${pieceType}${newMove.to}` }\n    }\n\n    currentMovesHistory.push(move);\n    setMovesHistory(currentMovesHistory);\n  }\n\n  // Add computer move to history\n  const updateComputerHistory = (computerMove) => {\n    const currentMove = movesHistory[movesHistory.length - 1];\n    const newMove = { ...currentMove, computerMove: computerMove }\n    movesHistory[movesHistory.length - 1] = newMove;\n  }\n\n  const handlePlayerMove = (playerMove) => {\n    // Checks if playermove is valid\n    if (chess.move(playerMove)) {\n\n      // add move to history\n      updatePlayerHistory(playerMove);\n\n      // computer response random\n      setTimeout(() => {\n\n        // Get list of valid moves\n        const moves = chess.moves();\n\n        // update state for data vizualization\n        setRandomBotAvaliableMoves(moves);\n\n        // If valid move is avaliable selects random and updates chessboard\n        if (moves.length > 0) {\n          const computerMove = moves[Math.floor(Math.random() * moves.length)];\n          chess.move(computerMove);\n\n          // add move to history\n          updateComputerHistory(computerMove);\n\n          // update chessboard\n          setFen(chess.fen());\n        }\n      }, 300)\n\n      // update chessboard\n      setFen(chess.fen());\n    }\n  }\n  const resetGame = () => {\n\n  }\n  const handleGameOver = () => {\n    // Check how game ended\n    if (chess.in_checkmate()) {\n      setGameOverText(\"Checkmate\")\n    }\n    if (chess.in_draw()) {\n      setGameOverText(\"Draw\")\n    }\n    if (chess.in_stalemate()) {\n      setGameOverText(\"Stalemate\")\n    }\n    if (chess.in_threefold_repetition()) {\n      setGameOverText(\"Threefold Repetition\")\n    }\n    if (chess.insufficient_material()) {\n      setGameOverText(\"Insufficient Material\")\n    }\n\n    // Modal Logic\n    const modal = document.querySelector(\".modal\");\n    const closeBtn = document.querySelector(\".close\");\n    modal.style.display = \"block\";\n    closeBtn.addEventListener(\"click\", () => {\n      modal.style.display = \"none\"\n    })\n\n  }\n\n  // Check for win\n  if (chess.game_over()) {\n    handleGameOver();\n  }\n  return (\n    <div className=\"app-container\">\n      <div class=\"modal\">\n        <div class=\"modal-content\">\n          <span class=\"close\">&times;</span>\n          <div className=\"modal-text\">\n            <h2>Game Over</h2>\n            <p>{gameOverText}</p>\n            <button onClick={(e) => { resetGame() }}>Play Again?</button>\n          </div>\n        </div>\n      </div>\n      <div className=\"chess-container\">\n        <h1>Chess AI</h1>\n        <div ref={ref} className=\"chessboard-container\">\n          <Chessboard\n            width={boardSize}\n            position={fen}\n            onDrop={(move) => handlePlayerMove({\n              from: move.sourceSquare,\n              to: move.targetSquare,\n              promotion: \"q\",\n            })}\n\n          />\n        </div>\n      </div>\n      <div className=\"utility-container\">\n        <MoveHistory movesHistory={movesHistory} />\n        <DataVisualization selectedBot={selectedBot} randomBotAvaliableMoves={randomBotAvaliableMoves} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}