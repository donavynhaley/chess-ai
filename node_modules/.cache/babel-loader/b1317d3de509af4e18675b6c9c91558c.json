{"ast":null,"code":"var _jsxFileName = \"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Chessboard from 'chessboardjsx';\nimport Chess, { ChessInstance } from \"chess.js\";\nimport MoveHistory from './components/MoveHistory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [chess] = useState(new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"));\n  const [fen, setFen] = useState(chess.fen());\n  const [movesHistory, setMovesHistory] = useState([]);\n  const [selectedBot, setSelectedBot] = useState();\n  const ref = useRef(null);\n  useEffect(() => {\n    console.log('width', ref.current ? ref.current.offsetWidth : 0);\n  }, [ref.current]); // add move to history\n\n  const updateHistory = newMove => {\n    const currentMovesHistory = movesHistory;\n    const pieceType = chess.get(newMove.to).type.toUpperCase();\n    let move; // do not display pawn\n\n    if (pieceType === \"P\") {\n      move = `${newMove.to}`;\n    } else {\n      move = `${pieceType}${newMove.to}`;\n    }\n\n    currentMovesHistory.push(move);\n    setMovesHistory(currentMovesHistory);\n  };\n\n  const handlePlayerMove = playerMove => {\n    // Checks if playermove is valid\n    if (chess.move(playerMove)) {\n      // add move to history\n      updateHistory(playerMove); // computer response random\n\n      setTimeout(() => {\n        // Get list of valid moves\n        const moves = chess.moves(); // If valid move is avaliable selects random and updates chessboard\n\n        if (moves.length > 0) {\n          const computerMove = moves[Math.floor(Math.random() * moves.length)];\n          chess.move(computerMove); // add move to history\n\n          const currentMovesHistory = movesHistory;\n          currentMovesHistory.push(computerMove); // update chessboard\n\n          setFen(chess.fen());\n        }\n      }, 300); // update chessboard\n\n      setFen(chess.fen());\n    }\n  };\n\n  const setBoardSize = (width, height) => {\n    return 70;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref,\n      className: \"chess-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Chess AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n        calcWidth: (screenWidth, screenHeight) => setBoardSize(screenWidth, screenHeight),\n        position: fen,\n        onDrop: move => handlePlayerMove({\n          from: move.sourceSquare,\n          to: move.targetSquare,\n          promotion: \"q\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"utility-container\",\n      children: [/*#__PURE__*/_jsxDEV(MoveHistory, {\n        movesHistory: movesHistory,\n        chess: chess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"eezzPWzeuJhkvkgStCS4VHRoseE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/App.js"],"names":["React","useState","useRef","useEffect","Chessboard","Chess","ChessInstance","MoveHistory","App","chess","fen","setFen","movesHistory","setMovesHistory","selectedBot","setSelectedBot","ref","console","log","current","offsetWidth","updateHistory","newMove","currentMovesHistory","pieceType","get","to","type","toUpperCase","move","push","handlePlayerMove","playerMove","setTimeout","moves","length","computerMove","Math","floor","random","setBoardSize","width","height","screenWidth","screenHeight","from","sourceSquare","targetSquare","promotion"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport Chessboard from 'chessboardjsx';\nimport Chess, { ChessInstance } from \"chess.js\";\nimport MoveHistory from './components/MoveHistory';\n\nfunction App() {\n  const [chess] = useState(new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"));\n  const [fen, setFen] = useState(chess.fen());\n  const [movesHistory, setMovesHistory] = useState([]);\n  const [selectedBot, setSelectedBot] = useState();\n  const ref = useRef(null);\n\n  useEffect(() => {\n    console.log('width', ref.current ? ref.current.offsetWidth : 0);\n  }, [ref.current]);\n\n  // add move to history\n  const updateHistory = (newMove) => {\n    const currentMovesHistory = movesHistory;\n    const pieceType = chess.get(newMove.to).type.toUpperCase();\n    let move;\n    // do not display pawn\n    if (pieceType === \"P\") {\n      move = `${newMove.to}`\n    }\n    else {\n      move = `${pieceType}${newMove.to}`\n    }\n    currentMovesHistory.push(move);\n    setMovesHistory(currentMovesHistory);\n  }\n\n  const handlePlayerMove = (playerMove) => {\n    // Checks if playermove is valid\n    if (chess.move(playerMove)) {\n      // add move to history\n      updateHistory(playerMove);\n\n      // computer response random\n      setTimeout(() => {\n        // Get list of valid moves\n        const moves = chess.moves();\n\n        // If valid move is avaliable selects random and updates chessboard\n        if (moves.length > 0) {\n          const computerMove = moves[Math.floor(Math.random() * moves.length)];\n          chess.move(computerMove);\n\n          // add move to history\n          const currentMovesHistory = movesHistory;\n          currentMovesHistory.push(computerMove);\n          // update chessboard\n          setFen(chess.fen());\n        }\n      }, 300)\n\n      // update chessboard\n      setFen(chess.fen());\n    }\n  }\n\n\n  const setBoardSize = (width, height) => {\n    return 70;\n  }\n  return (\n    <div className=\"app-container\">\n      <div ref={ref} className=\"chess-container\">\n        <h1>Chess AI</h1>\n        <Chessboard\n          calcWidth={(screenWidth, screenHeight) => setBoardSize(screenWidth, screenHeight)}\n          position={fen}\n          onDrop={(move) => handlePlayerMove({\n            from: move.sourceSquare,\n            to: move.targetSquare,\n            promotion: \"q\",\n          })}\n\n        />\n      </div>\n      <div className=\"utility-container\">\n        <MoveHistory movesHistory={movesHistory} chess={chess} />\n\n        <div className=\"data-visualization\">\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}