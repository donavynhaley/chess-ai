{"ast":null,"code":"import Chess from \"chess.js\";\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\n\nlet pieceValues = new Map();\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, originalFen, isMax) => {\n  if (depth === 0) {\n    return null;\n  }\n\n  const moves = chessCopy.moves();\n  let bestMove = moves[0];\n\n  if (isMax) {\n    let maxEval = -Infinity;\n\n    for (let move in moves) {\n      chessCopy.move(move);\n      let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, originalFen, false);\n      chessCopy.undo();\n\n      if (currentEval > maxEval) {\n        maxEval = currentEval;\n        bestMove = move;\n      }\n    }\n\n    return bestMove;\n  } else {\n    let minEval = Infinity;\n\n    for (let move in moves) {\n      chessCopy.move(move);\n      let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, originalFen, true);\n      chessCopy.undo();\n\n      if (currentEval < minEval) {\n        minEval = currentEval;\n        bestMove = move;\n      }\n    }\n\n    return bestMove;\n  }\n};\n\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n  const originalFen = chess.fen();\n  const allEval = [];\n  const chessCopy = new Chess(chess.fen());\n  allEval.push({\n    score: getBoardEvaluation(chess.board),\n    move: 'origninal',\n    depth: 2\n  }); // computer response random\n\n  setTimeout(() => {\n    // Get list of valid moves and adds evaluation for each possible move to list\n    const moves = chessCopy.moves();\n    const bestMove = miniMaxRecursive(chessCopy, 2, allEval, originalFen, true);\n    console.log(bestMove); // update state for data vizualization\n    // setRandomBotAvaliableMoves(moves);\n    // If valid move is avaliable selects random and updates chessboard\n\n    if (moves.length > 0) {\n      const computerMove = moves[Math.floor(Math.random() * moves.length)];\n      chess.move(computerMove); // add move to history\n\n      updateComputerHistory(computerMove); // update chessboard\n\n      setFen(chess.fen());\n    }\n  }, 300);\n};\n\n_c = MiniMax;\n\nconst getBoardEvaluation = board => {\n  let count = 0;\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] === null) continue;\n      let piece = board[i][j].type;\n      let color = board[i][j].color;\n\n      if (color === 'b') {\n        count += pieceValues[piece];\n      } else {\n        count -= pieceValues[piece];\n      }\n    }\n  }\n\n  return count;\n};\n\nexport default MiniMax;\n\nvar _c;\n\n$RefreshReg$(_c, \"MiniMax\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/bots/MiniMax.js"],"names":["Chess","pieceValues","Map","miniMaxRecursive","chessCopy","depth","allEval","originalFen","isMax","moves","bestMove","maxEval","Infinity","move","currentEval","undo","minEval","MiniMax","chess","updateComputerHistory","setRandomBotAvaliableMoves","setFen","fen","push","score","getBoardEvaluation","board","setTimeout","console","log","length","computerMove","Math","floor","random","count","i","j","piece","type","color"],"mappings":"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","sourcesContent":["import Chess from \"chess.js\";\n\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\nlet pieceValues = new Map()\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, originalFen, isMax) => {\n    if (depth === 0) {\n        return null;\n    }\n\n    const moves = chessCopy.moves();\n    let bestMove = moves[0];\n\n    if (isMax) {\n        let maxEval = -Infinity;\n        for (let move in moves) {\n            chessCopy.move(move)\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, originalFen, false);\n            chessCopy.undo();\n            if (currentEval > maxEval) {\n                maxEval = currentEval;\n                bestMove = move;\n            }\n        }\n        return bestMove;\n\n    }\n    else {\n        let minEval = Infinity;\n        for (let move in moves) {\n            chessCopy.move(move)\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, originalFen, true);\n            chessCopy.undo()\n            if (currentEval < minEval) {\n                minEval = currentEval;\n                bestMove = move;\n            }\n        }\n        return bestMove\n    }\n\n}\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n    const originalFen = chess.fen();\n    const allEval = []\n    const chessCopy = new Chess(chess.fen());\n    allEval.push({ score: getBoardEvaluation(chess.board), move: 'origninal', depth: 2 })\n    // computer response random\n    setTimeout(() => {\n        // Get list of valid moves and adds evaluation for each possible move to list\n        const moves = chessCopy.moves();\n        const bestMove = miniMaxRecursive(chessCopy, 2, allEval, originalFen, true)\n        console.log(bestMove)\n        // update state for data vizualization\n        // setRandomBotAvaliableMoves(moves);\n\n        // If valid move is avaliable selects random and updates chessboard\n        if (moves.length > 0) {\n            const computerMove = moves[Math.floor(Math.random() * moves.length)];\n            chess.move(computerMove);\n\n            // add move to history\n            updateComputerHistory(computerMove);\n\n            // update chessboard\n            setFen(chess.fen());\n        }\n    }, 300)\n}\nconst getBoardEvaluation = (board) => {\n    let count = 0;\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (board[i][j] === null)\n                continue\n            let piece = board[i][j].type\n            let color = board[i][j].color\n            if (color === 'b') {\n                count += pieceValues[piece]\n            }\n            else {\n                count -= pieceValues[piece]\n            }\n        }\n    }\n    return count\n}\n\nexport default MiniMax\n"]},"metadata":{},"sourceType":"module"}