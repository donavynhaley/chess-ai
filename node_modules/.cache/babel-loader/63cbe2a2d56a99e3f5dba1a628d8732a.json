{"ast":null,"code":"var _jsxFileName = \"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/pages/Game/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport Chess from \"chess.js\";\nimport MoveHistory from './MoveHistory';\nimport DataVisualization from './DataVisualization';\nimport NavBar from '../../common/NavBar';\nimport randomBot from '../../bots/randomBot';\nimport MiniMax from '../../bots/MiniMax';\nimport SimpleModal from '../../common/SimpleModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst startingFen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\nconst allBots = [\"Random\", \"MiniMax\", \"AlphaBeta\", \"Stockfish\"];\nconst allStartingPositions = [{\n  name: \"Start\",\n  fen: startingFen\n}, {\n  name: \"Caro-Kann Defense\",\n  fen: \"rnbqkbnr/pp1ppppp/2p5/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\"\n}, {\n  name: \"Pirc Defense\",\n  fen: \"rnbqkbnr/ppp1pppp/3p4/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\"\n}, {\n  name: \"Sicilian Defense\",\n  fen: \"rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 1\"\n}, {\n  name: \"French Defense\",\n  fen: \"rnbqkbnr/pppp1ppp/4p3/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\"\n}];\n\nfunction Game() {\n  _s();\n\n  const [chess] = useState(new Chess(startingFen));\n  const [fen, setFen] = useState(chess.fen());\n  const [movesHistory, setMovesHistory] = useState([]);\n  const [selectedBot, setSelectedBot] = useState(allBots[1]);\n  const [selectedPos, setSelectedPos] = useState(allStartingPositions[0].fen);\n  const [gameOverText, setGameOverText] = useState('');\n  const [randomBotAvaliableMoves, setRandomBotAvaliableMoves] = useState([\"\"]);\n  const [boardSize, setBoardSize] = useState(460);\n  const [openModal, setOpenModal] = useState(false);\n  const ref = useRef(null);\n  useEffect(() => {\n    console.log(ref.current.offsetWidth);\n    setBoardSize(ref.current.offsetWidth);\n  }, []);\n  useEffect(() => {\n    resetGame();\n  }, [selectedPos]);\n  useEffect(() => {\n    // Check for win\n    if (chess.game_over()) {\n      handleGameOver();\n    }\n  }); // Add playermove to history\n\n  const updatePlayerHistory = newMove => {\n    const currentMovesHistory = movesHistory;\n    const pieceType = chess.get(newMove.to).type.toUpperCase();\n    let move; // do not display pawn\n\n    if (pieceType === \"P\") {\n      move = {\n        playerMove: `${newMove.to}`\n      };\n    } else {\n      move = {\n        playerMove: `${pieceType}${newMove.to}`\n      };\n    }\n\n    currentMovesHistory.push(move);\n    setMovesHistory(currentMovesHistory);\n  }; // Add computer move to history\n\n\n  const updateComputerHistory = computerMove => {\n    const currentMove = movesHistory[movesHistory.length - 1];\n    const newMove = { ...currentMove,\n      computerMove: computerMove\n    };\n    movesHistory[movesHistory.length - 1] = newMove;\n  }; // Handles player move and calls bots move\n\n\n  const handlePlayerMove = playerMove => {\n    // Checks if playermove is valid\n    if (chess.move(playerMove)) {\n      // add move to history\n      updatePlayerHistory(playerMove); // update chessboard\n\n      setFen(chess.fen()); // computer response random\n\n      if (selectedBot === allBots[0]) {\n        randomBot(chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen);\n      } else if (selectedBot === allBots[1]) {\n        MiniMax(chess, updateComputerHistory, setFen);\n      }\n    }\n  };\n\n  const resetGame = () => {\n    // reset board and game\n    setFen(selectedPos);\n    chess.load(selectedPos);\n    setMovesHistory([]);\n    setOpenModal(false);\n  };\n\n  const handleGameOver = () => {\n    // Check how game ended\n    if (chess.in_checkmate()) {\n      setGameOverText(\"Checkmate\");\n    }\n\n    if (chess.in_draw()) {\n      setGameOverText(\"Draw\");\n    }\n\n    if (chess.in_stalemate()) {\n      setGameOverText(\"Stalemate\");\n    }\n\n    if (chess.in_threefold_repetition()) {\n      setGameOverText(\"Threefold Repetition\");\n    }\n\n    if (chess.insufficient_material()) {\n      setGameOverText(\"Insufficient Material\");\n    } // Open game over modal\n\n\n    setOpenModal(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      selectedBot: selectedBot,\n      setSelectedBot: setSelectedBot,\n      allBots: allBots,\n      selectedPos: selectedPos,\n      setSelectedPos: setSelectedPos,\n      allStartingPositions: allStartingPositions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(SimpleModal, {\n        openModal: openModal,\n        setOpenModal: setOpenModal,\n        resetGame: resetGame,\n        title: \"Game Over\",\n        desc: `The game ended with a ${gameOverText}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chess-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: ref,\n          className: \"chessboard-container\",\n          children: /*#__PURE__*/_jsxDEV(Chessboard, {\n            width: boardSize,\n            position: fen,\n            onDrop: move => handlePlayerMove({\n              from: move.sourceSquare,\n              to: move.targetSquare,\n              promotion: \"q\"\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"utility-container\",\n        children: [/*#__PURE__*/_jsxDEV(MoveHistory, {\n          movesHistory: movesHistory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DataVisualization, {\n          selectedBot: selectedBot,\n          randomBotAvaliableMoves: randomBotAvaliableMoves,\n          allBots: allBots\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Game, \"K2ypANlREXTyRC9zxs+HvzZTcxc=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/pages/Game/Game.js"],"names":["React","useState","useEffect","useRef","Chessboard","Chess","MoveHistory","DataVisualization","NavBar","randomBot","MiniMax","SimpleModal","startingFen","allBots","allStartingPositions","name","fen","Game","chess","setFen","movesHistory","setMovesHistory","selectedBot","setSelectedBot","selectedPos","setSelectedPos","gameOverText","setGameOverText","randomBotAvaliableMoves","setRandomBotAvaliableMoves","boardSize","setBoardSize","openModal","setOpenModal","ref","console","log","current","offsetWidth","resetGame","game_over","handleGameOver","updatePlayerHistory","newMove","currentMovesHistory","pieceType","get","to","type","toUpperCase","move","playerMove","push","updateComputerHistory","computerMove","currentMove","length","handlePlayerMove","load","in_checkmate","in_draw","in_stalemate","in_threefold_repetition","insufficient_material","from","sourceSquare","targetSquare","promotion"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;;AAEA,MAAMC,WAAW,GAAG,0DAApB;AACA,MAAMC,OAAO,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,WAAtB,EAAmC,WAAnC,CAAhB;AACA,MAAMC,oBAAoB,GAAG,CACzB;AAAEC,EAAAA,IAAI,EAAE,OAAR;AAAiBC,EAAAA,GAAG,EAAEJ;AAAtB,CADyB,EAEzB;AAAEG,EAAAA,IAAI,EAAE,mBAAR;AAA6BC,EAAAA,GAAG,EAAE;AAAlC,CAFyB,EAGzB;AAAED,EAAAA,IAAI,EAAE,cAAR;AAAwBC,EAAAA,GAAG,EAAE;AAA7B,CAHyB,EAIzB;AAAED,EAAAA,IAAI,EAAE,kBAAR;AAA4BC,EAAAA,GAAG,EAAE;AAAjC,CAJyB,EAKzB;AAAED,EAAAA,IAAI,EAAE,gBAAR;AAA0BC,EAAAA,GAAG,EAAE;AAA/B,CALyB,CAA7B;;AAOA,SAASC,IAAT,GAAgB;AAAA;;AACZ,QAAM,CAACC,KAAD,IAAUjB,QAAQ,CAAC,IAAII,KAAJ,CAAUO,WAAV,CAAD,CAAxB;AACA,QAAM,CAACI,GAAD,EAAMG,MAAN,IAAgBlB,QAAQ,CAACiB,KAAK,CAACF,GAAN,EAAD,CAA9B;AACA,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAACY,OAAO,CAAC,CAAD,CAAR,CAA9C;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCxB,QAAQ,CAACa,oBAAoB,CAAC,CAAD,CAApB,CAAwBE,GAAzB,CAA9C;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkC1B,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAAC2B,uBAAD,EAA0BC,0BAA1B,IAAwD5B,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAtE;AACA,QAAM,CAAC6B,SAAD,EAAYC,YAAZ,IAA4B9B,QAAQ,CAAC,GAAD,CAA1C;AACA,QAAM,CAAC+B,SAAD,EAAYC,YAAZ,IAA4BhC,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMiC,GAAG,GAAG/B,MAAM,CAAC,IAAD,CAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZiC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAJ,CAAYC,WAAxB;AACAP,IAAAA,YAAY,CAACG,GAAG,CAACG,OAAJ,CAAYC,WAAb,CAAZ;AAEH,GAJQ,EAIN,EAJM,CAAT;AAMApC,EAAAA,SAAS,CAAC,MAAM;AACZqC,IAAAA,SAAS;AAEZ,GAHQ,EAGN,CAACf,WAAD,CAHM,CAAT;AAKAtB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAIgB,KAAK,CAACsB,SAAN,EAAJ,EAAuB;AACnBC,MAAAA,cAAc;AACjB;AACJ,GALQ,CAAT,CAvBY,CA8BZ;;AACA,QAAMC,mBAAmB,GAAIC,OAAD,IAAa;AACrC,UAAMC,mBAAmB,GAAGxB,YAA5B;AACA,UAAMyB,SAAS,GAAG3B,KAAK,CAAC4B,GAAN,CAAUH,OAAO,CAACI,EAAlB,EAAsBC,IAAtB,CAA2BC,WAA3B,EAAlB;AACA,QAAIC,IAAJ,CAHqC,CAKrC;;AACA,QAAIL,SAAS,KAAK,GAAlB,EAAuB;AACnBK,MAAAA,IAAI,GAAG;AAAEC,QAAAA,UAAU,EAAG,GAAER,OAAO,CAACI,EAAG;AAA5B,OAAP;AACH,KAFD,MAGK;AACDG,MAAAA,IAAI,GAAG;AAAEC,QAAAA,UAAU,EAAG,GAAEN,SAAU,GAAEF,OAAO,CAACI,EAAG;AAAxC,OAAP;AACH;;AAEDH,IAAAA,mBAAmB,CAACQ,IAApB,CAAyBF,IAAzB;AACA7B,IAAAA,eAAe,CAACuB,mBAAD,CAAf;AACH,GAfD,CA/BY,CAgDZ;;;AACA,QAAMS,qBAAqB,GAAIC,YAAD,IAAkB;AAC5C,UAAMC,WAAW,GAAGnC,YAAY,CAACA,YAAY,CAACoC,MAAb,GAAsB,CAAvB,CAAhC;AACA,UAAMb,OAAO,GAAG,EAAE,GAAGY,WAAL;AAAkBD,MAAAA,YAAY,EAAEA;AAAhC,KAAhB;AACAlC,IAAAA,YAAY,CAACA,YAAY,CAACoC,MAAb,GAAsB,CAAvB,CAAZ,GAAwCb,OAAxC;AACH,GAJD,CAjDY,CAuDZ;;;AACA,QAAMc,gBAAgB,GAAIN,UAAD,IAAgB;AACrC;AACA,QAAIjC,KAAK,CAACgC,IAAN,CAAWC,UAAX,CAAJ,EAA4B;AACxB;AACAT,MAAAA,mBAAmB,CAACS,UAAD,CAAnB,CAFwB,CAIxB;;AACAhC,MAAAA,MAAM,CAACD,KAAK,CAACF,GAAN,EAAD,CAAN,CALwB,CAOxB;;AACA,UAAIM,WAAW,KAAKT,OAAO,CAAC,CAAD,CAA3B,EAAgC;AAC5BJ,QAAAA,SAAS,CAACS,KAAD,EAAQmC,qBAAR,EAA+BxB,0BAA/B,EAA2DV,MAA3D,CAAT;AACH,OAFD,MAGK,IAAIG,WAAW,KAAKT,OAAO,CAAC,CAAD,CAA3B,EAAgC;AACjCH,QAAAA,OAAO,CAACQ,KAAD,EAAQmC,qBAAR,EAA+BlC,MAA/B,CAAP;AACH;AACJ;AACJ,GAjBD;;AAmBA,QAAMoB,SAAS,GAAG,MAAM;AACpB;AACApB,IAAAA,MAAM,CAACK,WAAD,CAAN;AACAN,IAAAA,KAAK,CAACwC,IAAN,CAAWlC,WAAX;AACAH,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAY,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAND;;AAQA,QAAMQ,cAAc,GAAG,MAAM;AACzB;AACA,QAAIvB,KAAK,CAACyC,YAAN,EAAJ,EAA0B;AACtBhC,MAAAA,eAAe,CAAC,WAAD,CAAf;AACH;;AACD,QAAIT,KAAK,CAAC0C,OAAN,EAAJ,EAAqB;AACjBjC,MAAAA,eAAe,CAAC,MAAD,CAAf;AACH;;AACD,QAAIT,KAAK,CAAC2C,YAAN,EAAJ,EAA0B;AACtBlC,MAAAA,eAAe,CAAC,WAAD,CAAf;AACH;;AACD,QAAIT,KAAK,CAAC4C,uBAAN,EAAJ,EAAqC;AACjCnC,MAAAA,eAAe,CAAC,sBAAD,CAAf;AACH;;AACD,QAAIT,KAAK,CAAC6C,qBAAN,EAAJ,EAAmC;AAC/BpC,MAAAA,eAAe,CAAC,uBAAD,CAAf;AACH,KAhBwB,CAkBzB;;;AACAM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEH,GArBD;;AAwBA,sBACI;AAAA,4BACI,QAAC,MAAD;AACI,MAAA,WAAW,EAAEX,WADjB;AAEI,MAAA,cAAc,EAAEC,cAFpB;AAGI,MAAA,OAAO,EAAEV,OAHb;AAII,MAAA,WAAW,EAAEW,WAJjB;AAKI,MAAA,cAAc,EAAEC,cALpB;AAMI,MAAA,oBAAoB,EAAEX;AAN1B;AAAA;AAAA;AAAA;AAAA,YADJ,eASI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI,QAAC,WAAD;AAAa,QAAA,SAAS,EAAEkB,SAAxB;AAAmC,QAAA,YAAY,EAAEC,YAAjD;AAA+D,QAAA,SAAS,EAAEM,SAA1E;AAAqF,QAAA,KAAK,EAAE,WAA5F;AAAyG,QAAA,IAAI,EAAG,yBAAwBb,YAAa;AAArJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACI;AAAK,UAAA,GAAG,EAAEQ,GAAV;AAAe,UAAA,SAAS,EAAC,sBAAzB;AAAA,iCACI,QAAC,UAAD;AACI,YAAA,KAAK,EAAEJ,SADX;AAEI,YAAA,QAAQ,EAAEd,GAFd;AAGI,YAAA,MAAM,EAAGkC,IAAD,IAAUO,gBAAgB,CAAC;AAC/BO,cAAAA,IAAI,EAAEd,IAAI,CAACe,YADoB;AAE/BlB,cAAAA,EAAE,EAAEG,IAAI,CAACgB,YAFsB;AAG/BC,cAAAA,SAAS,EAAE;AAHoB,aAAD;AAHtC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eAeI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,gCACI,QAAC,WAAD;AAAa,UAAA,YAAY,EAAE/C;AAA3B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,iBAAD;AAAmB,UAAA,WAAW,EAAEE,WAAhC;AAA6C,UAAA,uBAAuB,EAAEM,uBAAtE;AAA+F,UAAA,OAAO,EAAEf;AAAxG;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADJ;AAgCH;;GA3IQI,I;;KAAAA,I;AA6IT,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport Chessboard from 'chessboardjsx';\nimport Chess from \"chess.js\";\nimport MoveHistory from './MoveHistory';\nimport DataVisualization from './DataVisualization';\nimport NavBar from '../../common/NavBar';\nimport randomBot from '../../bots/randomBot';\nimport MiniMax from '../../bots/MiniMax'\nimport SimpleModal from '../../common/SimpleModel';\n\nconst startingFen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\nconst allBots = [\"Random\", \"MiniMax\", \"AlphaBeta\", \"Stockfish\"]\nconst allStartingPositions = [\n    { name: \"Start\", fen: startingFen },\n    { name: \"Caro-Kann Defense\", fen: \"rnbqkbnr/pp1ppppp/2p5/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n    { name: \"Pirc Defense\", fen: \"rnbqkbnr/ppp1pppp/3p4/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n    { name: \"Sicilian Defense\", fen: \"rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 1\" },\n    { name: \"French Defense\", fen: \"rnbqkbnr/pppp1ppp/4p3/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n]\nfunction Game() {\n    const [chess] = useState(new Chess(startingFen));\n    const [fen, setFen] = useState(chess.fen());\n    const [movesHistory, setMovesHistory] = useState([]);\n    const [selectedBot, setSelectedBot] = useState(allBots[1]);\n    const [selectedPos, setSelectedPos] = useState(allStartingPositions[0].fen)\n    const [gameOverText, setGameOverText] = useState('');\n    const [randomBotAvaliableMoves, setRandomBotAvaliableMoves] = useState([\"\"]);\n    const [boardSize, setBoardSize] = useState(460);\n    const [openModal, setOpenModal] = useState(false)\n    const ref = useRef(null);\n\n    useEffect(() => {\n        console.log(ref.current.offsetWidth)\n        setBoardSize(ref.current.offsetWidth);\n\n    }, [])\n\n    useEffect(() => {\n        resetGame()\n\n    }, [selectedPos])\n\n    useEffect(() => {\n        // Check for win\n        if (chess.game_over()) {\n            handleGameOver();\n        }\n    })\n\n    // Add playermove to history\n    const updatePlayerHistory = (newMove) => {\n        const currentMovesHistory = movesHistory;\n        const pieceType = chess.get(newMove.to).type.toUpperCase();\n        let move;\n\n        // do not display pawn\n        if (pieceType === \"P\") {\n            move = { playerMove: `${newMove.to}` }\n        }\n        else {\n            move = { playerMove: `${pieceType}${newMove.to}` }\n        }\n\n        currentMovesHistory.push(move);\n        setMovesHistory(currentMovesHistory);\n    }\n\n    // Add computer move to history\n    const updateComputerHistory = (computerMove) => {\n        const currentMove = movesHistory[movesHistory.length - 1];\n        const newMove = { ...currentMove, computerMove: computerMove }\n        movesHistory[movesHistory.length - 1] = newMove;\n    }\n\n    // Handles player move and calls bots move\n    const handlePlayerMove = (playerMove) => {\n        // Checks if playermove is valid\n        if (chess.move(playerMove)) {\n            // add move to history\n            updatePlayerHistory(playerMove);\n\n            // update chessboard\n            setFen(chess.fen());\n\n            // computer response random\n            if (selectedBot === allBots[0]) {\n                randomBot(chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen)\n            }\n            else if (selectedBot === allBots[1]) {\n                MiniMax(chess, updateComputerHistory, setFen)\n            }\n        }\n    }\n\n    const resetGame = () => {\n        // reset board and game\n        setFen(selectedPos);\n        chess.load(selectedPos);\n        setMovesHistory([]);\n        setOpenModal(false)\n    }\n\n    const handleGameOver = () => {\n        // Check how game ended\n        if (chess.in_checkmate()) {\n            setGameOverText(\"Checkmate\")\n        }\n        if (chess.in_draw()) {\n            setGameOverText(\"Draw\")\n        }\n        if (chess.in_stalemate()) {\n            setGameOverText(\"Stalemate\")\n        }\n        if (chess.in_threefold_repetition()) {\n            setGameOverText(\"Threefold Repetition\")\n        }\n        if (chess.insufficient_material()) {\n            setGameOverText(\"Insufficient Material\")\n        }\n\n        // Open game over modal\n        setOpenModal(true)\n\n    }\n\n\n    return (\n        <>\n            <NavBar\n                selectedBot={selectedBot}\n                setSelectedBot={setSelectedBot}\n                allBots={allBots}\n                selectedPos={selectedPos}\n                setSelectedPos={setSelectedPos}\n                allStartingPositions={allStartingPositions}\n            />\n            <div className=\"app-container\">\n                <SimpleModal openModal={openModal} setOpenModal={setOpenModal} resetGame={resetGame} title={\"Game Over\"} desc={`The game ended with a ${gameOverText}`} />\n                <div className=\"chess-container\">\n                    <div ref={ref} className=\"chessboard-container\">\n                        <Chessboard\n                            width={boardSize}\n                            position={fen}\n                            onDrop={(move) => handlePlayerMove({\n                                from: move.sourceSquare,\n                                to: move.targetSquare,\n                                promotion: \"q\",\n                            })}\n                        />\n                    </div>\n                </div>\n                <div className=\"utility-container\">\n                    <MoveHistory movesHistory={movesHistory} />\n                    <DataVisualization selectedBot={selectedBot} randomBotAvaliableMoves={randomBotAvaliableMoves} allBots={allBots} />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}