{"ast":null,"code":"var _jsxFileName = \"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Chessboard from 'chessboardjsx';\nimport Chess, { ChessInstance } from \"chess.js\";\nimport MoveHistory from './components/MoveHistory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [chess] = useState(new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"));\n  const [fen, setFen] = useState(chess.fen());\n  const [movesHistory, setMovesHistory] = useState([]);\n  const [selectedBot, setSelectedBot] = useState(); // add move to history\n\n  const updateHistory = newMove => {\n    const currentMovesHistory = movesHistory;\n    const pieceType = chess.get(newMove.to);\n    const move = `${pieceType}${newMove.to}`;\n    currentMovesHistory.push(move.toUpperCase());\n    setMovesHistory(currentMovesHistory);\n  };\n\n  const handlePlayerMove = playerMove => {\n    // Checks if playermove is valid\n    if (chess.move(playerMove)) {\n      // add move to history\n      updateHistory(playerMove); // computer response random\n\n      setTimeout(() => {\n        // Get list of valid moves\n        const moves = chess.moves(); // If valid move is avliable selects random and updates chessboard\n\n        if (moves.length > 0) {\n          const computerMove = moves[Math.floor(Math.random() * moves.length)];\n          chess.move(computerMove); // add move to history\n\n          console.log(computerMove); // update chessboard\n\n          setFen(chess.fen());\n        }\n      }, 300); // update chessboard\n\n      setFen(chess.fen());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chess-container\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        width: 400,\n        position: fen,\n        onDrop: move => handlePlayerMove({\n          from: move.sourceSquare,\n          to: move.targetSquare,\n          promotion: \"q\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"utility-container\",\n      children: [/*#__PURE__*/_jsxDEV(MoveHistory, {\n        movesHistory: movesHistory,\n        chess: chess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"cNRQUWqn6PnfYaZUChOt7GhxezE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/App.js"],"names":["React","useState","Chessboard","Chess","ChessInstance","MoveHistory","App","chess","fen","setFen","movesHistory","setMovesHistory","selectedBot","setSelectedBot","updateHistory","newMove","currentMovesHistory","pieceType","get","to","move","push","toUpperCase","handlePlayerMove","playerMove","setTimeout","moves","length","computerMove","Math","floor","random","console","log","from","sourceSquare","targetSquare","promotion"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport Chessboard from 'chessboardjsx';\nimport Chess, { ChessInstance } from \"chess.js\";\nimport MoveHistory from './components/MoveHistory';\n\nfunction App() {\n  const [chess] = useState(new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"));\n  const [fen, setFen] = useState(chess.fen());\n  const [movesHistory, setMovesHistory] = useState([]);\n  const [selectedBot, setSelectedBot] = useState();\n\n  // add move to history\n  const updateHistory = (newMove) => {\n    const currentMovesHistory = movesHistory;\n    const pieceType = chess.get(newMove.to)\n    const move = `${pieceType}${newMove.to}`\n    currentMovesHistory.push(move.toUpperCase());\n    setMovesHistory(currentMovesHistory);\n  }\n\n  const handlePlayerMove = (playerMove) => {\n    // Checks if playermove is valid\n    if (chess.move(playerMove)) {\n      // add move to history\n      updateHistory(playerMove);\n\n      // computer response random\n      setTimeout(() => {\n        // Get list of valid moves\n        const moves = chess.moves();\n\n        // If valid move is avliable selects random and updates chessboard\n        if (moves.length > 0) {\n          const computerMove = moves[Math.floor(Math.random() * moves.length)];\n          chess.move(computerMove);\n\n          // add move to history\n          console.log(computerMove);\n\n          // update chessboard\n          setFen(chess.fen());\n        }\n      }, 300)\n\n      // update chessboard\n      setFen(chess.fen());\n    }\n  }\n  return (\n    <div className=\"app-container\">\n      <h1>Chess AI</h1>\n      <div className=\"chess-container\">\n        <Chessboard\n          width={400}\n          position={fen}\n          onDrop={(move) => handlePlayerMove({\n            from: move.sourceSquare,\n            to: move.targetSquare,\n            promotion: \"q\",\n          })}\n\n        />\n      </div>\n      <div className=\"utility-container\">\n        <MoveHistory movesHistory={movesHistory} chess={chess} />\n\n        <div className=\"data-visualization\">\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}