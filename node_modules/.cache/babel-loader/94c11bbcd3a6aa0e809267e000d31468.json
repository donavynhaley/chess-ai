{"ast":null,"code":"import _objectSpread from\"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef}from'react';import Chessboard from'chessboardjsx';import Chess from\"chess.js\";import MoveHistory from'./MoveHistory';import DataVisualization from'./DataVisualization';import NavBar from'../../common/NavBar';import randomBot from'../../bots/randomBot';import MiniMax from'../../bots/MiniMax';import SimpleModal from'../../common/SimpleModel';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var startingFen=\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";var allBots=[\"Random\",\"MiniMax\",\"AlphaBeta\",\"Stockfish\"];var allStartingPositions=[{name:\"Start\",fen:startingFen},{name:\"Caro-Kann Defense\",fen:\"rnbqkbnr/pp1ppppp/2p5/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\"},{name:\"Pirc Defense\",fen:\"rnbqkbnr/ppp1pppp/3p4/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\"},{name:\"Sicilian Defense\",fen:\"rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 1\"},{name:\"French Defense\",fen:\"rnbqkbnr/pppp1ppp/4p3/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\"}];var allDepth=[1,2,3];function Game(){var _useState=useState(new Chess(startingFen)),_useState2=_slicedToArray(_useState,1),chess=_useState2[0];var _useState3=useState(chess.fen()),_useState4=_slicedToArray(_useState3,2),fen=_useState4[0],setFen=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),movesHistory=_useState6[0],setMovesHistory=_useState6[1];var _useState7=useState(allBots[1]),_useState8=_slicedToArray(_useState7,2),selectedBot=_useState8[0],setSelectedBot=_useState8[1];var _useState9=useState(allStartingPositions[0].fen),_useState10=_slicedToArray(_useState9,2),selectedPos=_useState10[0],setSelectedPos=_useState10[1];var _useState11=useState(0),_useState12=_slicedToArray(_useState11,2),evalCount=_useState12[0],setEvalCount=_useState12[1];var _useState13=useState(''),_useState14=_slicedToArray(_useState13,2),gameOverText=_useState14[0],setGameOverText=_useState14[1];var _useState15=useState([]),_useState16=_slicedToArray(_useState15,2),randomBotAvaliableMoves=_useState16[0],setRandomBotAvaliableMoves=_useState16[1];var _useState17=useState({}),_useState18=_slicedToArray(_useState17,2),treeData=_useState18[0],setTreeData=_useState18[1];var _useState19=useState(460),_useState20=_slicedToArray(_useState19,2),boardSize=_useState20[0],setBoardSize=_useState20[1];var _useState21=useState(false),_useState22=_slicedToArray(_useState21,2),openModal=_useState22[0],setOpenModal=_useState22[1];var _useState23=useState(allDepth[1]),_useState24=_slicedToArray(_useState23,2),depth=_useState24[0],setDepth=_useState24[1];var ref=useRef(null);useEffect(function(){console.log(ref.current.offsetWidth);setBoardSize(ref.current.offsetWidth);},[]);useEffect(function(){resetGame();},[selectedPos]);useEffect(function(){// Check for win\nif(chess.game_over()){handleGameOver();}});// Add playermove to history\nvar updatePlayerHistory=function updatePlayerHistory(newMove){var currentMovesHistory=movesHistory;var pieceType=chess.get(newMove.to).type.toUpperCase();var move;// do not display pawn\nif(pieceType===\"P\"){move={playerMove:\"\".concat(newMove.to)};}else{move={playerMove:\"\".concat(pieceType).concat(newMove.to)};}currentMovesHistory.push(move);setMovesHistory(currentMovesHistory);};// Add computer move to history\nvar updateComputerHistory=function updateComputerHistory(computerMove){var currentMove=movesHistory[movesHistory.length-1];var newMove=_objectSpread(_objectSpread({},currentMove),{},{computerMove:computerMove});movesHistory[movesHistory.length-1]=newMove;};// Handles player move and calls bots move\nvar handlePlayerMove=function handlePlayerMove(playerMove){// Checks if playermove is valid\nif(chess.move(playerMove)){// add move to history\nupdatePlayerHistory(playerMove);// update chessboard\nsetFen(chess.fen());// computer response random\nif(selectedBot===allBots[0]){randomBot(chess,updateComputerHistory,setRandomBotAvaliableMoves,setFen);}else if(selectedBot===allBots[1]){MiniMax(chess,updateComputerHistory,setFen,setEvalCount,setTreeData,depth);}}};var resetGame=function resetGame(){// reset board and game\nsetFen(selectedPos);chess.load(selectedPos);setMovesHistory([]);setOpenModal(false);};var handleGameOver=function handleGameOver(){// Check how game ended\nif(chess.in_checkmate()){setGameOverText(\"Checkmate\");}if(chess.in_draw()){setGameOverText(\"Draw\");}if(chess.in_stalemate()){setGameOverText(\"Stalemate\");}if(chess.in_threefold_repetition()){setGameOverText(\"Threefold Repetition\");}if(chess.insufficient_material()){setGameOverText(\"Insufficient Material\");}// Open game over modal\nsetOpenModal(true);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(NavBar,{selectedBot:selectedBot,setSelectedBot:setSelectedBot,allBots:allBots,selectedPos:selectedPos,setSelectedPos:setSelectedPos,allStartingPositions:allStartingPositions,depth:depth,setDepth:setDepth,allDepth:allDepth}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(SimpleModal,{openModal:openModal,setOpenModal:setOpenModal,title:\"Game Over\",desc:\"The game ended with a \".concat(gameOverText),onClick:resetGame,buttonText:\"Play Again?\"}),/*#__PURE__*/_jsx(\"div\",{className:\"chess-container\",children:/*#__PURE__*/_jsx(\"div\",{ref:ref,className:\"chessboard-container\",children:/*#__PURE__*/_jsx(Chessboard,{width:boardSize,position:fen,onDrop:function onDrop(move){return handlePlayerMove({from:move.sourceSquare,to:move.targetSquare,promotion:\"q\"});}})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"utility-container\",children:[/*#__PURE__*/_jsx(MoveHistory,{movesHistory:movesHistory}),/*#__PURE__*/_jsx(DataVisualization,{selectedBot:selectedBot,randomBotAvaliableMoves:randomBotAvaliableMoves,allBots:allBots,evalCount:evalCount,treeData:treeData})]})]})]});}export default Game;","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/pages/Game/Game.js"],"names":["React","useState","useEffect","useRef","Chessboard","Chess","MoveHistory","DataVisualization","NavBar","randomBot","MiniMax","SimpleModal","startingFen","allBots","allStartingPositions","name","fen","allDepth","Game","chess","setFen","movesHistory","setMovesHistory","selectedBot","setSelectedBot","selectedPos","setSelectedPos","evalCount","setEvalCount","gameOverText","setGameOverText","randomBotAvaliableMoves","setRandomBotAvaliableMoves","treeData","setTreeData","boardSize","setBoardSize","openModal","setOpenModal","depth","setDepth","ref","console","log","current","offsetWidth","resetGame","game_over","handleGameOver","updatePlayerHistory","newMove","currentMovesHistory","pieceType","get","to","type","toUpperCase","move","playerMove","push","updateComputerHistory","computerMove","currentMove","length","handlePlayerMove","load","in_checkmate","in_draw","in_stalemate","in_threefold_repetition","insufficient_material","from","sourceSquare","targetSquare","promotion"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport Chessboard from 'chessboardjsx';\nimport Chess from \"chess.js\";\nimport MoveHistory from './MoveHistory';\nimport DataVisualization from './DataVisualization';\nimport NavBar from '../../common/NavBar';\nimport randomBot from '../../bots/randomBot';\nimport MiniMax from '../../bots/MiniMax'\nimport SimpleModal from '../../common/SimpleModel';\n\nconst startingFen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\nconst allBots = [\"Random\", \"MiniMax\", \"AlphaBeta\", \"Stockfish\"]\nconst allStartingPositions = [\n    { name: \"Start\", fen: startingFen },\n    { name: \"Caro-Kann Defense\", fen: \"rnbqkbnr/pp1ppppp/2p5/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n    { name: \"Pirc Defense\", fen: \"rnbqkbnr/ppp1pppp/3p4/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n    { name: \"Sicilian Defense\", fen: \"rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 1\" },\n    { name: \"French Defense\", fen: \"rnbqkbnr/pppp1ppp/4p3/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n]\nconst allDepth = [1, 2, 3]\nfunction Game() {\n    const [chess] = useState(new Chess(startingFen));\n    const [fen, setFen] = useState(chess.fen());\n    const [movesHistory, setMovesHistory] = useState([]);\n    const [selectedBot, setSelectedBot] = useState(allBots[1]);\n    const [selectedPos, setSelectedPos] = useState(allStartingPositions[0].fen)\n    const [evalCount, setEvalCount] = useState(0)\n    const [gameOverText, setGameOverText] = useState('');\n    const [randomBotAvaliableMoves, setRandomBotAvaliableMoves] = useState([]);\n    const [treeData, setTreeData] = useState({})\n    const [boardSize, setBoardSize] = useState(460);\n    const [openModal, setOpenModal] = useState(false)\n    const [depth, setDepth] = useState(allDepth[1])\n    const ref = useRef(null);\n\n    useEffect(() => {\n        console.log(ref.current.offsetWidth)\n        setBoardSize(ref.current.offsetWidth);\n\n    }, [])\n\n    useEffect(() => {\n        resetGame()\n\n    }, [selectedPos])\n\n    useEffect(() => {\n        // Check for win\n        if (chess.game_over()) {\n            handleGameOver();\n        }\n    })\n\n    // Add playermove to history\n    const updatePlayerHistory = (newMove) => {\n        const currentMovesHistory = movesHistory;\n        const pieceType = chess.get(newMove.to).type.toUpperCase();\n        let move;\n\n        // do not display pawn\n        if (pieceType === \"P\") {\n            move = { playerMove: `${newMove.to}` }\n        }\n        else {\n            move = { playerMove: `${pieceType}${newMove.to}` }\n        }\n\n        currentMovesHistory.push(move);\n        setMovesHistory(currentMovesHistory);\n    }\n\n    // Add computer move to history\n    const updateComputerHistory = (computerMove) => {\n        const currentMove = movesHistory[movesHistory.length - 1];\n        const newMove = { ...currentMove, computerMove: computerMove }\n        movesHistory[movesHistory.length - 1] = newMove;\n    }\n\n    // Handles player move and calls bots move\n    const handlePlayerMove = (playerMove) => {\n        // Checks if playermove is valid\n        if (chess.move(playerMove)) {\n            // add move to history\n            updatePlayerHistory(playerMove);\n\n            // update chessboard\n            setFen(chess.fen());\n\n            // computer response random\n            if (selectedBot === allBots[0]) {\n                randomBot(chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen)\n            }\n            else if (selectedBot === allBots[1]) {\n                MiniMax(chess, updateComputerHistory, setFen, setEvalCount, setTreeData, depth)\n            }\n        }\n    }\n\n    const resetGame = () => {\n        // reset board and game\n        setFen(selectedPos);\n        chess.load(selectedPos);\n        setMovesHistory([]);\n        setOpenModal(false)\n    }\n\n    const handleGameOver = () => {\n        // Check how game ended\n        if (chess.in_checkmate()) {\n            setGameOverText(\"Checkmate\")\n        }\n        if (chess.in_draw()) {\n            setGameOverText(\"Draw\")\n        }\n        if (chess.in_stalemate()) {\n            setGameOverText(\"Stalemate\")\n        }\n        if (chess.in_threefold_repetition()) {\n            setGameOverText(\"Threefold Repetition\")\n        }\n        if (chess.insufficient_material()) {\n            setGameOverText(\"Insufficient Material\")\n        }\n\n        // Open game over modal\n        setOpenModal(true)\n\n    }\n\n\n    return (\n        <>\n            <NavBar\n                selectedBot={selectedBot}\n                setSelectedBot={setSelectedBot}\n                allBots={allBots}\n                selectedPos={selectedPos}\n                setSelectedPos={setSelectedPos}\n                allStartingPositions={allStartingPositions}\n                depth={depth}\n                setDepth={setDepth}\n                allDepth={allDepth}\n            />\n            <div className=\"app-container\">\n                <SimpleModal openModal={openModal} setOpenModal={setOpenModal} title={\"Game Over\"} desc={`The game ended with a ${gameOverText}`} onClick={resetGame} buttonText=\"Play Again?\" />\n                <div className=\"chess-container\">\n                    <div ref={ref} className=\"chessboard-container\">\n                        <Chessboard\n                            width={boardSize}\n                            position={fen}\n                            onDrop={(move) => handlePlayerMove({\n                                from: move.sourceSquare,\n                                to: move.targetSquare,\n                                promotion: \"q\",\n                            })}\n                        />\n                    </div>\n                </div>\n                <div className=\"utility-container\">\n                    <MoveHistory movesHistory={movesHistory} />\n                    <DataVisualization selectedBot={selectedBot} randomBotAvaliableMoves={randomBotAvaliableMoves} allBots={allBots} evalCount={evalCount} treeData={treeData} />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}