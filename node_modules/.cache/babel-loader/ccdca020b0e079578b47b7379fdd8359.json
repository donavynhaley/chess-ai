{"ast":null,"code":"import Chess from \"chess.js\";\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\n\nlet pieceValues = new Map();\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, isMax) => {\n  if (depth === 0) {\n    allEval[depth].push({\n      score: getBoardEvaluation(chessCopy.board()),\n      move: moves[i]\n    });\n    return [null, getBoardEvaluation(chessCopy.board())];\n  }\n\n  const moves = chessCopy.moves();\n  let bestMove = moves[moves.length - 1];\n\n  if (isMax) {\n    let maxEval = -Infinity;\n\n    for (let i = 0; i < moves.length; i++) {\n      chessCopy.move(moves[i]);\n      allEval[depth].push({\n        score: getBoardEvaluation(chessCopy.board()),\n        move: moves[i],\n        moves: i\n      });\n      let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, false)[1];\n      chessCopy.undo();\n      console.log(\"Current Eval: \" + currentEval + \"| Max Eval \" + maxEval);\n\n      if (currentEval > maxEval) {\n        maxEval = currentEval;\n        bestMove = moves[i];\n      }\n    }\n\n    return [bestMove, maxEval];\n  } else {\n    let minEval = Infinity;\n\n    for (let i = 0; i < moves.length; i++) {\n      chessCopy.move(moves[i]);\n      allEval[depth].push({\n        score: getBoardEvaluation(chessCopy.board()),\n        move: moves[i]\n      });\n      let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, true)[1];\n      chessCopy.undo();\n\n      if (currentEval < minEval) {\n        minEval = currentEval;\n        bestMove = moves[i];\n      }\n    }\n\n    return [bestMove, minEval];\n  }\n};\n\nconst fetchBestMove = async (chessCopy, depth, allEval, isMax) => {\n  const bestMove = await miniMaxRecursive(chessCopy, depth, allEval, isMax);\n  console.log(bestMove);\n  return bestMove[0];\n};\n\nconst MiniMax = (chess, updateComputerHistory, setFen) => {\n  const allEval = [[], [], []];\n  const chessCopy = new Chess(chess.fen());\n  allEval.push({\n    score: getBoardEvaluation(chess.board),\n    move: 'original',\n    depth: 2\n  }); // computer response random\n\n  fetchBestMove(chessCopy, 2, allEval, true).then(bestMove => {\n    // update position\n    chess.move(bestMove);\n    console.log(allEval); // add move to history\n\n    updateComputerHistory(bestMove); // update chessboard\n\n    setFen(chess.fen());\n  });\n};\n\n_c = MiniMax;\n\nconst getBoardEvaluation = board => {\n  let count = 0;\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] === null) continue;\n      let piece = board[i][j].type;\n      let color = board[i][j].color;\n\n      if (color === 'b') {\n        count += pieceValues[piece];\n      } else {\n        count -= pieceValues[piece];\n      }\n    }\n  }\n\n  return count;\n};\n\nexport default MiniMax;\n\nvar _c;\n\n$RefreshReg$(_c, \"MiniMax\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/bots/MiniMax.js"],"names":["Chess","pieceValues","Map","miniMaxRecursive","chessCopy","depth","allEval","isMax","push","score","getBoardEvaluation","board","move","moves","i","bestMove","length","maxEval","Infinity","currentEval","undo","console","log","minEval","fetchBestMove","MiniMax","chess","updateComputerHistory","setFen","fen","then","count","j","piece","type","color"],"mappings":"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","sourcesContent":["import Chess from \"chess.js\";\n\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\nlet pieceValues = new Map()\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, isMax) => {\n    if (depth === 0) {\n        allEval[depth].push({ score: getBoardEvaluation(chessCopy.board()), move: moves[i] })\n        return [null, getBoardEvaluation(chessCopy.board())];\n    }\n    const moves = chessCopy.moves();\n    let bestMove = moves[moves.length - 1];\n\n    if (isMax) {\n        let maxEval = -Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            chessCopy.move(moves[i])\n            allEval[depth].push({ score: getBoardEvaluation(chessCopy.board()), move: moves[i], moves: i })\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, false)[1];\n            chessCopy.undo();\n            console.log(\"Current Eval: \" + currentEval + \"| Max Eval \" + maxEval)\n            if (currentEval > maxEval) {\n                maxEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return [bestMove, maxEval];\n\n    }\n    else {\n        let minEval = Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            chessCopy.move(moves[i])\n            allEval[depth].push({ score: getBoardEvaluation(chessCopy.board()), move: moves[i] })\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, true)[1];\n            chessCopy.undo()\n            if (currentEval < minEval) {\n                minEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return [bestMove, minEval]\n    }\n\n}\n\nconst fetchBestMove = async (chessCopy, depth, allEval, isMax) => {\n    const bestMove = await miniMaxRecursive(chessCopy, depth, allEval, isMax)\n    console.log(bestMove)\n    return bestMove[0]\n}\n\nconst MiniMax = (chess, updateComputerHistory, setFen) => {\n    const allEval = [[], [], []]\n    const chessCopy = new Chess(chess.fen());\n    allEval.push({ score: getBoardEvaluation(chess.board), move: 'original', depth: 2 })\n    // computer response random\n    fetchBestMove(chessCopy, 2, allEval, true).then((bestMove) => {\n        // update position\n        chess.move(bestMove)\n        console.log(allEval)\n        // add move to history\n        updateComputerHistory(bestMove);\n        // update chessboard\n        setFen(chess.fen());\n    })\n}\nconst getBoardEvaluation = (board) => {\n    let count = 0;\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (board[i][j] === null)\n                continue\n            let piece = board[i][j].type\n            let color = board[i][j].color\n            if (color === 'b') {\n                count += pieceValues[piece]\n            }\n            else {\n                count -= pieceValues[piece]\n            }\n        }\n    }\n    return count\n}\n\nexport default MiniMax\n"]},"metadata":{},"sourceType":"module"}