{"ast":null,"code":"import _slicedToArray from\"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import Button from'@material-ui/core/Button';import TreeVisualization from'./TreeVisualization';import SimpleModal from'../../common/SimpleModel';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var DataVisualization=function DataVisualization(props){var selectedBot=props.selectedBot,randomBotAvaliableMoves=props.randomBotAvaliableMoves,allBots=props.allBots,evalCount=props.evalCount,treeData=props.treeData;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),openModal=_useState2[0],setOpenModal=_useState2[1];var handleClose=function handleClose(){setOpenModal(false);};var handleOpen=function handleOpen(){console.log(\"opens\");setOpenModal(true);};var randomBot=function randomBot(){var listAvaliableMoves=randomBotAvaliableMoves.map(function(move){return/*#__PURE__*/_jsx(\"li\",{children:move});});return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Selecting random from avaliable moves\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"avaliable-moves\",children:listAvaliableMoves&&listAvaliableMoves})]});};var miniMaxBot=function miniMaxBot(){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(SimpleModal,{openModal:openModal,setOpenModal:setOpenModal,title:\"Tree\",desc:/*#__PURE__*/_jsx(TreeVisualization,{data:treeData}),onClick:handleClose,buttonText:\"Close Modal\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Postions Evaluated: \".concat(evalCount.toLocaleString())}),/*#__PURE__*/_jsx(Button,{variant:\"outlined\",color:\"secondary\",onClick:handleOpen,children:\"See Tree\"})]});};// updates return based on what bot is selected. \nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"data-visualization\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Data Visualization\"}),allBots[0]===selectedBot?randomBot():null,allBots[1]===selectedBot||allBots[2]===selectedBot?miniMaxBot():null]});};export default DataVisualization;","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/pages/Game/DataVisualization.js"],"names":["React","useState","Button","TreeVisualization","SimpleModal","DataVisualization","props","selectedBot","randomBotAvaliableMoves","allBots","evalCount","treeData","openModal","setOpenModal","handleClose","handleOpen","console","log","randomBot","listAvaliableMoves","map","move","miniMaxBot","toLocaleString"],"mappings":"6KAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,qBAA9B,CACA,MAAOC,CAAAA,WAAP,KAAwB,0BAAxB,C,6IAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,CAAW,CACjC,GAAQC,CAAAA,WAAR,CAA+ED,KAA/E,CAAQC,WAAR,CAAqBC,uBAArB,CAA+EF,KAA/E,CAAqBE,uBAArB,CAA8CC,OAA9C,CAA+EH,KAA/E,CAA8CG,OAA9C,CAAuDC,SAAvD,CAA+EJ,KAA/E,CAAuDI,SAAvD,CAAkEC,QAAlE,CAA+EL,KAA/E,CAAkEK,QAAlE,CACA,cAAkCV,QAAQ,CAAC,KAAD,CAA1C,wCAAOW,SAAP,eAAkBC,YAAlB,eAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACtBD,YAAY,CAAC,KAAD,CAAZ,CACH,CAFD,CAIA,GAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACrBC,OAAO,CAACC,GAAR,CAAY,OAAZ,EACAJ,YAAY,CAAC,IAAD,CAAZ,CACH,CAHD,CAKA,GAAMK,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACpB,GAAMC,CAAAA,kBAAkB,CAAGX,uBAAuB,CAACY,GAAxB,CAA4B,SAACC,IAAD,CAAU,CAC7D,mBAAO,oBAAKA,IAAL,EAAP,CACH,CAF0B,CAA3B,CAGA,mBACI,wCACI,4DADJ,cAEI,WAAI,SAAS,CAAC,iBAAd,UACKF,kBAAkB,EAAIA,kBAD3B,EAFJ,GADJ,CAQH,CAZD,CAaA,GAAMG,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACrB,mBACI,wCAEI,KAAC,WAAD,EAAa,SAAS,CAAEV,SAAxB,CAAmC,YAAY,CAAEC,YAAjD,CAA+D,KAAK,CAAE,MAAtE,CAA8E,IAAI,cAAE,KAAC,iBAAD,EAAmB,IAAI,CAAEF,QAAzB,EAApF,CAA2H,OAAO,CAAEG,WAApI,CAAiJ,UAAU,CAAC,aAA5J,EAFJ,cAGI,iDAA2BJ,SAAS,CAACa,cAAV,EAA3B,GAHJ,cAII,KAAC,MAAD,EAAQ,OAAO,CAAC,UAAhB,CAA2B,KAAK,CAAC,WAAjC,CAA6C,OAAO,CAAER,UAAtD,sBAJJ,GADJ,CAWH,CAZD,CAaA;AACA,mBACI,aAAK,SAAS,CAAC,oBAAf,wBACI,0CADJ,CAEKN,OAAO,CAAC,CAAD,CAAP,GAAeF,WAAf,CAA6BW,SAAS,EAAtC,CAA2C,IAFhD,CAGKT,OAAO,CAAC,CAAD,CAAP,GAAeF,WAAf,EAA8BE,OAAO,CAAC,CAAD,CAAP,GAAeF,WAA7C,CAA2De,UAAU,EAArE,CAA0E,IAH/E,GADJ,CAOH,CA/CD,CAiDA,cAAejB,CAAAA,iBAAf","sourcesContent":["import React, { useState } from 'react'\nimport Button from '@material-ui/core/Button';\nimport TreeVisualization from './TreeVisualization';\nimport SimpleModal from '../../common/SimpleModel'\n\nconst DataVisualization = (props) => {\n    const { selectedBot, randomBotAvaliableMoves, allBots, evalCount, treeData } = props;\n    const [openModal, setOpenModal] = useState(false);\n\n    const handleClose = () => {\n        setOpenModal(false)\n    }\n\n    const handleOpen = () => {\n        console.log(\"opens\")\n        setOpenModal(true)\n    }\n\n    const randomBot = () => {\n        const listAvaliableMoves = randomBotAvaliableMoves.map((move) => {\n            return <li>{move}</li>\n        })\n        return (\n            <>\n                <p>Selecting random from avaliable moves</p>\n                <ul className=\"avaliable-moves\">\n                    {listAvaliableMoves && listAvaliableMoves}\n                </ul>\n            </>\n        )\n    }\n    const miniMaxBot = () => {\n        return (\n            <>\n\n                <SimpleModal openModal={openModal} setOpenModal={setOpenModal} title={\"Tree\"} desc={<TreeVisualization data={treeData} />} onClick={handleClose} buttonText=\"Close Modal\" />\n                <p>{`Postions Evaluated: ${evalCount.toLocaleString()}`}</p>\n                <Button variant=\"outlined\" color=\"secondary\" onClick={handleOpen}>\n                    See Tree\n                </Button>\n            </>\n        )\n\n    }\n    // updates return based on what bot is selected. \n    return (\n        <div className=\"data-visualization\">\n            <h2>Data Visualization</h2>\n            {allBots[0] === selectedBot ? randomBot() : null}\n            {allBots[1] === selectedBot || allBots[2] === selectedBot ? miniMaxBot() : null}\n        </div>\n    )\n}\n\nexport default DataVisualization\n"]},"metadata":{},"sourceType":"module"}