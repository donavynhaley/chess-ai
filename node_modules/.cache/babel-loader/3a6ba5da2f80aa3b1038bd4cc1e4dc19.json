{"ast":null,"code":"import Chess from \"chess.js\";\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\n\nlet pieceValues = new Map();\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, originalFen, isMax) => {\n  if (depth === 0) {\n    return getBoardEvaluation(chessCopy.board);\n  }\n\n  const moves = chessCopy.moves();\n  let bestMove = moves[Math.floor(Math.random() * moves.length)];\n\n  if (isMax) {\n    let maxEval = -Infinity;\n\n    for (let i = 0; i < moves.length; i++) {\n      chessCopy.move(moves[i]);\n      let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, originalFen, false);\n      chessCopy.undo();\n\n      if (currentEval > maxEval) {\n        maxEval = currentEval;\n        bestMove = moves[i];\n      }\n    }\n\n    return bestMove;\n  } else {\n    let minEval = Infinity;\n\n    for (let i = 0; i < moves.length; i++) {\n      chessCopy.move(moves[i]);\n      let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, originalFen, true);\n      chessCopy.undo();\n\n      if (currentEval < minEval) {\n        minEval = currentEval;\n        bestMove = moves[i];\n      }\n    }\n\n    return bestMove;\n  }\n};\n\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n  const originalFen = chess.fen();\n  const allEval = [];\n  const chessCopy = new Chess(chess.fen());\n  allEval.push({\n    score: getBoardEvaluation(chess.board),\n    move: 'origninal',\n    depth: 2\n  }); // computer response random\n\n  setTimeout(() => {\n    // Get list of valid moves and adds evaluation for each possible move to list\n    const moves = chessCopy.moves();\n    const bestMove = miniMaxRecursive(chessCopy, 2, allEval, originalFen, true);\n    console.log(bestMove); // update state for data vizualization\n    // setRandomBotAvaliableMoves(moves);\n    // If valid move is avaliable selects random and updates chessboard\n\n    if (moves.length > 0) {\n      const computerMove = moves[Math.floor(Math.random() * moves.length)];\n      chess.move(computerMove); // add move to history\n\n      updateComputerHistory(computerMove); // update chessboard\n\n      setFen(chess.fen());\n    }\n  }, 300);\n};\n\n_c = MiniMax;\n\nconst getBoardEvaluation = board => {\n  let count = 0;\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] === null) continue;\n      let piece = board[i][j].type;\n      let color = board[i][j].color;\n\n      if (color === 'b') {\n        count += pieceValues[piece];\n      } else {\n        count -= pieceValues[piece];\n      }\n    }\n  }\n\n  return count;\n};\n\nexport default MiniMax;\n\nvar _c;\n\n$RefreshReg$(_c, \"MiniMax\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/bots/MiniMax.js"],"names":["Chess","pieceValues","Map","miniMaxRecursive","chessCopy","depth","allEval","originalFen","isMax","getBoardEvaluation","board","moves","bestMove","Math","floor","random","length","maxEval","Infinity","i","move","currentEval","undo","minEval","MiniMax","chess","updateComputerHistory","setRandomBotAvaliableMoves","setFen","fen","push","score","setTimeout","console","log","computerMove","count","j","piece","type","color"],"mappings":"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","sourcesContent":["import Chess from \"chess.js\";\n\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\nlet pieceValues = new Map()\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, originalFen, isMax) => {\n    if (depth === 0) {\n        return getBoardEvaluation(chessCopy.board);\n    }\n    const moves = chessCopy.moves();\n    let bestMove = moves[Math.floor(Math.random() * moves.length)];\n\n    if (isMax) {\n        let maxEval = -Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            chessCopy.move(moves[i])\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, originalFen, false);\n            chessCopy.undo();\n            if (currentEval > maxEval) {\n                maxEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return bestMove;\n\n    }\n    else {\n        let minEval = Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            chessCopy.move(moves[i])\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, originalFen, true);\n            chessCopy.undo()\n            if (currentEval < minEval) {\n                minEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return bestMove\n    }\n\n}\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n    const originalFen = chess.fen();\n    const allEval = []\n    const chessCopy = new Chess(chess.fen());\n    allEval.push({ score: getBoardEvaluation(chess.board), move: 'origninal', depth: 2 })\n    // computer response random\n    setTimeout(() => {\n        // Get list of valid moves and adds evaluation for each possible move to list\n        const moves = chessCopy.moves();\n        const bestMove = miniMaxRecursive(chessCopy, 2, allEval, originalFen, true)\n        console.log(bestMove)\n        // update state for data vizualization\n        // setRandomBotAvaliableMoves(moves);\n\n        // If valid move is avaliable selects random and updates chessboard\n        if (moves.length > 0) {\n            const computerMove = moves[Math.floor(Math.random() * moves.length)];\n            chess.move(computerMove);\n\n            // add move to history\n            updateComputerHistory(computerMove);\n\n            // update chessboard\n            setFen(chess.fen());\n        }\n    }, 300)\n}\nconst getBoardEvaluation = (board) => {\n    let count = 0;\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (board[i][j] === null)\n                continue\n            let piece = board[i][j].type\n            let color = board[i][j].color\n            if (color === 'b') {\n                count += pieceValues[piece]\n            }\n            else {\n                count -= pieceValues[piece]\n            }\n        }\n    }\n    return count\n}\n\nexport default MiniMax\n"]},"metadata":{},"sourceType":"module"}