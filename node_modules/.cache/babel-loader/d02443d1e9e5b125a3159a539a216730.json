{"ast":null,"code":"import Chess from \"chess.js\";\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\n\nlet pieceValues = new Map();\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, isMax) => {\n  if (depth === 0) {\n    return getBoardEvaluation(chessCopy.board);\n  }\n\n  const moves = chessCopy.moves();\n  let bestMove = moves[Math.floor(Math.random() * moves.length)];\n\n  if (isMax) {\n    let maxEval = -Infinity;\n\n    for (let i = 0; i < moves.length; i++) {\n      chessCopy.move(moves[i]);\n      allEval.push({\n        score: getBoardEvaluation(chessCopy.board()),\n        move: moves[i],\n        depth: depth\n      });\n      let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, false);\n      console.log(currentEval);\n      chessCopy.undo();\n\n      if (currentEval > maxEval) {\n        maxEval = currentEval;\n        bestMove = moves[i];\n      }\n    }\n\n    return bestMove;\n  } else {\n    let minEval = Infinity;\n\n    for (let i = 0; i < moves.length; i++) {\n      chessCopy.move(moves[i]);\n      allEval.push({\n        score: getBoardEvaluation(chessCopy.board()),\n        move: moves[i],\n        depth: depth\n      });\n      let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, true);\n      chessCopy.undo();\n\n      if (currentEval < minEval) {\n        minEval = currentEval;\n        bestMove = moves[i];\n      }\n    }\n\n    return bestMove;\n  }\n};\n\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n  const originalFen = chess.fen();\n  const allEval = [];\n  const chessCopy = new Chess(chess.fen());\n  allEval.push({\n    score: getBoardEvaluation(chess.board),\n    move: 'origninal',\n    depth: 2\n  }); // computer response random\n\n  const bestMove = miniMaxRecursive(chessCopy, 3, allEval, originalFen, true);\n  console.log(bestMove); //console.log(allEval)\n\n  chess.move(bestMove); // add move to history\n\n  updateComputerHistory(bestMove); // update chessboard\n\n  setFen(chess.fen());\n};\n\n_c = MiniMax;\n\nconst getBoardEvaluation = board => {\n  let count = 0;\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] === null) continue;\n      let piece = board[i][j].type;\n      let color = board[i][j].color;\n\n      if (color === 'b') {\n        count += pieceValues[piece];\n      } else {\n        count -= pieceValues[piece];\n      }\n    }\n  }\n\n  return count;\n};\n\nexport default MiniMax;\n\nvar _c;\n\n$RefreshReg$(_c, \"MiniMax\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/bots/MiniMax.js"],"names":["Chess","pieceValues","Map","miniMaxRecursive","chessCopy","depth","allEval","isMax","getBoardEvaluation","board","moves","bestMove","Math","floor","random","length","maxEval","Infinity","i","move","push","score","currentEval","console","log","undo","minEval","MiniMax","chess","updateComputerHistory","setRandomBotAvaliableMoves","setFen","originalFen","fen","count","j","piece","type","color"],"mappings":"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","sourcesContent":["import Chess from \"chess.js\";\n\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\nlet pieceValues = new Map()\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, isMax) => {\n    if (depth === 0) {\n        return getBoardEvaluation(chessCopy.board);\n    }\n    const moves = chessCopy.moves();\n    let bestMove = moves[Math.floor(Math.random() * moves.length)];\n\n    if (isMax) {\n        let maxEval = -Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            chessCopy.move(moves[i])\n            allEval.push({ score: getBoardEvaluation(chessCopy.board()), move: moves[i], depth: depth })\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, false);\n            console.log(currentEval)\n            chessCopy.undo();\n            if (currentEval > maxEval) {\n                maxEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return bestMove;\n\n    }\n    else {\n        let minEval = Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            chessCopy.move(moves[i])\n            allEval.push({ score: getBoardEvaluation(chessCopy.board()), move: moves[i], depth: depth })\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, true);\n            chessCopy.undo()\n            if (currentEval < minEval) {\n                minEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return bestMove\n    }\n\n}\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n    const originalFen = chess.fen();\n    const allEval = []\n    const chessCopy = new Chess(chess.fen());\n    allEval.push({ score: getBoardEvaluation(chess.board), move: 'origninal', depth: 2 })\n    // computer response random\n    const bestMove = miniMaxRecursive(chessCopy, 3, allEval, originalFen, true)\n    console.log(bestMove)\n    //console.log(allEval)\n    chess.move(bestMove);\n\n    // add move to history\n    updateComputerHistory(bestMove);\n\n    // update chessboard\n    setFen(chess.fen());\n}\nconst getBoardEvaluation = (board) => {\n    let count = 0;\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (board[i][j] === null)\n                continue\n            let piece = board[i][j].type\n            let color = board[i][j].color\n            if (color === 'b') {\n                count += pieceValues[piece]\n            }\n            else {\n                count -= pieceValues[piece]\n            }\n        }\n    }\n    return count\n}\n\nexport default MiniMax\n"]},"metadata":{},"sourceType":"module"}