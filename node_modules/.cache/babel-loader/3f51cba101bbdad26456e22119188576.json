{"ast":null,"code":"import Chess from \"chess.js\";\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\n\nlet pieceValues = new Map();\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, isMax) => {\n  if (depth === 0) {\n    console.log(\"Board Eval at 0: \" + getBoardEvaluation(chessCopy.board));\n    return getBoardEvaluation(chessCopy.board);\n  }\n\n  const moves = chessCopy.moves();\n  let bestMove = moves[0];\n\n  if (isMax) {\n    let maxEval = -Infinity;\n\n    for (let i = 0; i < moves.length; i++) {\n      chessCopy.move(moves[i]);\n      allEval.push({\n        score: getBoardEvaluation(chessCopy.board()),\n        move: moves[i],\n        depth: depth\n      });\n      let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, false);\n      chessCopy.undo();\n      console.log(maxEval + \" max \" + currentEval);\n\n      if (currentEval > maxEval) {\n        maxEval = currentEval;\n        bestMove = moves[i];\n      }\n    }\n\n    return bestMove;\n  } else {\n    let minEval = Infinity;\n\n    for (let i = 0; i < moves.length; i++) {\n      chessCopy.move(moves[i]);\n      allEval.push({\n        score: getBoardEvaluation(chessCopy.board()),\n        move: moves[i],\n        depth: depth\n      });\n      let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, false);\n      chessCopy.undo();\n      console.log(minEval + \" min \" + currentEval);\n\n      if (currentEval < minEval) {\n        minEval = currentEval;\n        bestMove = moves[i];\n      }\n    }\n\n    return bestMove;\n  }\n};\n\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n  const originalFen = chess.fen();\n  const allEval = [];\n  const chessCopy = new Chess(chess.fen());\n  allEval.push({\n    score: getBoardEvaluation(chess.board),\n    move: 'original',\n    depth: 2\n  }); // computer response random\n\n  setTimeout(() => {\n    const bestMove = miniMaxRecursive(chessCopy, 1, allEval, originalFen, true);\n    console.log(bestMove);\n    console.log(allEval); // update position\n\n    chess.move(bestMove); // add move to history\n\n    updateComputerHistory(bestMove); // update chessboard\n\n    setFen(chess.fen());\n  }, 1000);\n};\n\n_c = MiniMax;\n\nconst getBoardEvaluation = board => {\n  let count = 0;\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] === null) continue;\n      let piece = board[i][j].type;\n      let color = board[i][j].color;\n\n      if (color === 'b') {\n        count += pieceValues[piece];\n      } else {\n        count -= pieceValues[piece];\n      }\n    }\n  }\n\n  return count;\n};\n\nexport default MiniMax;\n\nvar _c;\n\n$RefreshReg$(_c, \"MiniMax\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/bots/MiniMax.js"],"names":["Chess","pieceValues","Map","miniMaxRecursive","chessCopy","depth","allEval","isMax","console","log","getBoardEvaluation","board","moves","bestMove","maxEval","Infinity","i","length","move","push","score","currentEval","undo","minEval","MiniMax","chess","updateComputerHistory","setRandomBotAvaliableMoves","setFen","originalFen","fen","setTimeout","count","j","piece","type","color"],"mappings":"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","sourcesContent":["import Chess from \"chess.js\";\n\n/* \n    - Create copy of chess board\n    - get moves\n    - go through each move and get its evaluation\n    - run minmax evaulating each move to a height of 3\n*/\n\n/* based on stockfish midgame piece evaluations\nPawnValueMg = 128, \nKnightValueMg = 781,\nBishopValueMg = 825, \nRookValueMg = 1276, \nQueenValueMg = 2538,\n\n*/\nlet pieceValues = new Map()\npieceValues['p'] = 128;\npieceValues['n'] = 781;\npieceValues['b'] = 128;\npieceValues['r'] = 1276;\npieceValues['q'] = 2538;\npieceValues['k'] = 9999;\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, isMax) => {\n    if (depth === 0) {\n        console.log(\"Board Eval at 0: \" + getBoardEvaluation(chessCopy.board))\n        return getBoardEvaluation(chessCopy.board);\n    }\n    const moves = chessCopy.moves();\n    let bestMove = moves[0];\n    if (isMax) {\n        let maxEval = -Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            chessCopy.move(moves[i])\n            allEval.push({ score: getBoardEvaluation(chessCopy.board()), move: moves[i], depth: depth })\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, false);\n            chessCopy.undo();\n            console.log(maxEval + \" max \" + currentEval)\n            if (currentEval > maxEval) {\n                maxEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return bestMove;\n\n    }\n    else {\n        let minEval = Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            chessCopy.move(moves[i])\n            allEval.push({ score: getBoardEvaluation(chessCopy.board()), move: moves[i], depth: depth })\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, false);\n            chessCopy.undo()\n            console.log(minEval + \" min \" + currentEval)\n\n            if (currentEval < minEval) {\n                minEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return bestMove\n    }\n\n}\nconst MiniMax = (chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen) => {\n    const originalFen = chess.fen();\n    const allEval = []\n    const chessCopy = new Chess(chess.fen());\n    allEval.push({ score: getBoardEvaluation(chess.board), move: 'original', depth: 2 })\n    // computer response random\n    setTimeout(() => {\n        const bestMove = miniMaxRecursive(chessCopy, 1, allEval, originalFen, true)\n        console.log(bestMove)\n        console.log(allEval)\n\n        // update position\n        chess.move(bestMove)\n\n        // add move to history\n        updateComputerHistory(bestMove);\n\n        // update chessboard\n        setFen(chess.fen());\n    }, 1000)\n}\nconst getBoardEvaluation = (board) => {\n    let count = 0;\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (board[i][j] === null)\n                continue\n            let piece = board[i][j].type\n            let color = board[i][j].color\n            if (color === 'b') {\n                count += pieceValues[piece]\n            }\n            else {\n                count -= pieceValues[piece]\n            }\n        }\n    }\n    return count\n}\n\nexport default MiniMax\n"]},"metadata":{},"sourceType":"module"}