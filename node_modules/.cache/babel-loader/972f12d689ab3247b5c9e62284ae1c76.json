{"ast":null,"code":"import Chess from \"chess.js\";\nimport getBoardEvaluation from './getBoardEvaluation';\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, isMax) => {\n  if (depth === 0) {\n    return [null, getBoardEvaluation(chessCopy.fen())];\n  }\n\n  const moves = chessCopy.moves();\n  let bestMove = moves[Math.floor(Math.random() * moves.length)];\n\n  if (isMax) {\n    let maxEval = -Infinity;\n\n    for (let i = 0; i < moves.length; i++) {\n      // Update move\n      chessCopy.move(moves[i]); // Push board eval to list\n\n      allEval[depth - 1].push({\n        score: getBoardEvaluation(chessCopy.fen()),\n        move: moves[i],\n        moves: `${i}/${moves.length - 1}`,\n        isMax: true\n      }); // Recursive call minimax with lower depth\n\n      let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, false)[1]; // Undo move\n\n      chessCopy.undo(); // Sets best move according to currentEval min\n\n      if (currentEval > maxEval) {\n        maxEval = currentEval;\n        bestMove = moves[i];\n      }\n    }\n\n    return [bestMove, maxEval];\n  } else {\n    let minEval = Infinity;\n\n    for (let i = 0; i < moves.length; i++) {\n      // Update move\n      chessCopy.move(moves[i]); // Push board eval to list\n\n      allEval[depth - 1].push({\n        score: getBoardEvaluation(chessCopy.fen()),\n        move: moves[i],\n        moves: `${i}/${moves.length - 1}`,\n        isMax: false\n      }); // Recursive call minimax with lower depth\n\n      let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, true)[1]; // Undo move\n\n      chessCopy.undo(); // Sets best move according to currentEval min\n\n      if (currentEval < minEval) {\n        minEval = currentEval;\n        bestMove = moves[i];\n      }\n    }\n\n    return [bestMove, minEval];\n  }\n};\n\nconst fetchBestMove = async (chessCopy, depth, allEval, isMax) => {\n  const bestMove = await miniMaxRecursive(chessCopy, depth, allEval, isMax);\n  console.log(bestMove);\n  return bestMove[0];\n};\n\nconst MiniMax = (chess, updateComputerHistory, setFen, setEvalCount) => {\n  const allEval = [[], [], []];\n  const chessCopy = new Chess(chess.fen());\n  console.log(getBoardEvaluation(chess.fen())); // computer response random\n\n  fetchBestMove(chessCopy, 3, allEval, true).then(bestMove => {\n    // update position\n    chess.move(bestMove);\n    console.log(allEval); // Update eval coutn\n\n    const totalEvaluations = allEval.map(evaluation => {\n      return evaluation.length;\n    });\n    setEvalCount(totalEvaluations.reduce((a, b) => a + b, 0)); // add move to history\n\n    updateComputerHistory(bestMove); // update chessboard\n\n    setFen(chess.fen());\n  });\n};\n\n_c = MiniMax;\nexport default MiniMax;\n\nvar _c;\n\n$RefreshReg$(_c, \"MiniMax\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/bots/MiniMax.js"],"names":["Chess","getBoardEvaluation","miniMaxRecursive","chessCopy","depth","allEval","isMax","fen","moves","bestMove","Math","floor","random","length","maxEval","Infinity","i","move","push","score","currentEval","undo","minEval","fetchBestMove","console","log","MiniMax","chess","updateComputerHistory","setFen","setEvalCount","then","totalEvaluations","map","evaluation","reduce","a","b"],"mappings":"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","sourcesContent":["import Chess from \"chess.js\";\nimport getBoardEvaluation from './getBoardEvaluation'\n\n\nconst miniMaxRecursive = (chessCopy, depth, allEval, isMax) => {\n    if (depth === 0) {\n        return [null, getBoardEvaluation(chessCopy.fen())];\n    }\n\n    const moves = chessCopy.moves();\n    let bestMove = moves[Math.floor(Math.random() * moves.length)];\n\n    if (isMax) {\n        let maxEval = -Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            // Update move\n            chessCopy.move(moves[i])\n            // Push board eval to list\n            allEval[depth - 1].push({ score: getBoardEvaluation(chessCopy.fen()), move: moves[i], moves: `${i}/${moves.length - 1}`, isMax: true })\n            // Recursive call minimax with lower depth\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, false)[1];\n            // Undo move\n            chessCopy.undo();\n            // Sets best move according to currentEval min\n            if (currentEval > maxEval) {\n                maxEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return [bestMove, maxEval];\n    }\n    else {\n        let minEval = Infinity;\n        for (let i = 0; i < moves.length; i++) {\n            // Update move\n            chessCopy.move(moves[i])\n            // Push board eval to list\n            allEval[depth - 1].push({ score: getBoardEvaluation(chessCopy.fen()), move: moves[i], moves: `${i}/${moves.length - 1}`, isMax: false })\n            // Recursive call minimax with lower depth\n            let currentEval = miniMaxRecursive(chessCopy, depth - 1, allEval, true)[1];\n            // Undo move\n            chessCopy.undo()\n            // Sets best move according to currentEval min\n            if (currentEval < minEval) {\n                minEval = currentEval;\n                bestMove = moves[i];\n            }\n        }\n        return [bestMove, minEval]\n    }\n\n}\n\nconst fetchBestMove = async (chessCopy, depth, allEval, isMax) => {\n    const bestMove = await miniMaxRecursive(chessCopy, depth, allEval, isMax)\n    console.log(bestMove)\n    return bestMove[0]\n}\n\nconst MiniMax = (chess, updateComputerHistory, setFen, setEvalCount) => {\n    const allEval = [[], [], []]\n    const chessCopy = new Chess(chess.fen());\n    console.log(getBoardEvaluation(chess.fen()))\n    // computer response random\n    fetchBestMove(chessCopy, 3, allEval, true).then((bestMove) => {\n\n        // update position\n        chess.move(bestMove);\n        console.log(allEval);\n\n        // Update eval coutn\n        const totalEvaluations = allEval.map((evaluation) => {\n            return evaluation.length\n        })\n        setEvalCount(totalEvaluations.reduce((a, b) => a + b, 0))\n        // add move to history\n        updateComputerHistory(bestMove);\n\n        // update chessboard\n        setFen(chess.fen());\n    })\n}\n\n\nexport default MiniMax\n"]},"metadata":{},"sourceType":"module"}