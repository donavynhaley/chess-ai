{"ast":null,"code":"var _jsxFileName = \"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/pages/Game/DataVisualization.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TreeVisualization from './TreeVisualization';\nimport SimpleModal from '../../common/SimpleModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DataVisualization = props => {\n  _s();\n\n  const {\n    selectedBot,\n    randomBotAvaliableMoves,\n    allBots,\n    evalCount,\n    allEval\n  } = props;\n  const [openModal, setOpenModal] = useState(false);\n  const [treeData, setTreeData] = useState({\n    name: \"Start\",\n    attributes: {\n      score: getBoardEvaluation(chess.fen())\n    },\n    children: []\n  });\n\n  const handleClose = () => {\n    setOpenModal(false);\n  };\n\n  const handleOpen = () => {\n    console.log(\"opens\");\n    treeDataCopy = treeData;\n    setOpenModal(true);\n    toTreeData(allEval, treeDataCopy, 3, setTreeData);\n  };\n\n  const randomBot = () => {\n    const listAvaliableMoves = randomBotAvaliableMoves.map(move => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: move\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Selecting random from avaliable moves\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"avaliable-moves\",\n        children: listAvaliableMoves && listAvaliableMoves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  };\n\n  const miniMaxBot = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SimpleModal, {\n        openModal: openModal,\n        setOpenModal: setOpenModal,\n        title: \"Tree\",\n        desc: /*#__PURE__*/_jsxDEV(TreeVisualization, {\n          data: treeData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 101\n        }, this),\n        onClick: handleClose,\n        buttonText: \"Close Modal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `Postions Evaluated: ${evalCount.toLocaleString()}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        color: \"secondary\",\n        onClick: handleOpen,\n        children: \"See Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }; // updates return based on what bot is selected. \n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-visualization\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), allBots[0] === selectedBot ? randomBot() : null, allBots[1] === selectedBot || allBots[2] === selectedBot ? miniMaxBot() : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DataVisualization, \"aDT9luzj32HuQQUpom+8+CNABNE=\");\n\n_c = DataVisualization;\nexport default DataVisualization;\n\nconst toTreeData = (allEval, treeData, depth, setTreeData) => {\n  let i = depth - 1;\n\n  for (let j = 0; j < allEval[i].length; j++) {\n    treeData.children.push({\n      name: allEval[i][j].move,\n      attributes: {\n        score: allEval[i][j].score\n      },\n      children: []\n    });\n  }\n\n  i -= 1;\n  let index = 0;\n\n  for (let j = 0; j < allEval[i].length; j++) {\n    treeData.children[index].children.push({\n      name: allEval[i][j].move,\n      attributes: {\n        score: allEval[i][j].score,\n        currentMove: allEval[i][j].currentMove,\n        totalMoves: allEval[i][j].totalMoves\n      },\n      children: []\n    });\n\n    if (allEval[i][j].currentMove === allEval[i][j].totalMoves) {\n      index += 1;\n    }\n  }\n\n  index = 0;\n  let indexTwo = 0;\n  i -= 1;\n\n  for (let j = 0; j < allEval[i].length; j++) {\n    treeData.children[indexTwo].children[index].children.push({\n      name: allEval[i][j].move,\n      attributes: {\n        score: allEval[i][j].score,\n        currentMove: allEval[i][j].currentMove,\n        totalMoves: allEval[i][j].totalMoves\n      },\n      children: []\n    });\n\n    if (allEval[i][j].currentMove === allEval[i][j].totalMoves) {\n      index += 1;\n\n      if (index >= treeData.children[indexTwo].children.length) {\n        indexTwo += 1;\n        index = 0;\n      }\n    }\n  }\n\n  setTreeData(treeData);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/pages/Game/DataVisualization.js"],"names":["React","useState","Button","TreeVisualization","SimpleModal","DataVisualization","props","selectedBot","randomBotAvaliableMoves","allBots","evalCount","allEval","openModal","setOpenModal","treeData","setTreeData","name","attributes","score","getBoardEvaluation","chess","fen","children","handleClose","handleOpen","console","log","treeDataCopy","toTreeData","randomBot","listAvaliableMoves","map","move","miniMaxBot","toLocaleString","depth","i","j","length","push","index","currentMove","totalMoves","indexTwo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Button from '@material-ui/core/Button';\nimport TreeVisualization from './TreeVisualization';\nimport SimpleModal from '../../common/SimpleModel'\n\n\n\nconst DataVisualization = (props) => {\n    const { selectedBot, randomBotAvaliableMoves, allBots, evalCount, allEval } = props;\n    const [openModal, setOpenModal] = useState(false);\n    const [treeData, setTreeData] = useState({\n        name: \"Start\",\n        attributes: {\n            score: getBoardEvaluation(chess.fen()),\n        },\n        children: []\n    })\n    const handleClose = () => {\n        setOpenModal(false)\n    }\n\n    const handleOpen = () => {\n        console.log(\"opens\")\n        treeDataCopy = treeData\n        setOpenModal(true)\n        toTreeData(allEval, treeDataCopy, 3, setTreeData)\n    }\n\n    const randomBot = () => {\n        const listAvaliableMoves = randomBotAvaliableMoves.map((move) => {\n            return <li>{move}</li>\n        })\n        return (\n            <>\n                <p>Selecting random from avaliable moves</p>\n                <ul className=\"avaliable-moves\">\n                    {listAvaliableMoves && listAvaliableMoves}\n                </ul>\n            </>\n        )\n    }\n    const miniMaxBot = () => {\n        return (\n            <>\n\n                <SimpleModal openModal={openModal} setOpenModal={setOpenModal} title={\"Tree\"} desc={<TreeVisualization data={treeData} />} onClick={handleClose} buttonText=\"Close Modal\" />\n                <p>{`Postions Evaluated: ${evalCount.toLocaleString()}`}</p>\n                <Button variant=\"outlined\" color=\"secondary\" onClick={handleOpen}>\n                    See Tree\n                </Button>\n            </>\n        )\n\n    }\n    // updates return based on what bot is selected. \n    return (\n        <div className=\"data-visualization\">\n            <h2>Data Visualization</h2>\n            {allBots[0] === selectedBot ? randomBot() : null}\n            {allBots[1] === selectedBot || allBots[2] === selectedBot ? miniMaxBot() : null}\n        </div>\n    )\n}\n\nexport default DataVisualization\n\nconst toTreeData = (allEval, treeData, depth, setTreeData) => {\n    let i = depth - 1\n    for (let j = 0; j < allEval[i].length; j++) {\n        treeData.children.push({\n            name: allEval[i][j].move,\n            attributes: {\n                score: allEval[i][j].score,\n            },\n            children: []\n        })\n    }\n    i -= 1\n    let index = 0\n    for (let j = 0; j < allEval[i].length; j++) {\n        treeData.children[index].children.push({\n            name: allEval[i][j].move,\n            attributes: {\n                score: allEval[i][j].score,\n                currentMove: allEval[i][j].currentMove,\n                totalMoves: allEval[i][j].totalMoves,\n            },\n            children: []\n        })\n        if (allEval[i][j].currentMove === allEval[i][j].totalMoves) {\n            index += 1\n        }\n    }\n    index = 0\n    let indexTwo = 0\n    i -= 1\n    for (let j = 0; j < allEval[i].length; j++) {\n        treeData.children[indexTwo].children[index].children.push({\n            name: allEval[i][j].move,\n            attributes: {\n                score: allEval[i][j].score,\n                currentMove: allEval[i][j].currentMove,\n                totalMoves: allEval[i][j].totalMoves,\n            },\n            children: []\n        })\n        if (allEval[i][j].currentMove === allEval[i][j].totalMoves) {\n            index += 1\n            if (index >= treeData.children[indexTwo].children.length) {\n                indexTwo += 1\n                index = 0\n            }\n        }\n    }\n    setTreeData(treeData)\n}"]},"metadata":{},"sourceType":"module"}