{"ast":null,"code":"var _jsxFileName = \"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/common/LoginForm.js\";\nimport React, { useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport Button from '@material-ui/core/Button';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Required'),\n  password: Yup.string().required('No password provided.').matches(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/, 'Minimum eight characters, at least one letter and one number.')\n});\nconst initialFormValues = {\n  name: \"\",\n  password: \"\"\n};\n\nconst resetForm = values => {\n  Object.keys(values).forEach(key => values[key] = \"\"); //<- Reseting all fields using blank space\n};\n\nconst LoginForm = () => {\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialFormValues,\n    validationSchema: LoginSchema,\n    onSubmit: values => {\n      resetForm(values);\n    },\n    children: ({\n      errors,\n      touched\n    }) => /*#__PURE__*/_jsxDEV(Form, {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: \"email\",\n          type: \"email\",\n          className: `input ${errors.email && touched.namemaile ? \"input-error\" : \"\"}`,\n          placeholder: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this), errors.email && touched.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 58\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: \"password\",\n          type: \"password\",\n          className: `input ${errors.password && touched.password ? \"input-error\" : \"\"}`,\n          placeholder: \"Password\",\n          id: \"password-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this), errors.password && touched.password ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/common/LoginForm.js"],"names":["React","useState","Formik","Form","Field","Button","Yup","LoginSchema","object","shape","email","string","required","password","matches","initialFormValues","name","resetForm","values","Object","keys","forEach","key","LoginForm","errors","touched","namemaile"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Formik, Form, Field } from 'formik';\nimport Button from '@material-ui/core/Button';\nimport * as Yup from 'yup';\n\nconst LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string()\n        .required('No password provided.')\n        .matches(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/, 'Minimum eight characters, at least one letter and one number.')\n});\n\nconst initialFormValues = {\n    name: \"\",\n    password: \"\",\n}\n\n\nconst resetForm = (values) => {\n    Object.keys(values).forEach(key => (values[key] = \"\"));  //<- Reseting all fields using blank space\n}\n\nconst LoginForm = () => {\n    return (\n        <Formik\n            initialValues={initialFormValues}\n            validationSchema={LoginSchema}\n            onSubmit={values => {\n                resetForm(values)\n            }}\n        >\n            {({ errors, touched }) => (\n                <Form className=\"form\">\n                    <div className=\"form-group\">\n                        <Field name=\"email\" type=\"email\" className={`input ${errors.email && touched.namemaile ? \"input-error\" : \"\"}`} placeholder=\"Email\" />\n                        {errors.email && touched.email ? <div className=\"error\">{errors.email}</div> : null}\n                    </div>\n                    <div className=\"form-group\">\n                        <Field name=\"password\"\n                            type=\"password\" className={`input ${errors.password && touched.password ? \"input-error\" : \"\"}`} placeholder=\"Password\" id=\"password-input\" />\n                        {errors.password && touched.password ? (\n                            <div className=\"error\">{errors.password}</div>\n                        ) : null}\n                    </div>\n                    <Button variant=\"contained\" color=\"primary\">\n                        Submit\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nexport default LoginForm\n"]},"metadata":{},"sourceType":"module"}