{"ast":null,"code":"var _jsxFileName = \"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/common/LoginForm.js\";\nimport React, { useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Required'),\n  password: Yup.string().required('No password provided.').min(8, 'Password is too short - should be 8 characters minimum.').matches(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/, 'Password can only contain Latin letters.')\n});\nconst initialFormValues = {\n  name: \"\",\n  password: \"\"\n};\n\nconst LoginForm = () => {\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialFormValues,\n    validationSchema: ContactSchema,\n    onSubmit: values => {\n      sendEmail(values);\n      resetForm(values);\n    },\n    children: ({\n      errors,\n      touched\n    }) => /*#__PURE__*/_jsxDEV(Form, {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: \"name\",\n          className: `input ${errors.name && touched.name ? \"input-error\" : \"\"}`,\n          placeholder: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 25\n        }, this), errors.name && touched.name ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: errors.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 29\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: \"email\",\n          type: \"email\",\n          className: `input ${errors.email && touched.namemaile ? \"input-error\" : \"\"}`,\n          placeholder: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this), errors.email && touched.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 58\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          as: \"textarea\",\n          name: \"message\",\n          className: `input ${errors.message && touched.message ? \"input-error\" : \"\"}`,\n          placeholder: \"Message\",\n          id: \"message-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this), errors.message && touched.message ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: errors.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        text: \"Send\",\n        addClass: \"xl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/components/common/LoginForm.js"],"names":["React","useState","Formik","Form","Field","Yup","LoginSchema","object","shape","email","string","required","password","min","matches","initialFormValues","name","LoginForm","ContactSchema","values","sendEmail","resetForm","errors","touched","namemaile","message"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nconst LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string()\n        .required('No password provided.')\n        .min(8, 'Password is too short - should be 8 characters minimum.')\n        .matches(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/, 'Password can only contain Latin letters.')\n});\n\nconst initialFormValues = {\n    name: \"\",\n    password: \"\",\n}\n\nconst LoginForm = () => {\n    return (\n        <Formik\n            initialValues={initialFormValues}\n            validationSchema={ContactSchema}\n            onSubmit={values => {\n                sendEmail(values)\n                resetForm(values)\n            }}\n        >\n            {({ errors, touched }) => (\n                <Form className=\"form\">\n                    <div className=\"form-group\">\n                        <Field name=\"name\" className={`input ${errors.name && touched.name ? \"input-error\" : \"\"}`} placeholder=\"Name\" />\n                        {errors.name && touched.name ? (\n                            <div className=\"error\">{errors.name}</div>\n                        ) : null}\n                    </div>\n                    <div className=\"form-group\">\n                        <Field name=\"email\" type=\"email\" className={`input ${errors.email && touched.namemaile ? \"input-error\" : \"\"}`} placeholder=\"Email\" />\n                        {errors.email && touched.email ? <div className=\"error\">{errors.email}</div> : null}\n                    </div>\n                    <div className=\"form-group\">\n                        <Field as=\"textarea\" name=\"message\" className={`input ${errors.message && touched.message ? \"input-error\" : \"\"}`} placeholder=\"Message\" id=\"message-input\" />\n                        {errors.message && touched.message ? (\n                            <div className=\"error\">{errors.message}</div>\n                        ) : null}\n                    </div>\n                    <Button type=\"submit\" text=\"Send\" addClass=\"xl\" />\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nexport default LoginForm\n"]},"metadata":{},"sourceType":"module"}