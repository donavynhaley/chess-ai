{"ast":null,"code":"var _jsxFileName = \"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Chessboard from 'chessboardjsx';\nimport Chess, { ChessInstance } from \"chess.js\";\nimport MoveHistory from './components/MoveHistory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [chess] = useState(new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"));\n  const [fen, setFen] = useState(chess.fen());\n  const [movesHistory, setMovesHistory] = useState([]);\n  const [selectedBot, setSelectedBot] = useState();\n  const [boardSize, setBoardSize] = useState(460);\n  const ref = useRef(null);\n  useEffect(() => {\n    console.log(ref.current);\n    setBoardSize(ref.current.offsetWidth);\n  }, []); // add playermove to history\n\n  const updatePlayerHistory = newMove => {\n    const currentMovesHistory = movesHistory;\n    const pieceType = chess.get(newMove.to).type.toUpperCase();\n    let move; // do not display pawn\n\n    if (pieceType === \"P\") {\n      move = {\n        playerMove: `${newMove.to}`\n      };\n    } else {\n      move = {\n        playerMove: `${pieceType}${newMove.to}`\n      };\n    }\n\n    currentMovesHistory.push(move);\n    setMovesHistory(currentMovesHistory);\n  };\n\n  const handlePlayerMove = playerMove => {\n    // Checks if playermove is valid\n    if (chess.move(playerMove)) {\n      // add move to history\n      updatePlayerHistory(playerMove); // computer response random\n\n      setTimeout(() => {\n        // Get list of valid moves\n        const moves = chess.moves(); // If valid move is avaliable selects random and updates chessboard\n\n        if (moves.length > 0) {\n          const computerMove = moves[Math.floor(Math.random() * moves.length)];\n          chess.move(computerMove); // add move to history\n\n          const currentMove = movesHistory[movesHistory.length - 1];\n          const newMove = { ...currentMove,\n            computerMove: computerMove\n          };\n          movesHistory[movesHistory.length - 1] = newMove; // update chessboard\n\n          setFen(chess.fen());\n        }\n      }, 300); // update chessboard\n\n      setFen(chess.fen());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chess-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Chess AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ref,\n        className: \"chessboard-container\",\n        children: /*#__PURE__*/_jsxDEV(Chessboard, {\n          width: boardSize,\n          position: fen,\n          onDrop: move => handlePlayerMove({\n            from: move.sourceSquare,\n            to: move.targetSquare,\n            promotion: \"q\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"utility-container\",\n      children: /*#__PURE__*/_jsxDEV(MoveHistory, {\n        movesHistory: movesHistory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"+z4VvsbD+Fqgi2BufZRj/ga+2Ek=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai/src/App.js"],"names":["React","useState","useEffect","useRef","Chessboard","Chess","ChessInstance","MoveHistory","App","chess","fen","setFen","movesHistory","setMovesHistory","selectedBot","setSelectedBot","boardSize","setBoardSize","ref","console","log","current","offsetWidth","updatePlayerHistory","newMove","currentMovesHistory","pieceType","get","to","type","toUpperCase","move","playerMove","push","handlePlayerMove","setTimeout","moves","length","computerMove","Math","floor","random","currentMove","from","sourceSquare","targetSquare","promotion"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport Chessboard from 'chessboardjsx';\nimport Chess, { ChessInstance } from \"chess.js\";\nimport MoveHistory from './components/MoveHistory';\n\nfunction App() {\n  const [chess] = useState(new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"));\n  const [fen, setFen] = useState(chess.fen());\n  const [movesHistory, setMovesHistory] = useState([]);\n  const [selectedBot, setSelectedBot] = useState();\n  const [boardSize, setBoardSize] = useState(460);\n  const ref = useRef(null);\n\n  useEffect(() => {\n    console.log(ref.current)\n    setBoardSize(ref.current.offsetWidth);\n  }, [])\n\n\n  // add playermove to history\n  const updatePlayerHistory = (newMove) => {\n    const currentMovesHistory = movesHistory;\n    const pieceType = chess.get(newMove.to).type.toUpperCase();\n    let move;\n    // do not display pawn\n    if (pieceType === \"P\") {\n      move = { playerMove: `${newMove.to}` }\n    }\n    else {\n      move = { playerMove: `${pieceType}${newMove.to}` }\n    }\n    currentMovesHistory.push(move);\n    setMovesHistory(currentMovesHistory);\n  }\n\n  const handlePlayerMove = (playerMove) => {\n    // Checks if playermove is valid\n    if (chess.move(playerMove)) {\n      // add move to history\n      updatePlayerHistory(playerMove);\n\n      // computer response random\n      setTimeout(() => {\n        // Get list of valid moves\n        const moves = chess.moves();\n\n        // If valid move is avaliable selects random and updates chessboard\n        if (moves.length > 0) {\n          const computerMove = moves[Math.floor(Math.random() * moves.length)];\n          chess.move(computerMove);\n\n          // add move to history\n          const currentMove = movesHistory[movesHistory.length - 1];\n          const newMove = { ...currentMove, computerMove: computerMove }\n          movesHistory[movesHistory.length - 1] = newMove;\n\n          // update chessboard\n          setFen(chess.fen());\n        }\n      }, 300)\n\n      // update chessboard\n      setFen(chess.fen());\n    }\n  }\n  return (\n    <div className=\"app-container\">\n      <div className=\"chess-container\">\n        <h1>Chess AI</h1>\n        <div ref={ref} className=\"chessboard-container\">\n          <Chessboard\n            width={boardSize}\n            position={fen}\n            onDrop={(move) => handlePlayerMove({\n              from: move.sourceSquare,\n              to: move.targetSquare,\n              promotion: \"q\",\n            })}\n\n          />\n        </div>\n      </div>\n      <div className=\"utility-container\">\n        <MoveHistory movesHistory={movesHistory} />\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}