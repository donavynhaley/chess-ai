[{"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/index.js":"1","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/App.js":"2","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/reportWebVitals.js":"3","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/common/NavBar.js":"4","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/pages/Game/index.js":"5","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/common/Selection.js":"6","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/common/AvatarMenu.js":"7","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/pages/Game/Game.js":"8","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/common/SimpleModel.js":"9","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/common/LoginForm.js":"10","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/pages/Game/DataVisualization.js":"11","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/pages/Game/MoveHistory.js":"12","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/common/Button.js":"13","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/pages/Game/TreeVisualization.js":"14","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/Bots/MiniMax.js":"15","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/Bots/randomBot.js":"16","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/Bots/getBoardEvaluation.js":"17","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/api/index.js":"18"},{"size":618,"mtime":1624251789722,"results":"19","hashOfConfig":"20"},{"size":455,"mtime":1624251090279,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1624251090279,"results":"22","hashOfConfig":"20"},{"size":939,"mtime":1624251090279,"results":"23","hashOfConfig":"20"},{"size":42,"mtime":1624251090279,"results":"24","hashOfConfig":"20"},{"size":2261,"mtime":1624251090279,"results":"25","hashOfConfig":"20"},{"size":1694,"mtime":1624259711704,"results":"26","hashOfConfig":"20"},{"size":6058,"mtime":1624252167390,"results":"27","hashOfConfig":"20"},{"size":1004,"mtime":1624251090279,"results":"28","hashOfConfig":"20"},{"size":2301,"mtime":1624259819466,"results":"29","hashOfConfig":"20"},{"size":1813,"mtime":1624251090279,"results":"30","hashOfConfig":"20"},{"size":517,"mtime":1624251090279,"results":"31","hashOfConfig":"20"},{"size":247,"mtime":1624251090279,"results":"32","hashOfConfig":"20"},{"size":467,"mtime":1624251090279,"results":"33","hashOfConfig":"20"},{"size":4503,"mtime":1624252201585,"results":"34","hashOfConfig":"20"},{"size":740,"mtime":1624251090279,"results":"35","hashOfConfig":"20"},{"size":943,"mtime":1624251090279,"results":"36","hashOfConfig":"20"},{"size":827,"mtime":1624259548341,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"624qb6",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/index.js",[],["78","79"],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/App.js",["80"],"import React from 'react'\nimport NavBar from './components/common/NavBar'\nimport { Game } from './components/pages/Game';\nimport {\n  Route,\n  useHistory,\n  Switch,\n} from 'react-router-dom';\nfunction App() {\n  <Switch>\n    <Route path=\"/\" component={App} />\n    <Route path=\"/login\" component={App} />\n  </Switch>\n\n\n  return (\n    <>\n      <NavBar />\n      <div className=\"app-container\">\n        <Game />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/reportWebVitals.js",[],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/common/NavBar.js",[],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/pages/Game/index.js",[],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/common/Selection.js",[],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/common/AvatarMenu.js",[],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/pages/Game/Game.js",["81"],"import React, { useState, useEffect, useRef } from 'react'\nimport Chessboard from 'chessboardjsx';\nimport Chess from \"chess.js\";\nimport MoveHistory from './MoveHistory';\nimport DataVisualization from './DataVisualization';\nimport NavBar from '../../common/NavBar';\nimport randomBot from '../../Bots/randomBot';\nimport MiniMax from '../../Bots/MiniMax';\nimport SimpleModal from '../../common/SimpleModel';\n\nconst startingFen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\nconst allBots = [\"Random\", \"MiniMax\", \"AlphaBeta\", \"Stockfish\"]\nconst allStartingPositions = [\n    { name: \"Start\", fen: startingFen },\n    { name: \"Caro-Kann Defense\", fen: \"rnbqkbnr/pp1ppppp/2p5/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n    { name: \"Pirc Defense\", fen: \"rnbqkbnr/ppp1pppp/3p4/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n    { name: \"Sicilian Defense\", fen: \"rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 1\" },\n    { name: \"French Defense\", fen: \"rnbqkbnr/pppp1ppp/4p3/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n]\nconst allDepth = [1, 2, 3]\nfunction Game() {\n    const [chess] = useState(new Chess(startingFen));\n    const [fen, setFen] = useState(chess.fen());\n    const [movesHistory, setMovesHistory] = useState([]);\n    const [selectedBot, setSelectedBot] = useState(allBots[1]);\n    const [selectedPos, setSelectedPos] = useState(allStartingPositions[0].fen)\n    const [evalCount, setEvalCount] = useState(0)\n    const [gameOverText, setGameOverText] = useState('');\n    const [randomBotAvaliableMoves, setRandomBotAvaliableMoves] = useState([]);\n    const [treeData, setTreeData] = useState({})\n    const [boardSize, setBoardSize] = useState(460);\n    const [openModal, setOpenModal] = useState(false)\n    const [depth, setDepth] = useState(allDepth[1])\n    const ref = useRef(null);\n\n    useEffect(() => {\n        console.log(ref.current.offsetWidth)\n        setBoardSize(ref.current.offsetWidth);\n\n    }, [])\n\n    useEffect(() => {\n        resetGame()\n\n    }, [selectedPos])\n\n    useEffect(() => {\n        // Check for win\n        if (chess.game_over()) {\n            handleGameOver();\n        }\n    })\n\n    // Add playermove to history\n    const updatePlayerHistory = (newMove) => {\n        const currentMovesHistory = movesHistory;\n        const pieceType = chess.get(newMove.to).type.toUpperCase();\n        let move;\n\n        // do not display pawn\n        if (pieceType === \"P\") {\n            move = { playerMove: `${newMove.to}` }\n        }\n        else {\n            move = { playerMove: `${pieceType}${newMove.to}` }\n        }\n\n        currentMovesHistory.push(move);\n        setMovesHistory(currentMovesHistory);\n    }\n\n    // Add computer move to history\n    const updateComputerHistory = (computerMove) => {\n        const currentMove = movesHistory[movesHistory.length - 1];\n        const newMove = { ...currentMove, computerMove: computerMove }\n        movesHistory[movesHistory.length - 1] = newMove;\n    }\n\n    // Handles player move and calls bots move\n    const handlePlayerMove = (playerMove) => {\n        // Checks if playermove is valid\n        if (chess.move(playerMove)) {\n            // add move to history\n            updatePlayerHistory(playerMove);\n\n            // update chessboard\n            setFen(chess.fen());\n\n            // computer response random\n            if (selectedBot === allBots[0]) {\n                randomBot(chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen)\n            }\n            else if (selectedBot === allBots[1]) {\n                MiniMax(chess, updateComputerHistory, setFen, setEvalCount, setTreeData, depth)\n            }\n        }\n    }\n\n    const resetGame = () => {\n        // reset board and game\n        setFen(selectedPos);\n        chess.load(selectedPos);\n        setMovesHistory([]);\n        setOpenModal(false)\n    }\n\n    const handleGameOver = () => {\n        // Check how game ended\n        if (chess.in_checkmate()) {\n            setGameOverText(\"Checkmate\")\n        }\n        if (chess.in_draw()) {\n            setGameOverText(\"Draw\")\n        }\n        if (chess.in_stalemate()) {\n            setGameOverText(\"Stalemate\")\n        }\n        if (chess.in_threefold_repetition()) {\n            setGameOverText(\"Threefold Repetition\")\n        }\n        if (chess.insufficient_material()) {\n            setGameOverText(\"Insufficient Material\")\n        }\n\n        // Open game over modal\n        setOpenModal(true)\n\n    }\n\n\n    return (\n        <>\n            <NavBar\n                selectedBot={selectedBot}\n                setSelectedBot={setSelectedBot}\n                allBots={allBots}\n                selectedPos={selectedPos}\n                setSelectedPos={setSelectedPos}\n                allStartingPositions={allStartingPositions}\n                depth={depth}\n                setDepth={setDepth}\n                allDepth={allDepth}\n            />\n            <div className=\"app-container\">\n                <SimpleModal openModal={openModal} setOpenModal={setOpenModal} title={\"Game Over\"} desc={`The game ended with a ${gameOverText}`} onClick={resetGame} buttonText=\"Play Again?\" />\n                <div className=\"chess-container\">\n                    <div ref={ref} className=\"chessboard-container\">\n                        <Chessboard\n                            width={boardSize}\n                            position={fen}\n                            onDrop={(move) => handlePlayerMove({\n                                from: move.sourceSquare,\n                                to: move.targetSquare,\n                                promotion: \"q\",\n                            })}\n                        />\n                    </div>\n                </div>\n                <div className=\"utility-container\">\n                    <MoveHistory movesHistory={movesHistory} />\n                    <DataVisualization selectedBot={selectedBot} randomBotAvaliableMoves={randomBotAvaliableMoves} allBots={allBots} evalCount={evalCount} treeData={treeData} />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Game;\n","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/common/SimpleModel.js",[],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/common/LoginForm.js",["82","83"],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/pages/Game/DataVisualization.js",[],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/pages/Game/MoveHistory.js",[],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/common/Button.js",["84"],"import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Button = ({ onClick, text }) => {\n    return (\n        <button className=\"btn dark\" onClick={onClick}>\n            {text}\n        </button>\n\n    )\n}\n\nexport default Button\n","/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/pages/Game/TreeVisualization.js",[],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/Bots/MiniMax.js",[],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/Bots/randomBot.js",[],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/components/Bots/getBoardEvaluation.js",[],"/home/donavynh/Documents/Github/chess-ai/chess-ai-fe/src/api/index.js",["85"],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":6,"column":3,"nodeType":"92","messageId":"93","endLine":6,"endColumn":13},{"ruleId":"94","severity":1,"message":"95","line":45,"column":8,"nodeType":"96","endLine":45,"endColumn":21,"suggestions":"97"},{"ruleId":"90","severity":1,"message":"98","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"99","line":25,"column":11,"nodeType":"92","messageId":"93","endLine":25,"endColumn":20},{"ruleId":"90","severity":1,"message":"100","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":14},{"ruleId":"90","severity":1,"message":"101","line":4,"column":7,"nodeType":"92","messageId":"93","endLine":4,"endColumn":14},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetGame'. Either include it or remove the dependency array.","ArrayExpression",["104"],"'useState' is defined but never used.","'resetForm' is assigned a value but never used.","'styled' is defined but never used.","'backend' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},"Update the dependencies array to be: [resetGame, selectedPos]",{"range":"107","text":"108"},[1985,1998],"[resetGame, selectedPos]"]