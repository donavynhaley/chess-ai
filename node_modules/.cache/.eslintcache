[{"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/index.js":"1","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/reportWebVitals.js":"2","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/App.js":"3","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/PreviousGames/PreviousGames.js":"4","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/common/NavBar.js":"5","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/common/Selection.js":"6","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/common/AvatarMenu.js":"7","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/common/LoginForm.js":"8","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/common/SimpleModel.js":"9","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/common/Button.js":"10","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/api/index.js":"11","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/Game/index.js":"12","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/Game/Game.js":"13","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/Game/DataVisualization.js":"14","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/Game/MoveHistory.js":"15","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/Bots/randomBot.js":"16","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/Bots/MiniMax.js":"17","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/Game/TreeVisualization.js":"18","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/Bots/getBoardEvaluation.js":"19","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/PreviousGames/GameRecap.js":"20"},{"size":618,"mtime":1624485324494,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1624295825448,"results":"23","hashOfConfig":"22"},{"size":492,"mtime":1624485365022,"results":"24","hashOfConfig":"22"},{"size":817,"mtime":1624489628032,"results":"25","hashOfConfig":"22"},{"size":998,"mtime":1624485520413,"results":"26","hashOfConfig":"22"},{"size":2261,"mtime":1624295825446,"results":"27","hashOfConfig":"22"},{"size":1805,"mtime":1624295825446,"results":"28","hashOfConfig":"22"},{"size":2301,"mtime":1624295825446,"results":"29","hashOfConfig":"22"},{"size":1006,"mtime":1624295825447,"results":"30","hashOfConfig":"22"},{"size":247,"mtime":1624295825446,"results":"31","hashOfConfig":"22"},{"size":747,"mtime":1624295825445,"results":"32","hashOfConfig":"22"},{"size":42,"mtime":1624295825447,"results":"33","hashOfConfig":"22"},{"size":6058,"mtime":1624295825447,"results":"34","hashOfConfig":"22"},{"size":1813,"mtime":1624295825447,"results":"35","hashOfConfig":"22"},{"size":585,"mtime":1624295825447,"results":"36","hashOfConfig":"22"},{"size":740,"mtime":1624295825446,"results":"37","hashOfConfig":"22"},{"size":4503,"mtime":1624295825445,"results":"38","hashOfConfig":"22"},{"size":516,"mtime":1624295825447,"results":"39","hashOfConfig":"22"},{"size":943,"mtime":1624295825445,"results":"40","hashOfConfig":"22"},{"size":795,"mtime":1624490221319,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hugavf",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/index.js",[],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/reportWebVitals.js",[],["87","88"],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/App.js",["89"],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/PreviousGames/PreviousGames.js",["90"],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/common/NavBar.js",[],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/common/Selection.js",[],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/common/AvatarMenu.js",["91"],"import React, { useState, useEffect } from 'react'\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Avatar from '@material-ui/core/Avatar';\nimport SimpleModal from './SimpleModel'\nimport LoginForm from './LoginForm'\n\nconst AvatarMenu = () => {\n    const [openMenu, setOpenMenu] = useState();\n    const [openModal, setOpenModal] = useState(false);\n    const [selected, setSelected ] = useState(\"\")\n\n    const handleClick = (e) => {\n        setOpenMenu(e.currentTarget)\n    }\n\n    const handleClose = () => {\n        setOpenMenu(false)\n    }\n\n    const handleSeleciton = (selection) => {\n        setSelected(selection)\n        if (selection === \"Login\" || selection === \"Register\") {\n            handleClose()\n            setOpenModal(true);\n        }\n    }\n\n    const body = (\n        <LoginForm isLogin={selected}/>\n    )\n    return (\n        <div>\n            <SimpleModal openModal={openModal} setOpenModal={setOpenModal} title={selected} desc={body} />\n            <Avatar aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick} />\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={openMenu}\n                keepMounted\n                open={Boolean(openMenu)}\n                onClose={handleClose}\n            >\n                {/* <MenuItem onClick={handleClose}>Profile</MenuItem>\n                <MenuItem onClick={handleClose}>Previous Games</MenuItem> */}\n                <MenuItem onClick={() => handleSeleciton(\"Login\")}>Login</MenuItem>\n                <MenuItem onClick={() => handleSeleciton(\"Register\")}>Register</MenuItem>\n                <MenuItem onClick={() => handleSeleciton(\"Previous Games\")}>Previous Games</MenuItem>\n            </Menu>\n        </div>\n    )\n}\n\nexport default AvatarMenu\n","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/common/LoginForm.js",["92","93"],"import React, { useState } from 'react'\nimport { Formik, Form, Field } from 'formik';\nimport Button from '@material-ui/core/Button';\nimport * as Yup from 'yup';\nimport { register, login } from '../../api'\nconst LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string()\n        .required('No password provided.')\n        .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, 'Password must contain at least one uppercase letter, one lowercase letter, one number and one special character')\n});\n\nconst initialFormValues = {\n    email: \"\",\n    password: \"\",\n}\n\n\nconst LoginForm = ({isLogin, closeModal}) => {\n\n    const postLogin = (values) => {\n        isLogin === \"Login\" ? login(values) : register(values)\n    }\n    \n    const resetForm = (values) => {\n        Object.keys(values).forEach(key => (values[key] = \"\"));  //<- Reseting all fields using blank space\n    }\n\n    return (\n        <Formik\n            initialValues={initialFormValues}\n            validationSchema={LoginSchema}\n            onSubmit={values => {\n                postLogin(values)\n            }}\n        >\n            {({ errors, touched }) => (\n                <Form className=\"form\">\n                    <div className=\"form-group\">\n                        <Field name=\"email\" type=\"email\" className={`input ${errors.email && touched.namemaile ? \"input-error\" : \"\"}`} placeholder=\"Email\" />\n                        {errors.email && touched.email ? <div className=\"error\">{errors.email}</div> : null}\n                    </div>\n                    <div className=\"form-group\">\n                        <Field name=\"password\"\n                            type=\"password\" className={`input ${errors.password && touched.password ? \"input-error\" : \"\"}`} placeholder=\"Password\" id=\"password-input\" />\n                        {errors.password && touched.password ? (\n                            <div className=\"error\">{errors.password}</div>\n                        ) : null}\n                    </div>\n                    <Button type=\"submit\" variant=\"outlined\" color=\"secondary\">\n                        Submit\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nexport default LoginForm\n","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/common/SimpleModel.js",[],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/common/Button.js",["94"],"import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Button = ({ onClick, text }) => {\n    return (\n        <button className=\"btn dark\" onClick={onClick}>\n            {text}\n        </button>\n\n    )\n}\n\nexport default Button\n","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/api/index.js",[],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/Game/index.js",[],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/Game/Game.js",["95"],"import React, { useState, useEffect, useRef } from 'react'\nimport Chessboard from 'chessboardjsx';\nimport Chess from \"chess.js\";\nimport MoveHistory from './MoveHistory';\nimport DataVisualization from './DataVisualization';\nimport NavBar from '../../common/NavBar';\nimport randomBot from '../../Bots/randomBot';\nimport MiniMax from '../../Bots/MiniMax';\nimport SimpleModal from '../../common/SimpleModel';\n\nconst startingFen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\nconst allBots = [\"Random\", \"MiniMax\", \"AlphaBeta\", \"Stockfish\"]\nconst allStartingPositions = [\n    { name: \"Start\", fen: startingFen },\n    { name: \"Caro-Kann Defense\", fen: \"rnbqkbnr/pp1ppppp/2p5/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n    { name: \"Pirc Defense\", fen: \"rnbqkbnr/ppp1pppp/3p4/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n    { name: \"Sicilian Defense\", fen: \"rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 1\" },\n    { name: \"French Defense\", fen: \"rnbqkbnr/pppp1ppp/4p3/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1\" },\n]\nconst allDepth = [1, 2, 3]\nfunction Game() {\n    const [chess] = useState(new Chess(startingFen));\n    const [fen, setFen] = useState(chess.fen());\n    const [movesHistory, setMovesHistory] = useState([]);\n    const [selectedBot, setSelectedBot] = useState(allBots[1]);\n    const [selectedPos, setSelectedPos] = useState(allStartingPositions[0].fen)\n    const [evalCount, setEvalCount] = useState(0)\n    const [gameOverText, setGameOverText] = useState('');\n    const [randomBotAvaliableMoves, setRandomBotAvaliableMoves] = useState([]);\n    const [treeData, setTreeData] = useState({})\n    const [boardSize, setBoardSize] = useState(460);\n    const [openModal, setOpenModal] = useState(false)\n    const [depth, setDepth] = useState(allDepth[1])\n    const ref = useRef(null);\n\n    useEffect(() => {\n        console.log(ref.current.offsetWidth)\n        setBoardSize(ref.current.offsetWidth);\n\n    }, [])\n\n    useEffect(() => {\n        resetGame()\n\n    }, [selectedPos])\n\n    useEffect(() => {\n        // Check for win\n        if (chess.game_over()) {\n            handleGameOver();\n        }\n    })\n\n    // Add playermove to history\n    const updatePlayerHistory = (newMove) => {\n        const currentMovesHistory = movesHistory;\n        const pieceType = chess.get(newMove.to).type.toUpperCase();\n        let move;\n\n        // do not display pawn\n        if (pieceType === \"P\") {\n            move = { playerMove: `${newMove.to}` }\n        }\n        else {\n            move = { playerMove: `${pieceType}${newMove.to}` }\n        }\n\n        currentMovesHistory.push(move);\n        setMovesHistory(currentMovesHistory);\n    }\n\n    // Add computer move to history\n    const updateComputerHistory = (computerMove) => {\n        const currentMove = movesHistory[movesHistory.length - 1];\n        const newMove = { ...currentMove, computerMove: computerMove }\n        movesHistory[movesHistory.length - 1] = newMove;\n    }\n\n    // Handles player move and calls bots move\n    const handlePlayerMove = (playerMove) => {\n        // Checks if playermove is valid\n        if (chess.move(playerMove)) {\n            // add move to history\n            updatePlayerHistory(playerMove);\n\n            // update chessboard\n            setFen(chess.fen());\n\n            // computer response random\n            if (selectedBot === allBots[0]) {\n                randomBot(chess, updateComputerHistory, setRandomBotAvaliableMoves, setFen)\n            }\n            else if (selectedBot === allBots[1]) {\n                MiniMax(chess, updateComputerHistory, setFen, setEvalCount, setTreeData, depth)\n            }\n        }\n    }\n\n    const resetGame = () => {\n        // reset board and game\n        setFen(selectedPos);\n        chess.load(selectedPos);\n        setMovesHistory([]);\n        setOpenModal(false)\n    }\n\n    const handleGameOver = () => {\n        // Check how game ended\n        if (chess.in_checkmate()) {\n            setGameOverText(\"Checkmate\")\n        }\n        if (chess.in_draw()) {\n            setGameOverText(\"Draw\")\n        }\n        if (chess.in_stalemate()) {\n            setGameOverText(\"Stalemate\")\n        }\n        if (chess.in_threefold_repetition()) {\n            setGameOverText(\"Threefold Repetition\")\n        }\n        if (chess.insufficient_material()) {\n            setGameOverText(\"Insufficient Material\")\n        }\n\n        // Open game over modal\n        setOpenModal(true)\n\n    }\n\n\n    return (\n        <>\n            <NavBar\n                selectedBot={selectedBot}\n                setSelectedBot={setSelectedBot}\n                allBots={allBots}\n                selectedPos={selectedPos}\n                setSelectedPos={setSelectedPos}\n                allStartingPositions={allStartingPositions}\n                depth={depth}\n                setDepth={setDepth}\n                allDepth={allDepth}\n            />\n            <div className=\"app-container\">\n                <SimpleModal openModal={openModal} setOpenModal={setOpenModal} title={\"Game Over\"} desc={`The game ended with a ${gameOverText}`} onClick={resetGame} buttonText=\"Play Again?\" />\n                <div className=\"chess-container\">\n                    <div ref={ref} className=\"chessboard-container\">\n                        <Chessboard\n                            width={boardSize}\n                            position={fen}\n                            onDrop={(move) => handlePlayerMove({\n                                from: move.sourceSquare,\n                                to: move.targetSquare,\n                                promotion: \"q\",\n                            })}\n                        />\n                    </div>\n                </div>\n                <div className=\"utility-container\">\n                    <MoveHistory movesHistory={movesHistory} />\n                    <DataVisualization selectedBot={selectedBot} randomBotAvaliableMoves={randomBotAvaliableMoves} allBots={allBots} evalCount={evalCount} treeData={treeData} />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Game;\n","/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/Game/DataVisualization.js",[],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/Game/MoveHistory.js",[],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/Bots/randomBot.js",[],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/Bots/MiniMax.js",[],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/Game/TreeVisualization.js",[],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/Bots/getBoardEvaluation.js",[],"/Users/donavynhaley/Documents/GitHub/chess-ai/chess-ai-fe/src/components/pages/PreviousGames/GameRecap.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":6,"column":3,"nodeType":"102","messageId":"103","endLine":6,"endColumn":13},{"ruleId":"100","severity":1,"message":"104","line":5,"column":11,"nodeType":"102","messageId":"103","endLine":5,"endColumn":21},{"ruleId":"100","severity":1,"message":"105","line":1,"column":27,"nodeType":"102","messageId":"103","endLine":1,"endColumn":36},{"ruleId":"100","severity":1,"message":"106","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":25},{"ruleId":"100","severity":1,"message":"107","line":25,"column":11,"nodeType":"102","messageId":"103","endLine":25,"endColumn":20},{"ruleId":"100","severity":1,"message":"108","line":2,"column":8,"nodeType":"102","messageId":"103","endLine":2,"endColumn":14},{"ruleId":"109","severity":1,"message":"110","line":45,"column":8,"nodeType":"111","endLine":45,"endColumn":21,"suggestions":"112"},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'getHistory' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'resetForm' is assigned a value but never used.","'styled' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetGame'. Either include it or remove the dependency array.","ArrayExpression",["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},"Update the dependencies array to be: [resetGame, selectedPos]",{"range":"118","text":"119"},[1985,1998],"[resetGame, selectedPos]"]